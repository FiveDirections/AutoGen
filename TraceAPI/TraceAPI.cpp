//
//	WARNING: This file was generated by AutoGen version 1.1.0.0 on 2020-04-21 12:18:10
//			 Do not make any changes to this file because they will be lost the 
//			 next time AutoGen is run
//
//	Command line: "E:\Data\Projects\FiveDir\APITracing\x64\Debug\AutoGen.exe" /data=..\..\Win32API.accdb /v /imp notepad.exe /inc="api-ms-win-core-file*.dll" /out=..\..\TraceAPI\
//

//
// FACILITY:	TraceAPI - Trace Windows APIs in notepad.exe
//
// DESCRIPTION:	This DLL is injected into a process by InjectDLL. Its purpose is to intercept the following APIs and log their 
//				parameters using the FDI-Detours TraceLogging provider ({FD06D490-ED39-4CFF-BE10-82C940BCBE74}). Diagnostic information
//				about how this program is running is output using WPP (Windows PreProcessor) ETW tracing using the GUID
//				{DCDE5106-86EE-47F2-966A-B6C425ACD9F9}
//
//				The following APIs are intercepted and logged:
//					CreateFileW
//					DeleteFileW
//					FindClose
//					FindFirstFileW
//					GetFileAttributesExW
//					GetFileAttributesW
//					GetFileInformationByHandle
//					GetFullPathNameW
//					ReadFile
//					SetEndOfFile
//					WriteFile
//
// VERSION:		1.1
//
// AUTHOR:		Brian Catlin
//
// CREATED:		2019-11-15
//
// MODIFICATION HISTORY:
//
//	1.1		2020-04-19	Brian Catlin
//			Support new heuristics that detect parameter data type with appropriate TraceLoggingXxx macro invocations in the trace_input_params and
//			trace_output_params string templates
//
//	1.0		2019-11-15	Brian Catlin
//			Original version
//

//
// INCLUDE FILES:
//

//
// System includes
//

#define WIN32_NO_STATUS
#include <Windows.h>
#undef WIN32_NO_STATUS
#include <ntstatus.h>
#include <TraceLoggingProvider.h>
#include <evntprov.h>

#include <string>
#include <list>

//
// Includes for APIs being Detoured
//

#include <fileapi.h>

//
// Project includes
//

#include "detours.h"

#include "TraceAPI.h"
#include "..\Global\Utils.h"
#include "..\Global\WPP_Tracing.h"
#include "Version.h"

#include "TraceAPI.tmh"								// Generated by TraceWPP

using namespace FDI;

//
// CONSTANTS:
//

//
// TYPES:
//

//
// MACROS:
//

#define ATTACH(x)       det_attach (&(PVOID&) real_##x, my_##x, #x)
#define DETACH(x)       det_detach (&(PVOID&) real_##x, my_##x, #x)

//
// DEFINITIONS:
//

//
// DECLARATIONS:
//

TRACELOGGING_DECLARE_PROVIDER (TA_tlg);
//
// Pointers to the real APIs
//

extern "C"
{
HANDLE
(WINAPI * real_CreateFileW)
	(
	 LPCWSTR  lpFileName,
	 DWORD  dwDesiredAccess,
	 DWORD  dwShareMode,
	 LPSECURITY_ATTRIBUTES  lpSecurityAttributes,
	 DWORD  dwCreationDisposition,
	 DWORD  dwFlagsAndAttributes,
	 HANDLE  hTemplateFile
	) = CreateFileW;


BOOL
(WINAPI * real_DeleteFileW)
	(
	 LPCWSTR  lpFileName
	) = DeleteFileW;


BOOL
(WINAPI * real_FindClose)
	(
	 HANDLE  hFindFile
	) = FindClose;


HANDLE
(WINAPI * real_FindFirstFileW)
	(
	 LPCWSTR  lpFileName,
	 LPWIN32_FIND_DATAW  lpFindFileData
	) = FindFirstFileW;


BOOL
(WINAPI * real_GetFileAttributesExW)
	(
	 LPCWSTR  lpFileName,
	 GET_FILEEX_INFO_LEVELS  fInfoLevelId,
	 LPVOID  lpFileInformation
	) = GetFileAttributesExW;


DWORD
(WINAPI * real_GetFileAttributesW)
	(
	 LPCWSTR  lpFileName
	) = GetFileAttributesW;


BOOL
(WINAPI * real_GetFileInformationByHandle)
	(
	 HANDLE  hFile,
	 LPBY_HANDLE_FILE_INFORMATION  lpFileInformation
	) = GetFileInformationByHandle;


DWORD
(WINAPI * real_GetFullPathNameW)
	(
	 LPCWSTR  lpFileName,
	 DWORD  nBufferLength,
	 LPWSTR  lpBuffer,
	 LPWSTR*  lpFilePart
	) = GetFullPathNameW;


BOOL
(WINAPI * real_ReadFile)
	(
	 HANDLE  hFile,
	 LPVOID  lpBuffer,
	 DWORD  nNumberOfBytesToRead,
	 LPDWORD  lpNumberOfBytesRead,
	 LPOVERLAPPED  lpOverlapped
	) = ReadFile;


BOOL
(WINAPI * real_SetEndOfFile)
	(
	 HANDLE  hFile
	) = SetEndOfFile;


BOOL
(WINAPI * real_WriteFile)
	(
	 HANDLE  hFile,
	 LPCVOID  lpBuffer,
	 DWORD  nNumberOfBytesToWrite,
	 LPDWORD  lpNumberOfBytesWritten,
	 LPOVERLAPPED  lpOverlapped
	) = WriteFile;

}	// extern "C"

//
// FORWARD ROUTINES:
//

NTSTATUS 
attach_detours										// Intercept the APIs
	(
	);

NTSTATUS
detach_detours										// Stop intercepting the APIs
	(
	);

//
// Forward declarations of generated routines
//

HANDLE
my_CreateFileW
	(
	 LPCWSTR  lpFileName,
	 DWORD  dwDesiredAccess,
	 DWORD  dwShareMode,
	 LPSECURITY_ATTRIBUTES  lpSecurityAttributes,
	 DWORD  dwCreationDisposition,
	 DWORD  dwFlagsAndAttributes,
	 HANDLE  hTemplateFile
	);


BOOL
my_DeleteFileW
	(
	 LPCWSTR  lpFileName
	);


BOOL
my_FindClose
	(
	 HANDLE  hFindFile
	);


HANDLE
my_FindFirstFileW
	(
	 LPCWSTR  lpFileName,
	 LPWIN32_FIND_DATAW  lpFindFileData
	);


BOOL
my_GetFileAttributesExW
	(
	 LPCWSTR  lpFileName,
	 GET_FILEEX_INFO_LEVELS  fInfoLevelId,
	 LPVOID  lpFileInformation
	);


DWORD
my_GetFileAttributesW
	(
	 LPCWSTR  lpFileName
	);


BOOL
my_GetFileInformationByHandle
	(
	 HANDLE  hFile,
	 LPBY_HANDLE_FILE_INFORMATION  lpFileInformation
	);


DWORD
my_GetFullPathNameW
	(
	 LPCWSTR  lpFileName,
	 DWORD  nBufferLength,
	 LPWSTR  lpBuffer,
	 LPWSTR*  lpFilePart
	);


BOOL
my_ReadFile
	(
	 HANDLE  hFile,
	 LPVOID  lpBuffer,
	 DWORD  nNumberOfBytesToRead,
	 LPDWORD  lpNumberOfBytesRead,
	 LPOVERLAPPED  lpOverlapped
	);


BOOL
my_SetEndOfFile
	(
	 HANDLE  hFile
	);


BOOL
my_WriteFile
	(
	 HANDLE  hFile,
	 LPCVOID  lpBuffer,
	 DWORD  nNumberOfBytesToWrite,
	 LPDWORD  lpNumberOfBytesWritten,
	 LPOVERLAPPED  lpOverlapped
	);

NTSTATUS 
attach_detours										// Intercept the APIs
	(
	)

//
// DESCRIPTION:		
//
// ASSUMPTIONS:		User mode
//
// SIDE EFFECTS:
//
// RETURN VALUES:
//
//

{
NTSTATUS	status;


	TRACE_ENTER ();

	//
	// Tell Detours that we're starting a transaction to update the list of detours
	//

	DetourTransactionBegin ();
	DetourUpdateThread (GetCurrentThread ());

	//
	// List all the Detours to install
	//
	// NOTE: This list MUST match the list in detach_detours
	//

	ATTACH (CreateFileW);
	ATTACH (DeleteFileW);
	ATTACH (FindClose);
	ATTACH (FindFirstFileW);
	ATTACH (GetFileAttributesExW);
	ATTACH (GetFileAttributesW);
	ATTACH (GetFileInformationByHandle);
	ATTACH (GetFullPathNameW);
	ATTACH (ReadFile);
	ATTACH (SetEndOfFile);
	ATTACH (WriteFile);

	//
	// Tell Detours that we're done updating detours
	//

	status = DetourTransactionCommit ();

	TRACE_EXIT ();
	return status;
}							// End attach_detours


NTSTATUS
detach_detours										// Stop intercepting the APIs
	(
	)

//
// DESCRIPTION:		
//
// ASSUMPTIONS:		User mode
//
// SIDE EFFECTS:
//
// RETURN VALUES:
//
//

{
NTSTATUS	status;


	TRACE_ENTER ();

	//
	// Tell Detours that we're starting a transaction to update the list of detours
	//

	DetourTransactionBegin ();
	DetourUpdateThread (GetCurrentThread ());

	//
	// List all the detours to remove
	//
	// NOTE: This list MUST match the list in attach_detours
	//

	DETACH (CreateFileW);
	DETACH (DeleteFileW);
	DETACH (FindClose);
	DETACH (FindFirstFileW);
	DETACH (GetFileAttributesExW);
	DETACH (GetFileAttributesW);
	DETACH (GetFileInformationByHandle);
	DETACH (GetFullPathNameW);
	DETACH (ReadFile);
	DETACH (SetEndOfFile);
	DETACH (WriteFile);

	//
	// Tell Detours that we're done updating detours
	//

	status = DetourTransactionCommit ();

	TRACE_EXIT ();
	return status;
}							// End detach_detours

HANDLE
my_CreateFileW
	(
	 LPCWSTR  lpFileName,
	 DWORD  dwDesiredAccess,
	 DWORD  dwShareMode,
	 LPSECURITY_ATTRIBUTES  lpSecurityAttributes,
	 DWORD  dwCreationDisposition,
	 DWORD  dwFlagsAndAttributes,
	 HANDLE  hTemplateFile
	)

{
NTSTATUS	status;
HANDLE		ret_value;


	//
	// Write a pre-call entry to the log with all of the parameters
	//

	TraceLoggingWrite (TA_tlg, "API-Trace-PRECALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_PRE), 
		TraceLoggingString ("CreateFileW", "API"),
		TraceLoggingWideString (lpFileName, "lpFileName"),
		TraceLoggingValue (dwDesiredAccess, "dwDesiredAccess"),
		TraceLoggingValue (dwShareMode, "dwShareMode"),
		TraceLoggingPointer ((LPCVOID) lpSecurityAttributes, "lpSecurityAttributes"),
		TraceLoggingValue (dwCreationDisposition, "dwCreationDisposition"),
		TraceLoggingValue (dwFlagsAndAttributes, "dwFlagsAndAttributes"),
		TraceLoggingValue (hTemplateFile, "hTemplateFile")
		);

	//
	// Call the real API
	//

	ret_value = real_CreateFileW (
				lpFileName,
				dwDesiredAccess,
				dwShareMode,
				lpSecurityAttributes,
				dwCreationDisposition,
				dwFlagsAndAttributes,
				hTemplateFile);

	//
	// Write a post-call entry to the log with just the output parameters
	//

	status = GetLastError ();

	TraceLoggingWrite (TA_tlg, "API-Trace-POSTCALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_POST), 
		TraceLoggingString ("CreateFileW", "API"),
		TraceLoggingValue (ret_value, "Return value"),
		TraceLoggingUInt32 (status, "Last error status")
		);

	return ret_value;
}							// End my_CreateFileW


BOOL
my_DeleteFileW
	(
	 LPCWSTR  lpFileName
	)

{
NTSTATUS	status;
BOOL		ret_value;


	//
	// Write a pre-call entry to the log with all of the parameters
	//

	TraceLoggingWrite (TA_tlg, "API-Trace-PRECALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_PRE), 
		TraceLoggingString ("DeleteFileW", "API"),
		TraceLoggingWideString (lpFileName, "lpFileName")
		);

	//
	// Call the real API
	//

	ret_value = real_DeleteFileW (
				lpFileName);

	//
	// Write a post-call entry to the log with just the output parameters
	//

	status = GetLastError ();

	TraceLoggingWrite (TA_tlg, "API-Trace-POSTCALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_POST), 
		TraceLoggingString ("DeleteFileW", "API"),
		TraceLoggingValue (ret_value, "Return value"),
		TraceLoggingUInt32 (status, "Last error status")
		);

	return ret_value;
}							// End my_DeleteFileW


BOOL
my_FindClose
	(
	 HANDLE  hFindFile
	)

{
NTSTATUS	status;
BOOL		ret_value;


	//
	// Write a pre-call entry to the log with all of the parameters
	//

	TraceLoggingWrite (TA_tlg, "API-Trace-PRECALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_PRE), 
		TraceLoggingString ("FindClose", "API"),
		TraceLoggingValue (hFindFile, "hFindFile")
		);

	//
	// Call the real API
	//

	ret_value = real_FindClose (
				hFindFile);

	//
	// Write a post-call entry to the log with just the output parameters
	//

	status = GetLastError ();

	TraceLoggingWrite (TA_tlg, "API-Trace-POSTCALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_POST), 
		TraceLoggingString ("FindClose", "API"),
		TraceLoggingValue (ret_value, "Return value"),
		TraceLoggingUInt32 (status, "Last error status")
		);

	return ret_value;
}							// End my_FindClose


HANDLE
my_FindFirstFileW
	(
	 LPCWSTR  lpFileName,
	 LPWIN32_FIND_DATAW  lpFindFileData
	)

{
NTSTATUS	status;
HANDLE		ret_value;


	//
	// Write a pre-call entry to the log with all of the parameters
	//

	TraceLoggingWrite (TA_tlg, "API-Trace-PRECALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_PRE), 
		TraceLoggingString ("FindFirstFileW", "API"),
		TraceLoggingWideString (lpFileName, "lpFileName"),
		TraceLoggingPointer ((LPCVOID) lpFindFileData, "lpFindFileData")
		);

	//
	// Call the real API
	//

	ret_value = real_FindFirstFileW (
				lpFileName,
				lpFindFileData);

	//
	// Write a post-call entry to the log with just the output parameters
	//

	status = GetLastError ();

	TraceLoggingWrite (TA_tlg, "API-Trace-POSTCALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_POST), 
		TraceLoggingString ("FindFirstFileW", "API"),
		TraceLoggingValue (ret_value, "Return value"),
		TraceLoggingUInt32 (status, "Last error status")
		);

	return ret_value;
}							// End my_FindFirstFileW


BOOL
my_GetFileAttributesExW
	(
	 LPCWSTR  lpFileName,
	 GET_FILEEX_INFO_LEVELS  fInfoLevelId,
	 LPVOID  lpFileInformation
	)

{
NTSTATUS	status;
BOOL		ret_value;


	//
	// Write a pre-call entry to the log with all of the parameters
	//

	TraceLoggingWrite (TA_tlg, "API-Trace-PRECALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_PRE), 
		TraceLoggingString ("GetFileAttributesExW", "API"),
		TraceLoggingWideString (lpFileName, "lpFileName"),
		TraceLoggingValue ((UINT32) fInfoLevelId, "fInfoLevelId"),
		TraceLoggingPointer ((LPCVOID) lpFileInformation, "lpFileInformation")
		);

	//
	// Call the real API
	//

	ret_value = real_GetFileAttributesExW (
				lpFileName,
				fInfoLevelId,
				lpFileInformation);

	//
	// Write a post-call entry to the log with just the output parameters
	//

	status = GetLastError ();

	TraceLoggingWrite (TA_tlg, "API-Trace-POSTCALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_POST), 
		TraceLoggingString ("GetFileAttributesExW", "API"),
		TraceLoggingValue (ret_value, "Return value"),
		TraceLoggingUInt32 (status, "Last error status")
		);

	return ret_value;
}							// End my_GetFileAttributesExW


DWORD
my_GetFileAttributesW
	(
	 LPCWSTR  lpFileName
	)

{
NTSTATUS	status;
DWORD		ret_value;


	//
	// Write a pre-call entry to the log with all of the parameters
	//

	TraceLoggingWrite (TA_tlg, "API-Trace-PRECALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_PRE), 
		TraceLoggingString ("GetFileAttributesW", "API"),
		TraceLoggingWideString (lpFileName, "lpFileName")
		);

	//
	// Call the real API
	//

	ret_value = real_GetFileAttributesW (
				lpFileName);

	//
	// Write a post-call entry to the log with just the output parameters
	//

	status = GetLastError ();

	TraceLoggingWrite (TA_tlg, "API-Trace-POSTCALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_POST), 
		TraceLoggingString ("GetFileAttributesW", "API"),
		TraceLoggingValue (ret_value, "Return value"),
		TraceLoggingUInt32 (status, "Last error status")
		);

	return ret_value;
}							// End my_GetFileAttributesW


BOOL
my_GetFileInformationByHandle
	(
	 HANDLE  hFile,
	 LPBY_HANDLE_FILE_INFORMATION  lpFileInformation
	)

{
NTSTATUS	status;
BOOL		ret_value;


	//
	// Write a pre-call entry to the log with all of the parameters
	//

	TraceLoggingWrite (TA_tlg, "API-Trace-PRECALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_PRE), 
		TraceLoggingString ("GetFileInformationByHandle", "API"),
		TraceLoggingValue (hFile, "hFile"),
		TraceLoggingPointer ((LPCVOID) lpFileInformation, "lpFileInformation")
		);

	//
	// Call the real API
	//

	ret_value = real_GetFileInformationByHandle (
				hFile,
				lpFileInformation);

	//
	// Write a post-call entry to the log with just the output parameters
	//

	status = GetLastError ();

	TraceLoggingWrite (TA_tlg, "API-Trace-POSTCALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_POST), 
		TraceLoggingString ("GetFileInformationByHandle", "API"),
		TraceLoggingValue (ret_value, "Return value"),
		TraceLoggingUInt32 (status, "Last error status")
		);

	return ret_value;
}							// End my_GetFileInformationByHandle


DWORD
my_GetFullPathNameW
	(
	 LPCWSTR  lpFileName,
	 DWORD  nBufferLength,
	 LPWSTR  lpBuffer,
	 LPWSTR*  lpFilePart
	)

{
NTSTATUS	status;
DWORD		ret_value;


	//
	// Write a pre-call entry to the log with all of the parameters
	//

	TraceLoggingWrite (TA_tlg, "API-Trace-PRECALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_PRE), 
		TraceLoggingString ("GetFullPathNameW", "API"),
		TraceLoggingWideString (lpFileName, "lpFileName"),
		TraceLoggingValue (nBufferLength, "nBufferLength"),
		TraceLoggingWideString (lpBuffer, "lpBuffer"),
		TraceLoggingPointer ((LPCVOID) lpFilePart, "lpFilePart")
		);

	//
	// Call the real API
	//

	ret_value = real_GetFullPathNameW (
				lpFileName,
				nBufferLength,
				lpBuffer,
				lpFilePart);

	//
	// Write a post-call entry to the log with just the output parameters
	//

	status = GetLastError ();

	TraceLoggingWrite (TA_tlg, "API-Trace-POSTCALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_POST), 
		TraceLoggingString ("GetFullPathNameW", "API"),
		TraceLoggingValue (ret_value, "Return value"),
		TraceLoggingUInt32 (status, "Last error status")
		);

	return ret_value;
}							// End my_GetFullPathNameW


BOOL
my_ReadFile
	(
	 HANDLE  hFile,
	 LPVOID  lpBuffer,
	 DWORD  nNumberOfBytesToRead,
	 LPDWORD  lpNumberOfBytesRead,
	 LPOVERLAPPED  lpOverlapped
	)

{
NTSTATUS	status;
BOOL		ret_value;


	//
	// Write a pre-call entry to the log with all of the parameters
	//

	TraceLoggingWrite (TA_tlg, "API-Trace-PRECALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_PRE), 
		TraceLoggingString ("ReadFile", "API"),
		TraceLoggingValue (hFile, "hFile"),
		TraceLoggingPointer ((LPCVOID) lpBuffer, "lpBuffer"),
		TraceLoggingValue (nNumberOfBytesToRead, "nNumberOfBytesToRead"),
		TraceLoggingPointer ((LPCVOID) lpNumberOfBytesRead, "lpNumberOfBytesRead"),
		TraceLoggingPointer ((LPCVOID) lpOverlapped, "lpOverlapped")
		);

	//
	// Call the real API
	//

	ret_value = real_ReadFile (
				hFile,
				lpBuffer,
				nNumberOfBytesToRead,
				lpNumberOfBytesRead,
				lpOverlapped);

	//
	// Write a post-call entry to the log with just the output parameters
	//

	status = GetLastError ();

	TraceLoggingWrite (TA_tlg, "API-Trace-POSTCALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_POST), 
		TraceLoggingString ("ReadFile", "API"),
		TraceLoggingValue (ret_value, "Return value"),
		TraceLoggingUInt32 (status, "Last error status")
		);

	return ret_value;
}							// End my_ReadFile


BOOL
my_SetEndOfFile
	(
	 HANDLE  hFile
	)

{
NTSTATUS	status;
BOOL		ret_value;


	//
	// Write a pre-call entry to the log with all of the parameters
	//

	TraceLoggingWrite (TA_tlg, "API-Trace-PRECALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_PRE), 
		TraceLoggingString ("SetEndOfFile", "API"),
		TraceLoggingValue (hFile, "hFile")
		);

	//
	// Call the real API
	//

	ret_value = real_SetEndOfFile (
				hFile);

	//
	// Write a post-call entry to the log with just the output parameters
	//

	status = GetLastError ();

	TraceLoggingWrite (TA_tlg, "API-Trace-POSTCALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_POST), 
		TraceLoggingString ("SetEndOfFile", "API"),
		TraceLoggingValue (ret_value, "Return value"),
		TraceLoggingUInt32 (status, "Last error status")
		);

	return ret_value;
}							// End my_SetEndOfFile


BOOL
my_WriteFile
	(
	 HANDLE  hFile,
	 LPCVOID  lpBuffer,
	 DWORD  nNumberOfBytesToWrite,
	 LPDWORD  lpNumberOfBytesWritten,
	 LPOVERLAPPED  lpOverlapped
	)

{
NTSTATUS	status;
BOOL		ret_value;


	//
	// Write a pre-call entry to the log with all of the parameters
	//

	TraceLoggingWrite (TA_tlg, "API-Trace-PRECALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_PRE), 
		TraceLoggingString ("WriteFile", "API"),
		TraceLoggingValue (hFile, "hFile"),
		TraceLoggingPointer ((LPCVOID) lpBuffer, "lpBuffer"),
		TraceLoggingValue (nNumberOfBytesToWrite, "nNumberOfBytesToWrite"),
		TraceLoggingPointer ((LPCVOID) lpNumberOfBytesWritten, "lpNumberOfBytesWritten"),
		TraceLoggingPointer ((LPCVOID) lpOverlapped, "lpOverlapped")
		);

	//
	// Call the real API
	//

	ret_value = real_WriteFile (
				hFile,
				lpBuffer,
				nNumberOfBytesToWrite,
				lpNumberOfBytesWritten,
				lpOverlapped);

	//
	// Write a post-call entry to the log with just the output parameters
	//

	status = GetLastError ();

	TraceLoggingWrite (TA_tlg, "API-Trace-POSTCALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_POST), 
		TraceLoggingString ("WriteFile", "API"),
		TraceLoggingValue (ret_value, "Return value"),
		TraceLoggingUInt32 (status, "Last error status")
		);

	return ret_value;
}							// End my_WriteFile