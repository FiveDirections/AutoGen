//
// FACILITY:	TraceAPI - Trace specific APIs when injected into a process
//
// DESCRIPTION:	This DLL is injected into a process by InjectDLL. Its purpose is to intercept specific APIs and log their parameters using ETW
//
// VERSION:		1.0
//
// AUTHOR:		Brian Catlin
//
// CREATED:		2019-11-15
//
// MODIFICATION HISTORY:
//
//	1.0		2019-11-15	Brian Catlin
//			Original version
//

#pragma warning (disable : 4100)						// Allow unreferenced formal parameter
#pragma warning (disable : 4115)						// Allow named type definition in parentheses
#pragma warning (disable : 4127)						// Allow constant conditional expression
#pragma warning (disable : 4200)						// Allow zero-sized array in struct/union
#pragma warning (disable : 4201)						// Allow nameless struct/union
#pragma warning (disable : 4214)						// Allow bit field types other than int
#pragma warning (disable : 4514)						// Allow unreferenced inline function

//
// INCLUDE FILES:
//

//
// System includes
//

#define WIN32_NO_STATUS
#include <Windows.h>
#undef WIN32_NO_STATUS
#include <ntstatus.h>
#include <TraceLoggingProvider.h>
#include <evntprov.h>
#include <psapi.h>

#include <string>
#include <vector>
#include <list>
#include <memory>
#include <iterator>

//
// Project includes
//

#include "detours.h"

#include "TraceAPI.h"
#include "..\Global\Utils.h"
#include "..\Global\FDI-Detours.h"
#include "..\Global\WPP_Tracing.h"
#include "Version.h"

#include "TraceAPI.tmh"								// Generated by TraceWPP

using namespace FDI;

//
// CONSTANTS:
//

//
// TYPES:
//

//
// MACROS:
//


#define ATTACH(x)       div_attach (&(PVOID&) real_##x, my_##x, #x)
#define DETACH(x)       div_detach (&(PVOID&) real_##x, my_##x, #x)

#define DECLARE_UNICODE_STRING(_var, _string) \
const WCHAR _var ## _buffer[] = _string; \
__pragma(warning(push)) \
__pragma(warning(disable:4221)) __pragma(warning(disable:4204)) \
UNICODE_STRING _var = { sizeof(_string) - sizeof(WCHAR), sizeof(_string), (PWCH) _var ## _buffer } \
__pragma(warning(pop))

//
// DEFINITIONS:
//

//
// DECLARATIONS:
//


TRACELOGGING_DECLARE_PROVIDER (TA_tlg);

//
// Pointers to the real APIs
//

extern "C"
{

BOOL 
(WINAPI * real_CreateProcessW)
	(
	LPCWSTR a0,
	LPWSTR a1,
	LPSECURITY_ATTRIBUTES a2,
	LPSECURITY_ATTRIBUTES a3,
	BOOL a4,
	DWORD a5,
	LPVOID a6,
	LPCWSTR a7,
	LPSTARTUPINFOW a8,
	LPPROCESS_INFORMATION a9
	) = CreateProcessW;

}	// extern "C"

//
// FORWARD ROUTINES:
//

NTSTATUS 
attach_divergences										// 
	(
	);

NTSTATUS
detach_divergences										// 
	(
	);


BOOL 
WINAPI 
my_CreateProcessW
	(
	LPCWSTR					lpApplicationName,
	LPWSTR					lpCommandLine,
	LPSECURITY_ATTRIBUTES	lpProcessAttributes,
	LPSECURITY_ATTRIBUTES	lpThreadAttributes,
	BOOL					bInheritHandles,
	DWORD					dwCreationFlags,
	LPVOID					lpEnvironment,
	LPCWSTR					lpCurrentDirectory,
	LPSTARTUPINFOW			lpStartupInfo,
	LPPROCESS_INFORMATION	lpProcessInformation
	);



NTSTATUS 
attach_divergences										// 
	(
	)

//
// DESCRIPTION:		
//
// ASSUMPTIONS:		User mode
//
// SIDE EFFECTS:
//
// RETURN VALUES:
//
//

{
NTSTATUS	status;


	TRACE_ENTER ();

	//
	// Tell Detours that we're starting a transaction to update the list of Divergences
	//

	DetourTransactionBegin ();
	DetourUpdateThread (GetCurrentThread ());

	//
	// List all the Divergences to install
	//
	// NOTE: This list MUST match the list in detach_divergences
	//

	ATTACH (CreateProcessW);

	//
	// Tell Detours that we're done updating Divergences
	//

	status = DetourTransactionCommit ();

	TRACE_EXIT ();
	return status;
}							// End attach_divergences


NTSTATUS
detach_divergences										// 
	(
	)

//
// DESCRIPTION:		
//
// ASSUMPTIONS:		User mode
//
// SIDE EFFECTS:
//
// RETURN VALUES:
//
//

{
NTSTATUS	status;


	TRACE_ENTER ();

	//
	// Tell Detours that we're starting a transaction to update the list of Divergences
	//

	DetourTransactionBegin ();
	DetourUpdateThread (GetCurrentThread ());

	//
	// List all the Divergences to remove
	//
	// NOTE: This list MUST match the list in attach_divergences
	//

	DETACH (CreateProcessW);

	//
	// Tell Detours that we're done updating Divergences
	//

	status = DetourTransactionCommit ();

	TRACE_EXIT ();
	return status;
}							// End detach_divergences


BOOL 
WINAPI 
my_CreateProcessW
	(
	LPCWSTR					lpApplicationName,
	LPWSTR					lpCommandLine,
	LPSECURITY_ATTRIBUTES	lpProcessAttributes,
	LPSECURITY_ATTRIBUTES	lpThreadAttributes,
	BOOL					bInheritHandles,
	DWORD					dwCreationFlags,
	LPVOID					lpEnvironment,
	LPCWSTR					lpCurrentDirectory,
	LPSTARTUPINFOW			lpStartupInfo,
	LPPROCESS_INFORMATION	lpProcessInformation
	)

//
// DESCRIPTION:		
//
// ASSUMPTIONS:		User mode
//
// SIDE EFFECTS:
//
// RETURN VALUES:
//
//

{
	TRACE_ENTER ();

NTSTATUS	status;
BOOL		ret_val;


	//
	// Write a pre-call entry to the log
	//

	TraceLoggingWrite (TA_tlg, "DLL-Trace-PRECALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_PRE), 
		TraceLoggingString ("CreateProcessW", "Calling API"),
		TraceLoggingWideString (lpApplicationName, "lpApplicationName"),
		TraceLoggingWideString (lpCommandLine, "lpCommandLine"),
		TraceLoggingWideString (lpCurrentDirectory, "lpCurrentDirectory")
		);

	//
	// Call the real API
	//

	ret_val = real_CreateProcessW 
			(
			lpApplicationName,
			lpCommandLine,
			lpProcessAttributes,
			lpThreadAttributes,
			bInheritHandles,
			dwCreationFlags,
			lpEnvironment,
			lpCurrentDirectory,
			lpStartupInfo,
			lpProcessInformation
			);

	//
	// Write a post-call entry to the log
	//

	status = GetLastError ();

	TraceLoggingWrite (TA_tlg, "DLL-Trace-POSTCALL", TraceLoggingOpcode (TL_OPC_TRACE), TraceLoggingLevel (TRACE_LEVEL_INFORMATION),
		TraceLoggingKeyword (TL_KW_TRACE_POST), 
		TraceLoggingString ("CreateProcessW", "Calling API"),
		TraceLoggingUInt32 (ret_val, "Return value"),
		TraceLoggingUInt32 (status, "Last error status")
		);

	TRACE_EXIT ();
	return ret_val;
}							// End my_CreateProcessW


