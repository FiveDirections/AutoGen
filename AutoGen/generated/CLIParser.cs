//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Data\Projects\FiveDir\APITracing\AutoGen\CLI.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CLIParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		ALL=10, DATABASE=11, EXCLUDE_DLLS=12, EXPORTS=13, GENERATE=14, NOGENERATE=15, 
		HELP=16, IMPORTS=17, INCLUDE_DLLS=18, OUTPUT=19, RECURSE=20, VERBOSE=21, 
		WEBSCRAPE=22, NOWEBSCRAPE=23, FILE_NAME=24, COMMENT=25, WS=26;
	public const int
		RULE_start = 0, RULE_script = 1, RULE_input_files = 2, RULE_qualifier = 3, 
		RULE_all_qual = 4, RULE_database_qual = 5, RULE_exclude_dlls_qual = 6, 
		RULE_exports_qual = 7, RULE_generate_qual = 8, RULE_help_qual = 9, RULE_imports_qual = 10, 
		RULE_include_dlls_qual = 11, RULE_output_qual = 12, RULE_recurse_qual = 13, 
		RULE_verbose_qual = 14, RULE_webscrape_qual = 15, RULE_file = 16, RULE_file_list = 17, 
		RULE_qual_char = 18, RULE_assignment_char = 19;
	public static readonly string[] ruleNames = {
		"start", "script", "input_files", "qualifier", "all_qual", "database_qual", 
		"exclude_dlls_qual", "exports_qual", "generate_qual", "help_qual", "imports_qual", 
		"include_dlls_qual", "output_qual", "recurse_qual", "verbose_qual", "webscrape_qual", 
		"file", "file_list", "qual_char", "assignment_char"
	};

	private static readonly string[] _LiteralNames = {
		null, "'@'", "'('", "')'", "'?'", "','", "'/'", "'-'", "'='", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "ALL", "DATABASE", 
		"EXCLUDE_DLLS", "EXPORTS", "GENERATE", "NOGENERATE", "HELP", "IMPORTS", 
		"INCLUDE_DLLS", "OUTPUT", "RECURSE", "VERBOSE", "WEBSCRAPE", "NOWEBSCRAPE", 
		"FILE_NAME", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CLI.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CLIParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CLIParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CLIParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public Input_filesContext[] input_files() {
			return GetRuleContexts<Input_filesContext>();
		}
		public Input_filesContext input_files(int i) {
			return GetRuleContext<Input_filesContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			int _alt;
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; script();
				}
				break;
			case Eof:
			case T__5:
			case T__6:
			case FILE_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 44;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 41; qualifier();
						}
						} 
					}
					State = 46;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FILE_NAME) {
					{
					{
					State = 47; input_files();
					}
					}
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5 || _la==T__6) {
					{
					{
					State = 53; qualifier();
					}
					}
					State = 58;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		public ITerminalNode FILE_NAME() { return GetToken(CLIParser.FILE_NAME, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 2, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(T__0);
			State = 62; Match(FILE_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_filesContext : ParserRuleContext {
		public ITerminalNode[] FILE_NAME() { return GetTokens(CLIParser.FILE_NAME); }
		public ITerminalNode FILE_NAME(int i) {
			return GetToken(CLIParser.FILE_NAME, i);
		}
		public Input_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterInput_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitInput_files(this);
		}
	}

	[RuleVersion(0)]
	public Input_filesContext input_files() {
		Input_filesContext _localctx = new Input_filesContext(Context, State);
		EnterRule(_localctx, 4, RULE_input_files);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 64; Match(FILE_NAME);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 67;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		public All_qualContext all_qual() {
			return GetRuleContext<All_qualContext>(0);
		}
		public Database_qualContext database_qual() {
			return GetRuleContext<Database_qualContext>(0);
		}
		public Exclude_dlls_qualContext exclude_dlls_qual() {
			return GetRuleContext<Exclude_dlls_qualContext>(0);
		}
		public Exports_qualContext exports_qual() {
			return GetRuleContext<Exports_qualContext>(0);
		}
		public Help_qualContext help_qual() {
			return GetRuleContext<Help_qualContext>(0);
		}
		public Generate_qualContext generate_qual() {
			return GetRuleContext<Generate_qualContext>(0);
		}
		public Imports_qualContext imports_qual() {
			return GetRuleContext<Imports_qualContext>(0);
		}
		public Include_dlls_qualContext include_dlls_qual() {
			return GetRuleContext<Include_dlls_qualContext>(0);
		}
		public Output_qualContext output_qual() {
			return GetRuleContext<Output_qualContext>(0);
		}
		public Recurse_qualContext recurse_qual() {
			return GetRuleContext<Recurse_qualContext>(0);
		}
		public Verbose_qualContext verbose_qual() {
			return GetRuleContext<Verbose_qualContext>(0);
		}
		public Webscrape_qualContext webscrape_qual() {
			return GetRuleContext<Webscrape_qualContext>(0);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterQualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitQualifier(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		QualifierContext _localctx = new QualifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifier);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; all_qual();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; database_qual();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71; exclude_dlls_qual();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 72; exports_qual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 73; help_qual();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 74; generate_qual();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 75; imports_qual();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 76; include_dlls_qual();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 77; output_qual();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 78; recurse_qual();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 79; verbose_qual();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 80; webscrape_qual();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_qualContext : ParserRuleContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(CLIParser.ALL, 0); }
		public All_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_qual; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterAll_qual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitAll_qual(this);
		}
	}

	[RuleVersion(0)]
	public All_qualContext all_qual() {
		All_qualContext _localctx = new All_qualContext(Context, State);
		EnterRule(_localctx, 8, RULE_all_qual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; qual_char();
			State = 84; Match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_qualContext : ParserRuleContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode DATABASE() { return GetToken(CLIParser.DATABASE, 0); }
		public Assignment_charContext assignment_char() {
			return GetRuleContext<Assignment_charContext>(0);
		}
		public FileContext file() {
			return GetRuleContext<FileContext>(0);
		}
		public Database_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_qual; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterDatabase_qual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitDatabase_qual(this);
		}
	}

	[RuleVersion(0)]
	public Database_qualContext database_qual() {
		Database_qualContext _localctx = new Database_qualContext(Context, State);
		EnterRule(_localctx, 10, RULE_database_qual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; qual_char();
			State = 87; Match(DATABASE);
			State = 88; assignment_char();
			State = 89; file();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclude_dlls_qualContext : ParserRuleContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode EXCLUDE_DLLS() { return GetToken(CLIParser.EXCLUDE_DLLS, 0); }
		public Assignment_charContext assignment_char() {
			return GetRuleContext<Assignment_charContext>(0);
		}
		public FileContext file() {
			return GetRuleContext<FileContext>(0);
		}
		public File_listContext file_list() {
			return GetRuleContext<File_listContext>(0);
		}
		public Exclude_dlls_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclude_dlls_qual; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterExclude_dlls_qual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitExclude_dlls_qual(this);
		}
	}

	[RuleVersion(0)]
	public Exclude_dlls_qualContext exclude_dlls_qual() {
		Exclude_dlls_qualContext _localctx = new Exclude_dlls_qualContext(Context, State);
		EnterRule(_localctx, 12, RULE_exclude_dlls_qual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; qual_char();
			State = 92; Match(EXCLUDE_DLLS);
			State = 93; assignment_char();
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILE_NAME:
				{
				State = 94; file();
				}
				break;
			case T__1:
				{
				State = 95; Match(T__1);
				State = 96; file_list();
				State = 97; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exports_qualContext : ParserRuleContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode EXPORTS() { return GetToken(CLIParser.EXPORTS, 0); }
		public Exports_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exports_qual; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterExports_qual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitExports_qual(this);
		}
	}

	[RuleVersion(0)]
	public Exports_qualContext exports_qual() {
		Exports_qualContext _localctx = new Exports_qualContext(Context, State);
		EnterRule(_localctx, 14, RULE_exports_qual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; qual_char();
			State = 102; Match(EXPORTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generate_qualContext : ParserRuleContext {
		public Generate_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generate_qual; } }
	 
		public Generate_qualContext() { }
		public virtual void CopyFrom(Generate_qualContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class No_generateContext : Generate_qualContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode NOGENERATE() { return GetToken(CLIParser.NOGENERATE, 0); }
		public No_generateContext(Generate_qualContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterNo_generate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitNo_generate(this);
		}
	}
	public partial class GenerateContext : Generate_qualContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode GENERATE() { return GetToken(CLIParser.GENERATE, 0); }
		public GenerateContext(Generate_qualContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterGenerate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitGenerate(this);
		}
	}

	[RuleVersion(0)]
	public Generate_qualContext generate_qual() {
		Generate_qualContext _localctx = new Generate_qualContext(Context, State);
		EnterRule(_localctx, 16, RULE_generate_qual);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new GenerateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; qual_char();
				State = 105; Match(GENERATE);
				}
				break;
			case 2:
				_localctx = new No_generateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 107; qual_char();
				State = 108; Match(NOGENERATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Help_qualContext : ParserRuleContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode HELP() { return GetToken(CLIParser.HELP, 0); }
		public Help_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_help_qual; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterHelp_qual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitHelp_qual(this);
		}
	}

	[RuleVersion(0)]
	public Help_qualContext help_qual() {
		Help_qualContext _localctx = new Help_qualContext(Context, State);
		EnterRule(_localctx, 18, RULE_help_qual);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; qual_char();
				State = 113; Match(HELP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; qual_char();
				State = 116; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Imports_qualContext : ParserRuleContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode IMPORTS() { return GetToken(CLIParser.IMPORTS, 0); }
		public Imports_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imports_qual; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterImports_qual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitImports_qual(this);
		}
	}

	[RuleVersion(0)]
	public Imports_qualContext imports_qual() {
		Imports_qualContext _localctx = new Imports_qualContext(Context, State);
		EnterRule(_localctx, 20, RULE_imports_qual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; qual_char();
			State = 121; Match(IMPORTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Include_dlls_qualContext : ParserRuleContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode INCLUDE_DLLS() { return GetToken(CLIParser.INCLUDE_DLLS, 0); }
		public Assignment_charContext assignment_char() {
			return GetRuleContext<Assignment_charContext>(0);
		}
		public FileContext file() {
			return GetRuleContext<FileContext>(0);
		}
		public File_listContext file_list() {
			return GetRuleContext<File_listContext>(0);
		}
		public Include_dlls_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include_dlls_qual; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterInclude_dlls_qual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitInclude_dlls_qual(this);
		}
	}

	[RuleVersion(0)]
	public Include_dlls_qualContext include_dlls_qual() {
		Include_dlls_qualContext _localctx = new Include_dlls_qualContext(Context, State);
		EnterRule(_localctx, 22, RULE_include_dlls_qual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; qual_char();
			State = 124; Match(INCLUDE_DLLS);
			State = 125; assignment_char();
			State = 131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILE_NAME:
				{
				State = 126; file();
				}
				break;
			case T__1:
				{
				State = 127; Match(T__1);
				State = 128; file_list();
				State = 129; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_qualContext : ParserRuleContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode OUTPUT() { return GetToken(CLIParser.OUTPUT, 0); }
		public Assignment_charContext assignment_char() {
			return GetRuleContext<Assignment_charContext>(0);
		}
		public FileContext file() {
			return GetRuleContext<FileContext>(0);
		}
		public Output_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_qual; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterOutput_qual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitOutput_qual(this);
		}
	}

	[RuleVersion(0)]
	public Output_qualContext output_qual() {
		Output_qualContext _localctx = new Output_qualContext(Context, State);
		EnterRule(_localctx, 24, RULE_output_qual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; qual_char();
			State = 134; Match(OUTPUT);
			State = 135; assignment_char();
			State = 136; file();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recurse_qualContext : ParserRuleContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode RECURSE() { return GetToken(CLIParser.RECURSE, 0); }
		public Recurse_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recurse_qual; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterRecurse_qual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitRecurse_qual(this);
		}
	}

	[RuleVersion(0)]
	public Recurse_qualContext recurse_qual() {
		Recurse_qualContext _localctx = new Recurse_qualContext(Context, State);
		EnterRule(_localctx, 26, RULE_recurse_qual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; qual_char();
			State = 139; Match(RECURSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Verbose_qualContext : ParserRuleContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode VERBOSE() { return GetToken(CLIParser.VERBOSE, 0); }
		public Verbose_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbose_qual; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterVerbose_qual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitVerbose_qual(this);
		}
	}

	[RuleVersion(0)]
	public Verbose_qualContext verbose_qual() {
		Verbose_qualContext _localctx = new Verbose_qualContext(Context, State);
		EnterRule(_localctx, 28, RULE_verbose_qual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; qual_char();
			State = 142; Match(VERBOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Webscrape_qualContext : ParserRuleContext {
		public Webscrape_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_webscrape_qual; } }
	 
		public Webscrape_qualContext() { }
		public virtual void CopyFrom(Webscrape_qualContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class No_webscrapeContext : Webscrape_qualContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode NOWEBSCRAPE() { return GetToken(CLIParser.NOWEBSCRAPE, 0); }
		public No_webscrapeContext(Webscrape_qualContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterNo_webscrape(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitNo_webscrape(this);
		}
	}
	public partial class WebscrapeContext : Webscrape_qualContext {
		public Qual_charContext qual_char() {
			return GetRuleContext<Qual_charContext>(0);
		}
		public ITerminalNode WEBSCRAPE() { return GetToken(CLIParser.WEBSCRAPE, 0); }
		public WebscrapeContext(Webscrape_qualContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterWebscrape(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitWebscrape(this);
		}
	}

	[RuleVersion(0)]
	public Webscrape_qualContext webscrape_qual() {
		Webscrape_qualContext _localctx = new Webscrape_qualContext(Context, State);
		EnterRule(_localctx, 30, RULE_webscrape_qual);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new WebscrapeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 144; qual_char();
				State = 145; Match(WEBSCRAPE);
				}
				break;
			case 2:
				_localctx = new No_webscrapeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; qual_char();
				State = 148; Match(NOWEBSCRAPE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		public ITerminalNode FILE_NAME() { return GetToken(CLIParser.FILE_NAME, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 32, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(FILE_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_listContext : ParserRuleContext {
		public ITerminalNode[] FILE_NAME() { return GetTokens(CLIParser.FILE_NAME); }
		public ITerminalNode FILE_NAME(int i) {
			return GetToken(CLIParser.FILE_NAME, i);
		}
		public File_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterFile_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitFile_list(this);
		}
	}

	[RuleVersion(0)]
	public File_listContext file_list() {
		File_listContext _localctx = new File_listContext(Context, State);
		EnterRule(_localctx, 34, RULE_file_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(FILE_NAME);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 155; Match(T__4);
				State = 156; Match(FILE_NAME);
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qual_charContext : ParserRuleContext {
		public Qual_charContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual_char; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterQual_char(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitQual_char(this);
		}
	}

	[RuleVersion(0)]
	public Qual_charContext qual_char() {
		Qual_charContext _localctx = new Qual_charContext(Context, State);
		EnterRule(_localctx, 36, RULE_qual_char);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__6) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_charContext : ParserRuleContext {
		public Assignment_charContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_char; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.EnterAssignment_char(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICLIListener typedListener = listener as ICLIListener;
			if (typedListener != null) typedListener.ExitAssignment_char(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_charContext assignment_char() {
		Assignment_charContext _localctx = new Assignment_charContext(Context, State);
		EnterRule(_localctx, 38, RULE_assignment_char);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', '\xA9', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '-', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x30', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x33', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x36', '\v', '\x2', '\x3', '\x2', '\a', '\x2', 
		'\x39', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '<', '\v', '\x2', '\x5', 
		'\x2', '>', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x6', '\x4', '\x44', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x45', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'T', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x66', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'q', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', 'y', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x86', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x99', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\xA0', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xA3', '\v', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x2', '\x2', '\x16', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '\x2', '\x4', '\x3', '\x2', '\b', '\t', '\x3', '\x2', '\n', 
		'\v', '\x2', '\xAA', '\x2', '=', '\x3', '\x2', '\x2', '\x2', '\x4', '?', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'S', '\x3', '\x2', '\x2', '\x2', '\n', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'X', '\x3', '\x2', '\x2', '\x2', '\xE', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'g', '\x3', '\x2', '\x2', '\x2', '\x12', 'p', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'x', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x18', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x87', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x8F', '\x3', '\x2', '\x2', '\x2', ' ', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x9C', '\x3', '\x2', '\x2', '\x2', '&', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xA6', '\x3', '\x2', '\x2', '\x2', '*', '>', '\x5', '\x4', 
		'\x3', '\x2', '+', '-', '\x5', '\b', '\x5', '\x2', ',', '+', '\x3', '\x2', 
		'\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x33', '\x5', '\x6', '\x4', '\x2', '\x32', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', 
		':', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x39', '\x5', '\b', '\x5', '\x2', '\x38', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '<', '\x3', '\x2', '\x2', '\x2', ':', '\x38', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', 
		'>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', 
		'=', '*', '\x3', '\x2', '\x2', '\x2', '=', '.', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x3', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\x3', '\x2', 
		'\x2', '@', '\x41', '\a', '\x1A', '\x2', '\x2', '\x41', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x44', '\a', '\x1A', '\x2', '\x2', '\x43', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\a', '\x3', '\x2', '\x2', '\x2', 'G', 'T', 
		'\x5', '\n', '\x6', '\x2', 'H', 'T', '\x5', '\f', '\a', '\x2', 'I', 'T', 
		'\x5', '\xE', '\b', '\x2', 'J', 'T', '\x5', '\x10', '\t', '\x2', 'K', 
		'T', '\x5', '\x14', '\v', '\x2', 'L', 'T', '\x5', '\x12', '\n', '\x2', 
		'M', 'T', '\x5', '\x16', '\f', '\x2', 'N', 'T', '\x5', '\x18', '\r', '\x2', 
		'O', 'T', '\x5', '\x1A', '\xE', '\x2', 'P', 'T', '\x5', '\x1C', '\xF', 
		'\x2', 'Q', 'T', '\x5', '\x1E', '\x10', '\x2', 'R', 'T', '\x5', ' ', '\x11', 
		'\x2', 'S', 'G', '\x3', '\x2', '\x2', '\x2', 'S', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'I', '\x3', '\x2', '\x2', '\x2', 'S', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'K', '\x3', '\x2', '\x2', '\x2', 'S', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'M', '\x3', '\x2', '\x2', '\x2', 'S', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'O', '\x3', '\x2', '\x2', '\x2', 'S', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'T', '\t', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x5', '&', '\x14', 
		'\x2', 'V', 'W', '\a', '\f', '\x2', '\x2', 'W', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\x5', '&', '\x14', '\x2', 'Y', 'Z', '\a', '\r', '\x2', 
		'\x2', 'Z', '[', '\x5', '(', '\x15', '\x2', '[', '\\', '\x5', '\"', '\x12', 
		'\x2', '\\', '\r', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x5', '&', '\x14', 
		'\x2', '^', '_', '\a', '\xE', '\x2', '\x2', '_', '\x65', '\x5', '(', '\x15', 
		'\x2', '`', '\x66', '\x5', '\"', '\x12', '\x2', '\x61', '\x62', '\a', 
		'\x4', '\x2', '\x2', '\x62', '\x63', '\x5', '$', '\x13', '\x2', '\x63', 
		'\x64', '\a', '\x5', '\x2', '\x2', '\x64', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '`', '\x3', '\x2', '\x2', '\x2', '\x65', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x66', '\xF', '\x3', '\x2', '\x2', '\x2', 'g', 'h', 
		'\x5', '&', '\x14', '\x2', 'h', 'i', '\a', '\xF', '\x2', '\x2', 'i', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x5', '&', '\x14', '\x2', 'k', 
		'l', '\a', '\x10', '\x2', '\x2', 'l', 'q', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x5', '&', '\x14', '\x2', 'n', 'o', '\a', '\x11', '\x2', '\x2', 
		'o', 'q', '\x3', '\x2', '\x2', '\x2', 'p', 'j', '\x3', '\x2', '\x2', '\x2', 
		'p', 'm', '\x3', '\x2', '\x2', '\x2', 'q', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\x5', '&', '\x14', '\x2', 's', 't', '\a', '\x12', '\x2', 
		'\x2', 't', 'y', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x5', '&', '\x14', 
		'\x2', 'v', 'w', '\a', '\x6', '\x2', '\x2', 'w', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'r', '\x3', '\x2', '\x2', '\x2', 'x', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'y', '\x15', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x5', '&', 
		'\x14', '\x2', '{', '|', '\a', '\x13', '\x2', '\x2', '|', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '}', '~', '\x5', '&', '\x14', '\x2', '~', '\x7F', 
		'\a', '\x14', '\x2', '\x2', '\x7F', '\x85', '\x5', '(', '\x15', '\x2', 
		'\x80', '\x86', '\x5', '\"', '\x12', '\x2', '\x81', '\x82', '\a', '\x4', 
		'\x2', '\x2', '\x82', '\x83', '\x5', '$', '\x13', '\x2', '\x83', '\x84', 
		'\a', '\x5', '\x2', '\x2', '\x84', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x80', '\x3', '\x2', '\x2', '\x2', '\x85', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x19', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', 
		'\x5', '&', '\x14', '\x2', '\x88', '\x89', '\a', '\x15', '\x2', '\x2', 
		'\x89', '\x8A', '\x5', '(', '\x15', '\x2', '\x8A', '\x8B', '\x5', '\"', 
		'\x12', '\x2', '\x8B', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', 
		'\x5', '&', '\x14', '\x2', '\x8D', '\x8E', '\a', '\x16', '\x2', '\x2', 
		'\x8E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x5', '&', 
		'\x14', '\x2', '\x90', '\x91', '\a', '\x17', '\x2', '\x2', '\x91', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x5', '&', '\x14', '\x2', 
		'\x93', '\x94', '\a', '\x18', '\x2', '\x2', '\x94', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x96', '\x5', '&', '\x14', '\x2', '\x96', '\x97', 
		'\a', '\x19', '\x2', '\x2', '\x97', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x92', '\x3', '\x2', '\x2', '\x2', '\x98', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '!', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', 
		'\a', '\x1A', '\x2', '\x2', '\x9B', '#', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\xA1', '\a', '\x1A', '\x2', '\x2', '\x9D', '\x9E', '\a', '\a', '\x2', 
		'\x2', '\x9E', '\xA0', '\a', '\x1A', '\x2', '\x2', '\x9F', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '%', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\t', '\x2', '\x2', '\x2', '\xA5', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\t', '\x3', '\x2', 
		'\x2', '\xA7', ')', '\x3', '\x2', '\x2', '\x2', '\xE', '.', '\x34', ':', 
		'=', '\x45', 'S', '\x65', 'p', 'x', '\x85', '\x98', '\xA1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
