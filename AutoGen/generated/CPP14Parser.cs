//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Data\Projects\FiveDir\APITracing\AutoGen\CPP14.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CPP14Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, T__112=113, 
		T__113=114, T__114=115, T__115=116, T__116=117, T__117=118, T__118=119, 
		T__119=120, T__120=121, T__121=122, T__122=123, T__123=124, T__124=125, 
		T__125=126, T__126=127, T__127=128, T__128=129, T__129=130, T__130=131, 
		T__131=132, T__132=133, T__133=134, T__134=135, T__135=136, T__136=137, 
		T__137=138, T__138=139, T__139=140, T__140=141, T__141=142, T__142=143, 
		T__143=144, T__144=145, T__145=146, T__146=147, T__147=148, T__148=149, 
		T__149=150, T__150=151, T__151=152, T__152=153, T__153=154, T__154=155, 
		T__155=156, T__156=157, T__157=158, T__158=159, T__159=160, T__160=161, 
		T__161=162, T__162=163, T__163=164, T__164=165, T__165=166, T__166=167, 
		T__167=168, T__168=169, T__169=170, T__170=171, T__171=172, T__172=173, 
		T__173=174, T__174=175, T__175=176, T__176=177, T__177=178, T__178=179, 
		T__179=180, T__180=181, T__181=182, T__182=183, T__183=184, T__184=185, 
		T__185=186, T__186=187, T__187=188, T__188=189, T__189=190, T__190=191, 
		T__191=192, T__192=193, T__193=194, T__194=195, T__195=196, T__196=197, 
		T__197=198, T__198=199, T__199=200, T__200=201, T__201=202, T__202=203, 
		T__203=204, T__204=205, T__205=206, T__206=207, T__207=208, T__208=209, 
		T__209=210, T__210=211, T__211=212, T__212=213, T__213=214, T__214=215, 
		T__215=216, T__216=217, T__217=218, T__218=219, T__219=220, T__220=221, 
		T__221=222, T__222=223, T__223=224, T__224=225, T__225=226, T__226=227, 
		T__227=228, T__228=229, T__229=230, T__230=231, T__231=232, T__232=233, 
		T__233=234, T__234=235, T__235=236, T__236=237, T__237=238, T__238=239, 
		T__239=240, T__240=241, T__241=242, T__242=243, T__243=244, T__244=245, 
		T__245=246, T__246=247, T__247=248, T__248=249, T__249=250, T__250=251, 
		T__251=252, T__252=253, T__253=254, T__254=255, T__255=256, T__256=257, 
		T__257=258, T__258=259, T__259=260, T__260=261, T__261=262, T__262=263, 
		T__263=264, T__264=265, T__265=266, T__266=267, T__267=268, T__268=269, 
		T__269=270, T__270=271, T__271=272, T__272=273, T__273=274, T__274=275, 
		MultiLineMacro=276, Directive=277, Alignas=278, Alignof=279, Asm=280, 
		Auto=281, Bool=282, Break=283, Case=284, Catch=285, Char=286, Char16=287, 
		Char32=288, Class=289, Const=290, Constexpr=291, Const_cast=292, Continue=293, 
		Decltype=294, Default=295, Delete=296, Do=297, Double=298, Dynamic_cast=299, 
		Else=300, Enum=301, Explicit=302, Export=303, Extern=304, False=305, Final=306, 
		Float=307, For=308, Friend=309, Goto=310, If=311, Inline=312, Int=313, 
		Long=314, Mutable=315, Namespace=316, New=317, Noexcept=318, Nullptr=319, 
		Operator=320, Override=321, Private=322, Protected=323, Public=324, Register=325, 
		Reinterpret_cast=326, Return=327, Short=328, Signed=329, Sizeof=330, Static=331, 
		Static_assert=332, Static_cast=333, Struct=334, Switch=335, Template=336, 
		This=337, Thread_local=338, Throw=339, True=340, Try=341, Typedef=342, 
		Typeid_=343, Typename_=344, Union=345, Unsigned=346, Using=347, Virtual=348, 
		Void=349, Volatile=350, Wchar=351, While=352, LeftParen=353, RightParen=354, 
		LeftBracket=355, RightBracket=356, LeftBrace=357, RightBrace=358, Plus=359, 
		Minus=360, Star=361, Div=362, Mod=363, Caret=364, And=365, Or=366, Tilde=367, 
		Not=368, Assign=369, Less=370, Greater=371, PlusAssign=372, MinusAssign=373, 
		StarAssign=374, DivAssign=375, ModAssign=376, XorAssign=377, AndAssign=378, 
		OrAssign=379, LeftShift=380, RightShift=381, LeftShiftAssign=382, RightShiftAssign=383, 
		Equal=384, NotEqual=385, LessEqual=386, GreaterEqual=387, AndAnd=388, 
		OrOr=389, PlusPlus=390, MinusMinus=391, Comma=392, ArrowStar=393, Arrow=394, 
		Question=395, Colon=396, Doublecolon=397, Semi=398, Dot=399, DotStar=400, 
		Ellipsis=401, SAL_NAME=402, Identifier=403, Integerliteral=404, Decimalliteral=405, 
		Octalliteral=406, Hexadecimalliteral=407, Binaryliteral=408, Integersuffix=409, 
		Characterliteral=410, Floatingliteral=411, Stringliteral=412, Userdefinedintegerliteral=413, 
		Userdefinedfloatingliteral=414, Userdefinedstringliteral=415, Userdefinedcharacterliteral=416, 
		Whitespace=417, Newline=418, BlockComment=419, LineComment=420;
	public const int
		RULE_translationunit = 0, RULE_primaryexpression = 1, RULE_idexpression = 2, 
		RULE_unqualifiedid = 3, RULE_qualifiedid = 4, RULE_nestednamespecifier = 5, 
		RULE_lambdaexpression = 6, RULE_lambdaintroducer = 7, RULE_lambdacapture = 8, 
		RULE_capturedefault = 9, RULE_capturelist = 10, RULE_capture = 11, RULE_simplecapture = 12, 
		RULE_initcapture = 13, RULE_lambdadeclarator = 14, RULE_postfixexpression = 15, 
		RULE_typeidofexpr = 16, RULE_typeidofthetypeid = 17, RULE_expressionlist = 18, 
		RULE_pseudodestructorname = 19, RULE_unaryexpression = 20, RULE_unaryoperator = 21, 
		RULE_newexpression = 22, RULE_newplacement = 23, RULE_newtypeid = 24, 
		RULE_newdeclarator = 25, RULE_noptrnewdeclarator = 26, RULE_newinitializer = 27, 
		RULE_deleteexpression = 28, RULE_noexceptexpression = 29, RULE_castexpression = 30, 
		RULE_pmexpression = 31, RULE_multiplicativeexpression = 32, RULE_additiveexpression = 33, 
		RULE_shiftexpression = 34, RULE_shiftoperator = 35, RULE_relationalexpression = 36, 
		RULE_equalityexpression = 37, RULE_andexpression = 38, RULE_exclusiveorexpression = 39, 
		RULE_inclusiveorexpression = 40, RULE_logicalandexpression = 41, RULE_logicalorexpression = 42, 
		RULE_conditionalexpression = 43, RULE_assignmentexpression = 44, RULE_assignmentoperator = 45, 
		RULE_expression = 46, RULE_constantexpression = 47, RULE_statement = 48, 
		RULE_labeledstatement = 49, RULE_expressionstatement = 50, RULE_compoundstatement = 51, 
		RULE_statementseq = 52, RULE_selectionstatement = 53, RULE_condition = 54, 
		RULE_iterationstatement = 55, RULE_forinitstatement = 56, RULE_forrangedeclaration = 57, 
		RULE_forrangeinitializer = 58, RULE_jumpstatement = 59, RULE_declarationstatement = 60, 
		RULE_declarationseq = 61, RULE_declaration = 62, RULE_blockdeclaration = 63, 
		RULE_aliasdeclaration = 64, RULE_simpledeclaration = 65, RULE_static_assertdeclaration = 66, 
		RULE_emptydeclaration = 67, RULE_attributedeclaration = 68, RULE_declspecifier = 69, 
		RULE_microsoft_linkage = 70, RULE_declspecifierseq = 71, RULE_storageclassspecifier = 72, 
		RULE_sal_statement = 73, RULE_sal_expr = 74, RULE_microsoft_storage = 75, 
		RULE_decl_spec = 76, RULE_functionspecifier = 77, RULE_typedefname = 78, 
		RULE_typespecifier = 79, RULE_microsoft_types = 80, RULE_trailingtypespecifier = 81, 
		RULE_typespecifierseq = 82, RULE_trailingtypespecifierseq = 83, RULE_simpletypespecifier = 84, 
		RULE_thetypename = 85, RULE_decltypespecifier = 86, RULE_elaboratedtypespecifier = 87, 
		RULE_enumname = 88, RULE_enumspecifier = 89, RULE_enumhead = 90, RULE_opaqueenumdeclaration = 91, 
		RULE_enumkey = 92, RULE_enumbase = 93, RULE_enumeratorlist = 94, RULE_enumeratordefinition = 95, 
		RULE_enumerator = 96, RULE_namespacename = 97, RULE_originalnamespacename = 98, 
		RULE_namespacedefinition = 99, RULE_namednamespacedefinition = 100, RULE_originalnamespacedefinition = 101, 
		RULE_extensionnamespacedefinition = 102, RULE_unnamednamespacedefinition = 103, 
		RULE_namespacebody = 104, RULE_namespacealias = 105, RULE_namespacealiasdefinition = 106, 
		RULE_qualifiednamespacespecifier = 107, RULE_usingdeclaration = 108, RULE_usingdirective = 109, 
		RULE_asmdefinition = 110, RULE_linkagespecification = 111, RULE_attributespecifierseq = 112, 
		RULE_attributespecifier = 113, RULE_alignmentspecifier = 114, RULE_attributelist = 115, 
		RULE_attribute = 116, RULE_attributetoken = 117, RULE_attributescopedtoken = 118, 
		RULE_attributenamespace = 119, RULE_attributeargumentclause = 120, RULE_balancedtokenseq = 121, 
		RULE_balancedtoken = 122, RULE_initdeclaratorlist = 123, RULE_initdeclarator = 124, 
		RULE_declarator = 125, RULE_ptrdeclarator = 126, RULE_noptrdeclarator = 127, 
		RULE_parametersandqualifiers = 128, RULE_trailingreturntype = 129, RULE_ptroperator = 130, 
		RULE_cvqualifierseq = 131, RULE_cvqualifier = 132, RULE_refqualifier = 133, 
		RULE_declaratorid = 134, RULE_thetypeid = 135, RULE_abstractdeclarator = 136, 
		RULE_ptrabstractdeclarator = 137, RULE_noptrabstractdeclarator = 138, 
		RULE_abstractpackdeclarator = 139, RULE_noptrabstractpackdeclarator = 140, 
		RULE_parameterdeclarationclause = 141, RULE_parameterdeclarationlist = 142, 
		RULE_parameterdeclaration = 143, RULE_functiondefinition = 144, RULE_functionbody = 145, 
		RULE_initializer = 146, RULE_braceorequalinitializer = 147, RULE_initializerclause = 148, 
		RULE_initializerlist = 149, RULE_bracedinitlist = 150, RULE_classname = 151, 
		RULE_classspecifier = 152, RULE_classhead = 153, RULE_classheadname = 154, 
		RULE_classvirtspecifier = 155, RULE_classkey = 156, RULE_memberspecification = 157, 
		RULE_memberdeclaration = 158, RULE_memberdeclaratorlist = 159, RULE_memberdeclarator = 160, 
		RULE_virtspecifierseq = 161, RULE_virtspecifier = 162, RULE_purespecifier = 163, 
		RULE_baseclause = 164, RULE_basespecifierlist = 165, RULE_basespecifier = 166, 
		RULE_classordecltype = 167, RULE_basetypespecifier = 168, RULE_accessspecifier = 169, 
		RULE_conversionfunctionid = 170, RULE_conversiontypeid = 171, RULE_conversiondeclarator = 172, 
		RULE_ctorinitializer = 173, RULE_meminitializerlist = 174, RULE_meminitializer = 175, 
		RULE_meminitializerid = 176, RULE_operatorfunctionid = 177, RULE_literaloperatorid = 178, 
		RULE_templatedeclaration = 179, RULE_templateparameterlist = 180, RULE_templateparameter = 181, 
		RULE_typeparameter = 182, RULE_simpletemplateid = 183, RULE_templateid = 184, 
		RULE_templatename = 185, RULE_templateargumentlist = 186, RULE_templateargument = 187, 
		RULE_typenamespecifier = 188, RULE_explicitinstantiation = 189, RULE_explicitspecialization = 190, 
		RULE_tryblock = 191, RULE_functiontryblock = 192, RULE_handlerseq = 193, 
		RULE_handler = 194, RULE_exceptiondeclaration = 195, RULE_throwexpression = 196, 
		RULE_exceptionspecification = 197, RULE_dynamicexceptionspecification = 198, 
		RULE_typeidlist = 199, RULE_noexceptspecification = 200, RULE_theoperator = 201, 
		RULE_literal = 202, RULE_booleanliteral = 203, RULE_pointerliteral = 204, 
		RULE_userdefinedliteral = 205;
	public static readonly string[] ruleNames = {
		"translationunit", "primaryexpression", "idexpression", "unqualifiedid", 
		"qualifiedid", "nestednamespecifier", "lambdaexpression", "lambdaintroducer", 
		"lambdacapture", "capturedefault", "capturelist", "capture", "simplecapture", 
		"initcapture", "lambdadeclarator", "postfixexpression", "typeidofexpr", 
		"typeidofthetypeid", "expressionlist", "pseudodestructorname", "unaryexpression", 
		"unaryoperator", "newexpression", "newplacement", "newtypeid", "newdeclarator", 
		"noptrnewdeclarator", "newinitializer", "deleteexpression", "noexceptexpression", 
		"castexpression", "pmexpression", "multiplicativeexpression", "additiveexpression", 
		"shiftexpression", "shiftoperator", "relationalexpression", "equalityexpression", 
		"andexpression", "exclusiveorexpression", "inclusiveorexpression", "logicalandexpression", 
		"logicalorexpression", "conditionalexpression", "assignmentexpression", 
		"assignmentoperator", "expression", "constantexpression", "statement", 
		"labeledstatement", "expressionstatement", "compoundstatement", "statementseq", 
		"selectionstatement", "condition", "iterationstatement", "forinitstatement", 
		"forrangedeclaration", "forrangeinitializer", "jumpstatement", "declarationstatement", 
		"declarationseq", "declaration", "blockdeclaration", "aliasdeclaration", 
		"simpledeclaration", "static_assertdeclaration", "emptydeclaration", "attributedeclaration", 
		"declspecifier", "microsoft_linkage", "declspecifierseq", "storageclassspecifier", 
		"sal_statement", "sal_expr", "microsoft_storage", "decl_spec", "functionspecifier", 
		"typedefname", "typespecifier", "microsoft_types", "trailingtypespecifier", 
		"typespecifierseq", "trailingtypespecifierseq", "simpletypespecifier", 
		"thetypename", "decltypespecifier", "elaboratedtypespecifier", "enumname", 
		"enumspecifier", "enumhead", "opaqueenumdeclaration", "enumkey", "enumbase", 
		"enumeratorlist", "enumeratordefinition", "enumerator", "namespacename", 
		"originalnamespacename", "namespacedefinition", "namednamespacedefinition", 
		"originalnamespacedefinition", "extensionnamespacedefinition", "unnamednamespacedefinition", 
		"namespacebody", "namespacealias", "namespacealiasdefinition", "qualifiednamespacespecifier", 
		"usingdeclaration", "usingdirective", "asmdefinition", "linkagespecification", 
		"attributespecifierseq", "attributespecifier", "alignmentspecifier", "attributelist", 
		"attribute", "attributetoken", "attributescopedtoken", "attributenamespace", 
		"attributeargumentclause", "balancedtokenseq", "balancedtoken", "initdeclaratorlist", 
		"initdeclarator", "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
		"trailingreturntype", "ptroperator", "cvqualifierseq", "cvqualifier", 
		"refqualifier", "declaratorid", "thetypeid", "abstractdeclarator", "ptrabstractdeclarator", 
		"noptrabstractdeclarator", "abstractpackdeclarator", "noptrabstractpackdeclarator", 
		"parameterdeclarationclause", "parameterdeclarationlist", "parameterdeclaration", 
		"functiondefinition", "functionbody", "initializer", "braceorequalinitializer", 
		"initializerclause", "initializerlist", "bracedinitlist", "classname", 
		"classspecifier", "classhead", "classheadname", "classvirtspecifier", 
		"classkey", "memberspecification", "memberdeclaration", "memberdeclaratorlist", 
		"memberdeclarator", "virtspecifierseq", "virtspecifier", "purespecifier", 
		"baseclause", "basespecifierlist", "basespecifier", "classordecltype", 
		"basetypespecifier", "accessspecifier", "conversionfunctionid", "conversiontypeid", 
		"conversiondeclarator", "ctorinitializer", "meminitializerlist", "meminitializer", 
		"meminitializerid", "operatorfunctionid", "literaloperatorid", "templatedeclaration", 
		"templateparameterlist", "templateparameter", "typeparameter", "simpletemplateid", 
		"templateid", "templatename", "templateargumentlist", "templateargument", 
		"typenamespecifier", "explicitinstantiation", "explicitspecialization", 
		"tryblock", "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
		"throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
		"typeidlist", "noexceptspecification", "theoperator", "literal", "booleanliteral", 
		"pointerliteral", "userdefinedliteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'not'", "'&&'", "'and'", "'||'", "'or'", "'__cdecl'", "'__stdcall'", 
		"'__in'", "'__in_opt'", "'__in_ecount_opt'", "'__out_validated'", "'__analysis_noreturn'", 
		"'__kernel_entry'", "'APIENTRY'", "'CALLBACK'", "'CMAPI'", "'CREDUIAPI'", 
		"'DECLSPEC_ALLOCATOR'", "'DSGETDCAPI'", "'ENGAPI'", "'ETW_APP_DECLSPEC_DEPRECATED'", 
		"'EVNTAPI'", "'FAR'", "'KSDDKAPI'", "'KSECDDDECLSPEC'", "'NET_API_FUNCTION'", 
		"'NTAPI'", "'NTDSAPI_POSTXP'", "'NT_RTL_COMPRESS_API'", "'NTSYSAPI'", 
		"'NTSYSCALLAPI'", "'PASCAL'", "'RPC_VAR_ENTRY'", "'SEC_ENTRY'", "'STDCALL'", 
		"'STDMETHODCALLTYPE'", "'USERENVAPI'", "'WINAPI'", "'WINBASE'", "'WINBASEAPI'", 
		"'WINPATHCCHAPI'", "'WINSETUPAPI'", "'WMIAPI'", "'WSAAPI'", "'WSPAPI'", 
		"'__declspec'", "'ATOM'", "'AtlThunkData_t'", "'BOOL'", "'BOOLAPI'", "'BOOLEAN'", 
		"'BSTR'", "'BYTE'", "'CHAR'", "'CLIENT_CALL_RETURN'", "'COLORREF'", "'CONFIGRET'", 
		"'COORD'", "'DEP_SYSTEM_POLICY_TYPE'", "'DEVICE_SCALE_FACTOR'", "'DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS'", 
		"'DIALOG_DPI_CHANGE_BEHAVIORS'", "'DLL_DIRECTORY_COOKIE'", "'DOUBLE'", 
		"'DPI_AWARENESS'", "'DPI_AWARENESS_CONTEXT'", "'DPI_HOSTING_BEHAVIOR'", 
		"'DWMAPI'", "'DWORD'", "'EXECUTION_STATE'", "'FD_GLYPHSET'", "'FILE'", 
		"'FOURCC'", "'GEOID'", "'HACCEL'", "'HANDLE'", "'HBITMAP'", "'HBRUSH'", 
		"'HCERTSTORE'", "'HCERT_SERVER_OCSP_RESPONSE'", "'HCOLORSPACE'", "'HCONV'", 
		"'HCONVLIST'", "'HCRYPTMSG'", "'HCRYPTOIDFUNCSET'", "'HCURSOR'", "'HDC'", 
		"'HDDEDATA'", "'HDESK'", "'HDEVNOTIFY'", "'HDPA'", "'HDRVR'", "'HDSA'", 
		"'HDWP'", "'HENHMETAFILE'", "'HFILE'", "'HFONT'", "'HGDIOBJ'", "'HGLOBAL'", 
		"'HHOOK'", "'HICON'", "'HIMAGELIST'", "'HIMC'", "'HINSTANCE'", "'HKL'", 
		"'HLOCAL'", "'HMENU'", "'HMETAFILE'", "'HMMIO'", "'HMODULE'", "'HMONITOR'", 
		"'HPALETTE'", "'HPEN'", "'HPOWERNOTIFY'", "'HPROPSHEETPAGE'", "'HRESULT'", 
		"'HRGN'", "'HRSRC'", "'HSEMAPHORE'", "'HSURF'", "'HSYNTHETICPOINTERDEVICE'", 
		"'HSZ'", "'HWCT'", "'HWINEVENTHOOK'", "'HWINSTA'", "'HWND'", "'IContextMenu'", 
		"'IFIMETRICS'", "'INT'", "'INT_PTR'", "'IStream'", "'LANGID'", "'LARGE_INTEGER'", 
		"'LCID'", "'LONG'", "'LONG64'", "'LONGLONG'", "'LONG_PTR'", "'LPARAM'", 
		"'LPBYTE'", "'LPCCH'", "'LPCH'", "'LPCSTR'", "'LPCUWCHAR'", "'LPCUWSTR'", 
		"'LPCWCH'", "'LPCWSTR'", "'LPMMIOPROC'", "'LPSTR'", "'LPUWSTR'", "'LPVOID'", 
		"'LPWCH'", "'LPWSTR'", "'LRESULT'", "'LWSTDAPI'", "'LWSTDAPIV'", "'MCIDEVICEID'", 
		"'MMRESULT'", "'NDR_SCONTEXT'", "'NET_API_STATUS'", "'NPSTR'", "'NTSTATUS'", 
		"'NWPSTR'", "'OLESTATUS'", "'PATHOBJ'", "'PCCERT_CHAIN_CONTEXT'", "'PCCERT_CONTEXT'", 
		"'PCCERT_SERVER_OCSP'", "'PCCH'", "'PCCTL_CONTEXT'", "'PCERT_EXTENSION'", 
		"'PCERT_RDN_ATTR'", "'PCH'", "'PCHAR'", "'PCNZCH'", "'PCNZWCH'", "'PCRYPT_ATTRIBUTE'", 
		"'PCSTR'", "'PCTL_ENTRY'", "'PCTSTR'", "'PCUNZWCH'", "'PCUWCHAR'", "'PCUWSTR'", 
		"'PCUZZWSTR'", "'PCWCH'", "'PCWCHAR'", "'PCZPCSTR'", "'PCZPCWSTR'", "'PCZPSTR'", 
		"'PCZPWSTR'", "'PCZZSTR'", "'PCZZWSTR'", "'PDH_FUNCTION'", "'PFD_GLYPHATTR'", 
		"'PIDLIST_ABSOLUTE'", "'PIDLIST_RELATIVE'", "'PITEMID_CHILD'", "'PNZCH'", 
		"'PNZWCH'", "'POWER_PLATFORM_ROLE'", "'PPERF_COUNTERSET_INSTANCE'", "'PRTL_SPLAY_LINKS'", 
		"'PRTL_UNLOAD_EVENT_TRACE'", "'PRUNTIME_FUNCTION'", "'PSID_IDENTIFIER_AUTHORITY'", 
		"'PSLIST_ENTRY'", "'PSSTDAPI'", "'PSTR'", "'PTP_CLEANUP_GROUP'", "'PTP_IO'", 
		"'PTP_POOL'", "'PTP_TIMER'", "'PTP_WAIT'", "'PTP_WORK'", "'PUIDLIST_RELATIVE'", 
		"'PUNZWCH'", "'PUWSTR'", "'PUZZWSTR'", "'PVOID'", "'PWCH'", "'PWCHAR'", 
		"'PWSTR'", "'PZPCSTR'", "'PZPCWSTR'", "'PZPSTR'", "'PZPWSTR'", "'PZZSTR'", 
		"'PZZWSTR'", "'RPC_STATUS'", "'SAFEARRAY'", "'SCRIPT_LOGATTR'", "'SC_HANDLE'", 
		"'SECURITY_STATUS'", "'SHORT'", "'SHSTDAPI'", "'SIZE'", "'SIZE_T'", "'SOCKET'", 
		"'SURFOBJ'", "'THEMEAPI'", "'TRACEHANDLE'", "'TRUSTEE_FORM'", "'TRUSTEE_TYPE'", 
		"'UCHAR'", "'UINT'", "'UINT_PTR'", "'ULONG'", "'ULONG64'", "'ULONGLONG'", 
		"'ULONG_PTR'", "'USHORT'", "'VOID'", "'WINOLECTLAPI'", "'WORD'", "'XFORMOBJ'", 
		"'YIELDPROC'", "'_Dcomplex'", "'clock_t'", "'div_t'", "'errno_t'", "'hostent'", 
		"'imaxdiv_t'", "'intmax_t'", "'protoent'", "'servent'", "'size_t'", "'terminate_function'", 
		"'time_t'", "'uintptr_t'", "'u_long'", "'u_short'", "'wctrans_t'", "'wctype_t'", 
		"'wint_t'", null, null, "'alignas'", "'alignof'", "'asm'", "'auto'", "'bool'", 
		"'break'", "'case'", "'catch'", "'char'", "'char16_t'", "'char32_t'", 
		"'class'", "'const'", "'constexpr'", "'const_cast'", "'continue'", "'decltype'", 
		"'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'", "'else'", 
		"'enum'", "'explicit'", "'export'", "'extern'", "'false'", "'final'", 
		"'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'", "'int'", 
		"'long'", "'mutable'", "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
		"'operator'", "'override'", "'private'", "'protected'", "'public'", "'register'", 
		"'reinterpret_cast'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", 
		"'static_assert'", "'static_cast'", "'struct'", "'switch'", "'template'", 
		"'this'", "'thread_local'", "'throw'", "'true'", "'try'", "'typedef'", 
		"'typeid'", "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'", 
		"'void'", "'volatile'", "'wchar_t'", "'while'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
		"'~'", null, "'='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'^='", "'&='", "'|='", "'<<'", "'>>'", "'<<='", "'>>='", "'=='", "'!='", 
		"'<='", "'>='", null, null, "'++'", "'--'", "','", "'->*'", "'->'", "'?'", 
		"':'", "'::'", "';'", "'.'", "'.*'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"MultiLineMacro", "Directive", "Alignas", "Alignof", "Asm", "Auto", "Bool", 
		"Break", "Case", "Catch", "Char", "Char16", "Char32", "Class", "Const", 
		"Constexpr", "Const_cast", "Continue", "Decltype", "Default", "Delete", 
		"Do", "Double", "Dynamic_cast", "Else", "Enum", "Explicit", "Export", 
		"Extern", "False", "Final", "Float", "For", "Friend", "Goto", "If", "Inline", 
		"Int", "Long", "Mutable", "Namespace", "New", "Noexcept", "Nullptr", "Operator", 
		"Override", "Private", "Protected", "Public", "Register", "Reinterpret_cast", 
		"Return", "Short", "Signed", "Sizeof", "Static", "Static_assert", "Static_cast", 
		"Struct", "Switch", "Template", "This", "Thread_local", "Throw", "True", 
		"Try", "Typedef", "Typeid_", "Typename_", "Union", "Unsigned", "Using", 
		"Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen", "RightParen", 
		"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Plus", "Minus", 
		"Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", "Not", "Assign", 
		"Less", "Greater", "PlusAssign", "MinusAssign", "StarAssign", "DivAssign", 
		"ModAssign", "XorAssign", "AndAssign", "OrAssign", "LeftShift", "RightShift", 
		"LeftShiftAssign", "RightShiftAssign", "Equal", "NotEqual", "LessEqual", 
		"GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar", 
		"Arrow", "Question", "Colon", "Doublecolon", "Semi", "Dot", "DotStar", 
		"Ellipsis", "SAL_NAME", "Identifier", "Integerliteral", "Decimalliteral", 
		"Octalliteral", "Hexadecimalliteral", "Binaryliteral", "Integersuffix", 
		"Characterliteral", "Floatingliteral", "Stringliteral", "Userdefinedintegerliteral", 
		"Userdefinedfloatingliteral", "Userdefinedstringliteral", "Userdefinedcharacterliteral", 
		"Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CPP14.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CPP14Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CPP14Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CPP14Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TranslationunitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CPP14Parser.Eof, 0); }
		public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public TranslationunitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationunit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTranslationunit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTranslationunit(this);
		}
	}

	[RuleVersion(0)]
	public TranslationunitContext translationunit() {
		TranslationunitContext _localctx = new TranslationunitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationunit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignas - 256)) | (1L << (Asm - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Class - 256)) | (1L << (Const - 256)) | (1L << (Constexpr - 256)) | (1L << (Decltype - 256)) | (1L << (Double - 256)) | (1L << (Enum - 256)) | (1L << (Explicit - 256)) | (1L << (Extern - 256)) | (1L << (Float - 256)) | (1L << (Friend - 256)) | (1L << (Inline - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (Mutable - 256)) | (1L << (Namespace - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Register - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Static - 320)) | (1L << (Static_assert - 320)) | (1L << (Struct - 320)) | (1L << (Template - 320)) | (1L << (Thread_local - 320)) | (1L << (Typedef - 320)) | (1L << (Typename_ - 320)) | (1L << (Union - 320)) | (1L << (Unsigned - 320)) | (1L << (Using - 320)) | (1L << (Virtual - 320)) | (1L << (Void - 320)) | (1L << (Volatile - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (Doublecolon - 397)) | (1L << (Semi - 397)) | (1L << (Ellipsis - 397)) | (1L << (SAL_NAME - 397)) | (1L << (Identifier - 397)))) != 0)) {
				{
				State = 412; declarationseq(0);
				}
			}

			State = 415; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryexpressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public LambdaexpressionContext lambdaexpression() {
			return GetRuleContext<LambdaexpressionContext>(0);
		}
		public PrimaryexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPrimaryexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPrimaryexpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryexpressionContext primaryexpression() {
		PrimaryexpressionContext _localctx = new PrimaryexpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_primaryexpression);
		try {
			State = 425;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case False:
			case Nullptr:
			case True:
			case Integerliteral:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 417; literal();
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 2);
				{
				State = 418; Match(This);
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 419; Match(LeftParen);
				State = 420; expression(0);
				State = 421; Match(RightParen);
				}
				break;
			case Decltype:
			case Operator:
			case Tilde:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 423; idexpression();
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 5);
				{
				State = 424; lambdaexpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdexpressionContext : ParserRuleContext {
		public UnqualifiedidContext unqualifiedid() {
			return GetRuleContext<UnqualifiedidContext>(0);
		}
		public QualifiedidContext qualifiedid() {
			return GetRuleContext<QualifiedidContext>(0);
		}
		public IdexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterIdexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitIdexpression(this);
		}
	}

	[RuleVersion(0)]
	public IdexpressionContext idexpression() {
		IdexpressionContext _localctx = new IdexpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_idexpression);
		try {
			State = 429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427; unqualifiedid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 428; qualifiedid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnqualifiedidContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public OperatorfunctionidContext operatorfunctionid() {
			return GetRuleContext<OperatorfunctionidContext>(0);
		}
		public ConversionfunctionidContext conversionfunctionid() {
			return GetRuleContext<ConversionfunctionidContext>(0);
		}
		public LiteraloperatoridContext literaloperatorid() {
			return GetRuleContext<LiteraloperatoridContext>(0);
		}
		public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public TemplateidContext templateid() {
			return GetRuleContext<TemplateidContext>(0);
		}
		public UnqualifiedidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualifiedid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnqualifiedid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnqualifiedid(this);
		}
	}

	[RuleVersion(0)]
	public UnqualifiedidContext unqualifiedid() {
		UnqualifiedidContext _localctx = new UnqualifiedidContext(Context, State);
		EnterRule(_localctx, 6, RULE_unqualifiedid);
		try {
			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 431; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 432; operatorfunctionid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 433; conversionfunctionid();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 434; literaloperatorid();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 435; Match(Tilde);
				State = 436; classname();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 437; Match(Tilde);
				State = 438; decltypespecifier();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 439; templateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedidContext : ParserRuleContext {
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public UnqualifiedidContext unqualifiedid() {
			return GetRuleContext<UnqualifiedidContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public QualifiedidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterQualifiedid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitQualifiedid(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedidContext qualifiedid() {
		QualifiedidContext _localctx = new QualifiedidContext(Context, State);
		EnterRule(_localctx, 8, RULE_qualifiedid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; nestednamespecifier(0);
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 443; Match(Template);
				}
			}

			State = 446; unqualifiedid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestednamespecifierContext : ParserRuleContext {
		public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		public ThetypenameContext thetypename() {
			return GetRuleContext<ThetypenameContext>(0);
		}
		public NamespacenameContext namespacename() {
			return GetRuleContext<NamespacenameContext>(0);
		}
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public NestednamespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestednamespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNestednamespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNestednamespecifier(this);
		}
	}

	[RuleVersion(0)]
	public NestednamespecifierContext nestednamespecifier() {
		return nestednamespecifier(0);
	}

	private NestednamespecifierContext nestednamespecifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NestednamespecifierContext _localctx = new NestednamespecifierContext(Context, _parentState);
		NestednamespecifierContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_nestednamespecifier, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 449; Match(Doublecolon);
				}
				break;
			case 2:
				{
				State = 450; thetypename();
				State = 451; Match(Doublecolon);
				}
				break;
			case 3:
				{
				State = 453; namespacename();
				State = 454; Match(Doublecolon);
				}
				break;
			case 4:
				{
				State = 456; decltypespecifier();
				State = 457; Match(Doublecolon);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 473;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 471;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new NestednamespecifierContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_nestednamespecifier);
						State = 461;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 462; Match(Identifier);
						State = 463; Match(Doublecolon);
						}
						break;
					case 2:
						{
						_localctx = new NestednamespecifierContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_nestednamespecifier);
						State = 464;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 466;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 465; Match(Template);
							}
						}

						State = 468; simpletemplateid();
						State = 469; Match(Doublecolon);
						}
						break;
					}
					} 
				}
				State = 475;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LambdaexpressionContext : ParserRuleContext {
		public LambdaintroducerContext lambdaintroducer() {
			return GetRuleContext<LambdaintroducerContext>(0);
		}
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public LambdadeclaratorContext lambdadeclarator() {
			return GetRuleContext<LambdadeclaratorContext>(0);
		}
		public LambdaexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdaexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdaexpression(this);
		}
	}

	[RuleVersion(0)]
	public LambdaexpressionContext lambdaexpression() {
		LambdaexpressionContext _localctx = new LambdaexpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_lambdaexpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476; lambdaintroducer();
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 477; lambdadeclarator();
				}
			}

			State = 480; compoundstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaintroducerContext : ParserRuleContext {
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public LambdacaptureContext lambdacapture() {
			return GetRuleContext<LambdacaptureContext>(0);
		}
		public LambdaintroducerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaintroducer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdaintroducer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdaintroducer(this);
		}
	}

	[RuleVersion(0)]
	public LambdaintroducerContext lambdaintroducer() {
		LambdaintroducerContext _localctx = new LambdaintroducerContext(Context, State);
		EnterRule(_localctx, 14, RULE_lambdaintroducer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; Match(LeftBracket);
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & ((1L << (This - 337)) | (1L << (And - 337)) | (1L << (Assign - 337)))) != 0) || _la==Identifier) {
				{
				State = 483; lambdacapture();
				}
			}

			State = 486; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdacaptureContext : ParserRuleContext {
		public CapturedefaultContext capturedefault() {
			return GetRuleContext<CapturedefaultContext>(0);
		}
		public CapturelistContext capturelist() {
			return GetRuleContext<CapturelistContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public LambdacaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdacapture; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdacapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdacapture(this);
		}
	}

	[RuleVersion(0)]
	public LambdacaptureContext lambdacapture() {
		LambdacaptureContext _localctx = new LambdacaptureContext(Context, State);
		EnterRule(_localctx, 16, RULE_lambdacapture);
		try {
			State = 494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 488; capturedefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 489; capturelist(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 490; capturedefault();
				State = 491; Match(Comma);
				State = 492; capturelist(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CapturedefaultContext : ParserRuleContext {
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public CapturedefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capturedefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCapturedefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCapturedefault(this);
		}
	}

	[RuleVersion(0)]
	public CapturedefaultContext capturedefault() {
		CapturedefaultContext _localctx = new CapturedefaultContext(Context, State);
		EnterRule(_localctx, 18, RULE_capturedefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Assign) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CapturelistContext : ParserRuleContext {
		public CaptureContext capture() {
			return GetRuleContext<CaptureContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public CapturelistContext capturelist() {
			return GetRuleContext<CapturelistContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public CapturelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capturelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCapturelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCapturelist(this);
		}
	}

	[RuleVersion(0)]
	public CapturelistContext capturelist() {
		return capturelist(0);
	}

	private CapturelistContext capturelist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CapturelistContext _localctx = new CapturelistContext(Context, _parentState);
		CapturelistContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_capturelist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 499; capture();
			State = 501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 500; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 511;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CapturelistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_capturelist);
					State = 503;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 504; Match(Comma);
					State = 505; capture();
					State = 507;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						State = 506; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 513;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CaptureContext : ParserRuleContext {
		public SimplecaptureContext simplecapture() {
			return GetRuleContext<SimplecaptureContext>(0);
		}
		public InitcaptureContext initcapture() {
			return GetRuleContext<InitcaptureContext>(0);
		}
		public CaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCapture(this);
		}
	}

	[RuleVersion(0)]
	public CaptureContext capture() {
		CaptureContext _localctx = new CaptureContext(Context, State);
		EnterRule(_localctx, 22, RULE_capture);
		try {
			State = 516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 514; simplecapture();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 515; initcapture();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplecaptureContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		public SimplecaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplecapture; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimplecapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimplecapture(this);
		}
	}

	[RuleVersion(0)]
	public SimplecaptureContext simplecapture() {
		SimplecaptureContext _localctx = new SimplecaptureContext(Context, State);
		EnterRule(_localctx, 24, RULE_simplecapture);
		try {
			State = 522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 518; Match(Identifier);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 519; Match(And);
				State = 520; Match(Identifier);
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 3);
				{
				State = 521; Match(This);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitcaptureContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public InitcaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initcapture; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitcapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitcapture(this);
		}
	}

	[RuleVersion(0)]
	public InitcaptureContext initcapture() {
		InitcaptureContext _localctx = new InitcaptureContext(Context, State);
		EnterRule(_localctx, 26, RULE_initcapture);
		try {
			State = 529;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 524; Match(Identifier);
				State = 525; initializer();
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 526; Match(And);
				State = 527; Match(Identifier);
				State = 528; initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdadeclaratorContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ParameterdeclarationclauseContext parameterdeclarationclause() {
			return GetRuleContext<ParameterdeclarationclauseContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		public ExceptionspecificationContext exceptionspecification() {
			return GetRuleContext<ExceptionspecificationContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public TrailingreturntypeContext trailingreturntype() {
			return GetRuleContext<TrailingreturntypeContext>(0);
		}
		public LambdadeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdadeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdadeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdadeclarator(this);
		}
	}

	[RuleVersion(0)]
	public LambdadeclaratorContext lambdadeclarator() {
		LambdadeclaratorContext _localctx = new LambdadeclaratorContext(Context, State);
		EnterRule(_localctx, 28, RULE_lambdadeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531; Match(LeftParen);
			State = 532; parameterdeclarationclause();
			State = 533; Match(RightParen);
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mutable) {
				{
				State = 534; Match(Mutable);
				}
			}

			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Noexcept || _la==Throw) {
				{
				State = 537; exceptionspecification();
				}
			}

			State = 541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 540; attributespecifierseq(0);
				}
			}

			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Arrow) {
				{
				State = 543; trailingreturntype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixexpressionContext : ParserRuleContext {
		public PrimaryexpressionContext primaryexpression() {
			return GetRuleContext<PrimaryexpressionContext>(0);
		}
		public SimpletypespecifierContext simpletypespecifier() {
			return GetRuleContext<SimpletypespecifierContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public TypenamespecifierContext typenamespecifier() {
			return GetRuleContext<TypenamespecifierContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ITerminalNode Dynamic_cast() { return GetToken(CPP14Parser.Dynamic_cast, 0); }
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Static_cast() { return GetToken(CPP14Parser.Static_cast, 0); }
		public ITerminalNode Reinterpret_cast() { return GetToken(CPP14Parser.Reinterpret_cast, 0); }
		public ITerminalNode Const_cast() { return GetToken(CPP14Parser.Const_cast, 0); }
		public TypeidofthetypeidContext typeidofthetypeid() {
			return GetRuleContext<TypeidofthetypeidContext>(0);
		}
		public PostfixexpressionContext postfixexpression() {
			return GetRuleContext<PostfixexpressionContext>(0);
		}
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public ITerminalNode Dot() { return GetToken(CPP14Parser.Dot, 0); }
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		public PseudodestructornameContext pseudodestructorname() {
			return GetRuleContext<PseudodestructornameContext>(0);
		}
		public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		public PostfixexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPostfixexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPostfixexpression(this);
		}
	}

	[RuleVersion(0)]
	public PostfixexpressionContext postfixexpression() {
		return postfixexpression(0);
	}

	private PostfixexpressionContext postfixexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixexpressionContext _localctx = new PostfixexpressionContext(Context, _parentState);
		PostfixexpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_postfixexpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 547; primaryexpression();
				}
				break;
			case 2:
				{
				State = 548; simpletypespecifier();
				State = 549; Match(LeftParen);
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (This - 320)) | (1L << (Throw - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (LeftBrace - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
					{
					State = 550; expressionlist();
					}
				}

				State = 553; Match(RightParen);
				}
				break;
			case 3:
				{
				State = 555; typenamespecifier();
				State = 556; Match(LeftParen);
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (This - 320)) | (1L << (Throw - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (LeftBrace - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
					{
					State = 557; expressionlist();
					}
				}

				State = 560; Match(RightParen);
				}
				break;
			case 4:
				{
				State = 562; simpletypespecifier();
				State = 563; bracedinitlist();
				}
				break;
			case 5:
				{
				State = 565; typenamespecifier();
				State = 566; bracedinitlist();
				}
				break;
			case 6:
				{
				State = 568; Match(Dynamic_cast);
				State = 569; Match(Less);
				State = 570; thetypeid();
				State = 571; Match(Greater);
				State = 572; Match(LeftParen);
				State = 573; expression(0);
				State = 574; Match(RightParen);
				}
				break;
			case 7:
				{
				State = 576; Match(Static_cast);
				State = 577; Match(Less);
				State = 578; thetypeid();
				State = 579; Match(Greater);
				State = 580; Match(LeftParen);
				State = 581; expression(0);
				State = 582; Match(RightParen);
				}
				break;
			case 8:
				{
				State = 584; Match(Reinterpret_cast);
				State = 585; Match(Less);
				State = 586; thetypeid();
				State = 587; Match(Greater);
				State = 588; Match(LeftParen);
				State = 589; expression(0);
				State = 590; Match(RightParen);
				}
				break;
			case 9:
				{
				State = 592; Match(Const_cast);
				State = 593; Match(Less);
				State = 594; thetypeid();
				State = 595; Match(Greater);
				State = 596; Match(LeftParen);
				State = 597; expression(0);
				State = 598; Match(RightParen);
				}
				break;
			case 10:
				{
				State = 600; typeidofthetypeid();
				State = 601; Match(LeftParen);
				State = 602; expression(0);
				State = 603; Match(RightParen);
				}
				break;
			case 11:
				{
				State = 605; typeidofthetypeid();
				State = 606; Match(LeftParen);
				State = 607; thetypeid();
				State = 608; Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 652;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 650;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 612;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 613; Match(LeftBracket);
						State = 614; expression(0);
						State = 615; Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 617;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 618; Match(LeftBracket);
						State = 619; bracedinitlist();
						State = 620; Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 622;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 623; Match(LeftParen);
						State = 625;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (This - 320)) | (1L << (Throw - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (LeftBrace - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
							{
							State = 624; expressionlist();
							}
						}

						State = 627; Match(RightParen);
						}
						break;
					case 4:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 628;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 629; Match(Dot);
						State = 631;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 630; Match(Template);
							}
						}

						State = 633; idexpression();
						}
						break;
					case 5:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 634;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 635; Match(Arrow);
						State = 637;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 636; Match(Template);
							}
						}

						State = 639; idexpression();
						}
						break;
					case 6:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 640;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 641; Match(Dot);
						State = 642; pseudodestructorname();
						}
						break;
					case 7:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 643;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 644; Match(Arrow);
						State = 645; pseudodestructorname();
						}
						break;
					case 8:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 646;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 647; Match(PlusPlus);
						}
						break;
					case 9:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 648;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 649; Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 654;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeidofexprContext : ParserRuleContext {
		public ITerminalNode Typeid_() { return GetToken(CPP14Parser.Typeid_, 0); }
		public TypeidofexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeidofexpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeidofexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeidofexpr(this);
		}
	}

	[RuleVersion(0)]
	public TypeidofexprContext typeidofexpr() {
		TypeidofexprContext _localctx = new TypeidofexprContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeidofexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655; Match(Typeid_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeidofthetypeidContext : ParserRuleContext {
		public ITerminalNode Typeid_() { return GetToken(CPP14Parser.Typeid_, 0); }
		public TypeidofthetypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeidofthetypeid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeidofthetypeid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeidofthetypeid(this);
		}
	}

	[RuleVersion(0)]
	public TypeidofthetypeidContext typeidofthetypeid() {
		TypeidofthetypeidContext _localctx = new TypeidofthetypeidContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeidofthetypeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657; Match(Typeid_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExpressionlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExpressionlist(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659; initializerlist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudodestructornameContext : ParserRuleContext {
		public ThetypenameContext[] thetypename() {
			return GetRuleContexts<ThetypenameContext>();
		}
		public ThetypenameContext thetypename(int i) {
			return GetRuleContext<ThetypenameContext>(i);
		}
		public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public PseudodestructornameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudodestructorname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPseudodestructorname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPseudodestructorname(this);
		}
	}

	[RuleVersion(0)]
	public PseudodestructornameContext pseudodestructorname() {
		PseudodestructornameContext _localctx = new PseudodestructornameContext(Context, State);
		EnterRule(_localctx, 38, RULE_pseudodestructorname);
		int _la;
		try {
			State = 683;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 662;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 661; nestednamespecifier(0);
					}
					break;
				}
				State = 664; thetypename();
				State = 665; Match(Doublecolon);
				State = 666; Match(Tilde);
				State = 667; thetypename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 669; nestednamespecifier(0);
				State = 670; Match(Template);
				State = 671; simpletemplateid();
				State = 672; Match(Doublecolon);
				State = 673; Match(Tilde);
				State = 674; thetypename();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || _la==Doublecolon || _la==Identifier) {
					{
					State = 676; nestednamespecifier(0);
					}
				}

				State = 679; Match(Tilde);
				State = 680; thetypename();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 681; Match(Tilde);
				State = 682; decltypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryexpressionContext : ParserRuleContext {
		public PostfixexpressionContext postfixexpression() {
			return GetRuleContext<PostfixexpressionContext>(0);
		}
		public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		public UnaryoperatorContext unaryoperator() {
			return GetRuleContext<UnaryoperatorContext>(0);
		}
		public ITerminalNode Sizeof() { return GetToken(CPP14Parser.Sizeof, 0); }
		public UnaryexpressionContext unaryexpression() {
			return GetRuleContext<UnaryexpressionContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Alignof() { return GetToken(CPP14Parser.Alignof, 0); }
		public NoexceptexpressionContext noexceptexpression() {
			return GetRuleContext<NoexceptexpressionContext>(0);
		}
		public NewexpressionContext newexpression() {
			return GetRuleContext<NewexpressionContext>(0);
		}
		public DeleteexpressionContext deleteexpression() {
			return GetRuleContext<DeleteexpressionContext>(0);
		}
		public UnaryexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnaryexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnaryexpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryexpressionContext unaryexpression() {
		UnaryexpressionContext _localctx = new UnaryexpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_unaryexpression);
		try {
			State = 713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 685; postfixexpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 686; Match(PlusPlus);
				State = 687; castexpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 688; Match(MinusMinus);
				State = 689; castexpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 690; unaryoperator();
				State = 691; castexpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 693; Match(Sizeof);
				State = 694; unaryexpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 695; Match(Sizeof);
				State = 696; Match(LeftParen);
				State = 697; thetypeid();
				State = 698; Match(RightParen);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 700; Match(Sizeof);
				State = 701; Match(Ellipsis);
				State = 702; Match(LeftParen);
				State = 703; Match(Identifier);
				State = 704; Match(RightParen);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 705; Match(Alignof);
				State = 706; Match(LeftParen);
				State = 707; thetypeid();
				State = 708; Match(RightParen);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 710; noexceptexpression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 711; newexpression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 712; deleteexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryoperatorContext : ParserRuleContext {
		public ITerminalNode Or() { return GetToken(CPP14Parser.Or, 0); }
		public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public ITerminalNode Plus() { return GetToken(CPP14Parser.Plus, 0); }
		public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		public ITerminalNode Minus() { return GetToken(CPP14Parser.Minus, 0); }
		public UnaryoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnaryoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnaryoperator(this);
		}
	}

	[RuleVersion(0)]
	public UnaryoperatorContext unaryoperator() {
		UnaryoperatorContext _localctx = new UnaryoperatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_unaryoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1 || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (Plus - 359)) | (1L << (Minus - 359)) | (1L << (Star - 359)) | (1L << (And - 359)) | (1L << (Or - 359)) | (1L << (Tilde - 359)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewexpressionContext : ParserRuleContext {
		public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		public NewtypeidContext newtypeid() {
			return GetRuleContext<NewtypeidContext>(0);
		}
		public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		public NewplacementContext newplacement() {
			return GetRuleContext<NewplacementContext>(0);
		}
		public NewinitializerContext newinitializer() {
			return GetRuleContext<NewinitializerContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NewexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewexpression(this);
		}
	}

	[RuleVersion(0)]
	public NewexpressionContext newexpression() {
		NewexpressionContext _localctx = new NewexpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_newexpression);
		int _la;
		try {
			State = 741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Doublecolon) {
					{
					State = 717; Match(Doublecolon);
					}
				}

				State = 720; Match(New);
				State = 722;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LeftParen) {
					{
					State = 721; newplacement();
					}
				}

				State = 724; newtypeid();
				State = 726;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 725; newinitializer();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Doublecolon) {
					{
					State = 728; Match(Doublecolon);
					}
				}

				State = 731; Match(New);
				State = 733;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 732; newplacement();
					}
					break;
				}
				State = 735; Match(LeftParen);
				State = 736; thetypeid();
				State = 737; Match(RightParen);
				State = 739;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 738; newinitializer();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewplacementContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NewplacementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newplacement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewplacement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewplacement(this);
		}
	}

	[RuleVersion(0)]
	public NewplacementContext newplacement() {
		NewplacementContext _localctx = new NewplacementContext(Context, State);
		EnterRule(_localctx, 46, RULE_newplacement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743; Match(LeftParen);
			State = 744; expressionlist();
			State = 745; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewtypeidContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public NewdeclaratorContext newdeclarator() {
			return GetRuleContext<NewdeclaratorContext>(0);
		}
		public NewtypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newtypeid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewtypeid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewtypeid(this);
		}
	}

	[RuleVersion(0)]
	public NewtypeidContext newtypeid() {
		NewtypeidContext _localctx = new NewtypeidContext(Context, State);
		EnterRule(_localctx, 48, RULE_newtypeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747; typespecifierseq();
			State = 749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 748; newdeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewdeclaratorContext : ParserRuleContext {
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public NewdeclaratorContext newdeclarator() {
			return GetRuleContext<NewdeclaratorContext>(0);
		}
		public NoptrnewdeclaratorContext noptrnewdeclarator() {
			return GetRuleContext<NoptrnewdeclaratorContext>(0);
		}
		public NewdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NewdeclaratorContext newdeclarator() {
		NewdeclaratorContext _localctx = new NewdeclaratorContext(Context, State);
		EnterRule(_localctx, 50, RULE_newdeclarator);
		try {
			State = 756;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case Decltype:
			case Star:
			case And:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 751; ptroperator();
				State = 753;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 752; newdeclarator();
					}
					break;
				}
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 755; noptrnewdeclarator(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrnewdeclaratorContext : ParserRuleContext {
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public NoptrnewdeclaratorContext noptrnewdeclarator() {
			return GetRuleContext<NoptrnewdeclaratorContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public NoptrnewdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrnewdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoptrnewdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoptrnewdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NoptrnewdeclaratorContext noptrnewdeclarator() {
		return noptrnewdeclarator(0);
	}

	private NoptrnewdeclaratorContext noptrnewdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrnewdeclaratorContext _localctx = new NoptrnewdeclaratorContext(Context, _parentState);
		NoptrnewdeclaratorContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_noptrnewdeclarator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 759; Match(LeftBracket);
			State = 760; expression(0);
			State = 761; Match(RightBracket);
			State = 763;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 762; attributespecifierseq(0);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 774;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NoptrnewdeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_noptrnewdeclarator);
					State = 765;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 766; Match(LeftBracket);
					State = 767; constantexpression();
					State = 768; Match(RightBracket);
					State = 770;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						State = 769; attributespecifierseq(0);
						}
						break;
					}
					}
					} 
				}
				State = 776;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NewinitializerContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public NewinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewinitializer(this);
		}
	}

	[RuleVersion(0)]
	public NewinitializerContext newinitializer() {
		NewinitializerContext _localctx = new NewinitializerContext(Context, State);
		EnterRule(_localctx, 54, RULE_newinitializer);
		int _la;
		try {
			State = 783;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 777; Match(LeftParen);
				State = 779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (This - 320)) | (1L << (Throw - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (LeftBrace - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
					{
					State = 778; expressionlist();
					}
				}

				State = 781; Match(RightParen);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 782; bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteexpressionContext : ParserRuleContext {
		public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public DeleteexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeleteexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeleteexpression(this);
		}
	}

	[RuleVersion(0)]
	public DeleteexpressionContext deleteexpression() {
		DeleteexpressionContext _localctx = new DeleteexpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_deleteexpression);
		int _la;
		try {
			State = 797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Doublecolon) {
					{
					State = 785; Match(Doublecolon);
					}
				}

				State = 788; Match(Delete);
				State = 789; castexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Doublecolon) {
					{
					State = 790; Match(Doublecolon);
					}
				}

				State = 793; Match(Delete);
				State = 794; Match(LeftBracket);
				State = 795; Match(RightBracket);
				State = 796; castexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoexceptexpressionContext : ParserRuleContext {
		public ITerminalNode Noexcept() { return GetToken(CPP14Parser.Noexcept, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoexceptexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noexceptexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoexceptexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoexceptexpression(this);
		}
	}

	[RuleVersion(0)]
	public NoexceptexpressionContext noexceptexpression() {
		NoexceptexpressionContext _localctx = new NoexceptexpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_noexceptexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799; Match(Noexcept);
			State = 800; Match(LeftParen);
			State = 801; expression(0);
			State = 802; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastexpressionContext : ParserRuleContext {
		public UnaryexpressionContext unaryexpression() {
			return GetRuleContext<UnaryexpressionContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public CastexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCastexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCastexpression(this);
		}
	}

	[RuleVersion(0)]
	public CastexpressionContext castexpression() {
		CastexpressionContext _localctx = new CastexpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_castexpression);
		try {
			State = 810;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 804; unaryexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 805; Match(LeftParen);
				State = 806; thetypeid();
				State = 807; Match(RightParen);
				State = 808; castexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PmexpressionContext : ParserRuleContext {
		public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public PmexpressionContext pmexpression() {
			return GetRuleContext<PmexpressionContext>(0);
		}
		public ITerminalNode DotStar() { return GetToken(CPP14Parser.DotStar, 0); }
		public ITerminalNode ArrowStar() { return GetToken(CPP14Parser.ArrowStar, 0); }
		public PmexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pmexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPmexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPmexpression(this);
		}
	}

	[RuleVersion(0)]
	public PmexpressionContext pmexpression() {
		return pmexpression(0);
	}

	private PmexpressionContext pmexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PmexpressionContext _localctx = new PmexpressionContext(Context, _parentState);
		PmexpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_pmexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 813; castexpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 823;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 821;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
					case 1:
						{
						_localctx = new PmexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_pmexpression);
						State = 815;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 816; Match(DotStar);
						State = 817; castexpression();
						}
						break;
					case 2:
						{
						_localctx = new PmexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_pmexpression);
						State = 818;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 819; Match(ArrowStar);
						State = 820; castexpression();
						}
						break;
					}
					} 
				}
				State = 825;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeexpressionContext : ParserRuleContext {
		public PmexpressionContext pmexpression() {
			return GetRuleContext<PmexpressionContext>(0);
		}
		public MultiplicativeexpressionContext multiplicativeexpression() {
			return GetRuleContext<MultiplicativeexpressionContext>(0);
		}
		public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		public ITerminalNode Div() { return GetToken(CPP14Parser.Div, 0); }
		public ITerminalNode Mod() { return GetToken(CPP14Parser.Mod, 0); }
		public MultiplicativeexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMultiplicativeexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMultiplicativeexpression(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeexpressionContext multiplicativeexpression() {
		return multiplicativeexpression(0);
	}

	private MultiplicativeexpressionContext multiplicativeexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeexpressionContext _localctx = new MultiplicativeexpressionContext(Context, _parentState);
		MultiplicativeexpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_multiplicativeexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 827; pmexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 840;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 838;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 829;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 830; Match(Star);
						State = 831; pmexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 832;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 833; Match(Div);
						State = 834; pmexpression(0);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 835;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 836; Match(Mod);
						State = 837; pmexpression(0);
						}
						break;
					}
					} 
				}
				State = 842;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveexpressionContext : ParserRuleContext {
		public MultiplicativeexpressionContext multiplicativeexpression() {
			return GetRuleContext<MultiplicativeexpressionContext>(0);
		}
		public AdditiveexpressionContext additiveexpression() {
			return GetRuleContext<AdditiveexpressionContext>(0);
		}
		public ITerminalNode Plus() { return GetToken(CPP14Parser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(CPP14Parser.Minus, 0); }
		public AdditiveexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAdditiveexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAdditiveexpression(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveexpressionContext additiveexpression() {
		return additiveexpression(0);
	}

	private AdditiveexpressionContext additiveexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveexpressionContext _localctx = new AdditiveexpressionContext(Context, _parentState);
		AdditiveexpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_additiveexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 844; multiplicativeexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 854;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 852;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						_localctx = new AdditiveexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveexpression);
						State = 846;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 847; Match(Plus);
						State = 848; multiplicativeexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveexpression);
						State = 849;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 850; Match(Minus);
						State = 851; multiplicativeexpression(0);
						}
						break;
					}
					} 
				}
				State = 856;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftexpressionContext : ParserRuleContext {
		public AdditiveexpressionContext additiveexpression() {
			return GetRuleContext<AdditiveexpressionContext>(0);
		}
		public ShiftexpressionContext shiftexpression() {
			return GetRuleContext<ShiftexpressionContext>(0);
		}
		public ShiftoperatorContext shiftoperator() {
			return GetRuleContext<ShiftoperatorContext>(0);
		}
		public ShiftexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterShiftexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitShiftexpression(this);
		}
	}

	[RuleVersion(0)]
	public ShiftexpressionContext shiftexpression() {
		return shiftexpression(0);
	}

	private ShiftexpressionContext shiftexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftexpressionContext _localctx = new ShiftexpressionContext(Context, _parentState);
		ShiftexpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_shiftexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 858; additiveexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 866;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ShiftexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_shiftexpression);
					State = 860;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 861; shiftoperator();
					State = 862; additiveexpression(0);
					}
					} 
				}
				State = 868;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftoperatorContext : ParserRuleContext {
		public ITerminalNode RightShift() { return GetToken(CPP14Parser.RightShift, 0); }
		public ITerminalNode LeftShift() { return GetToken(CPP14Parser.LeftShift, 0); }
		public ShiftoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterShiftoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitShiftoperator(this);
		}
	}

	[RuleVersion(0)]
	public ShiftoperatorContext shiftoperator() {
		ShiftoperatorContext _localctx = new ShiftoperatorContext(Context, State);
		EnterRule(_localctx, 70, RULE_shiftoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869;
			_la = TokenStream.LA(1);
			if ( !(_la==LeftShift || _la==RightShift) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalexpressionContext : ParserRuleContext {
		public ShiftexpressionContext shiftexpression() {
			return GetRuleContext<ShiftexpressionContext>(0);
		}
		public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public ITerminalNode LessEqual() { return GetToken(CPP14Parser.LessEqual, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(CPP14Parser.GreaterEqual, 0); }
		public RelationalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRelationalexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRelationalexpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalexpressionContext relationalexpression() {
		return relationalexpression(0);
	}

	private RelationalexpressionContext relationalexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalexpressionContext _localctx = new RelationalexpressionContext(Context, _parentState);
		RelationalexpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_relationalexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 872; shiftexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 888;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 886;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
					case 1:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 874;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 875; Match(Less);
						State = 876; shiftexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 877;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 878; Match(Greater);
						State = 879; shiftexpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 880;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 881; Match(LessEqual);
						State = 882; shiftexpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 883;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 884; Match(GreaterEqual);
						State = 885; shiftexpression(0);
						}
						break;
					}
					} 
				}
				State = 890;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityexpressionContext : ParserRuleContext {
		public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		public EqualityexpressionContext equalityexpression() {
			return GetRuleContext<EqualityexpressionContext>(0);
		}
		public ITerminalNode Equal() { return GetToken(CPP14Parser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(CPP14Parser.NotEqual, 0); }
		public EqualityexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEqualityexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEqualityexpression(this);
		}
	}

	[RuleVersion(0)]
	public EqualityexpressionContext equalityexpression() {
		return equalityexpression(0);
	}

	private EqualityexpressionContext equalityexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityexpressionContext _localctx = new EqualityexpressionContext(Context, _parentState);
		EqualityexpressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_equalityexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 892; relationalexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 902;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 900;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
					case 1:
						{
						_localctx = new EqualityexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityexpression);
						State = 894;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 895; Match(Equal);
						State = 896; relationalexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityexpression);
						State = 897;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 898; Match(NotEqual);
						State = 899; relationalexpression(0);
						}
						break;
					}
					} 
				}
				State = 904;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndexpressionContext : ParserRuleContext {
		public EqualityexpressionContext equalityexpression() {
			return GetRuleContext<EqualityexpressionContext>(0);
		}
		public AndexpressionContext andexpression() {
			return GetRuleContext<AndexpressionContext>(0);
		}
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public AndexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAndexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAndexpression(this);
		}
	}

	[RuleVersion(0)]
	public AndexpressionContext andexpression() {
		return andexpression(0);
	}

	private AndexpressionContext andexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndexpressionContext _localctx = new AndexpressionContext(Context, _parentState);
		AndexpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_andexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 906; equalityexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 913;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andexpression);
					State = 908;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 909; Match(And);
					State = 910; equalityexpression(0);
					}
					} 
				}
				State = 915;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveorexpressionContext : ParserRuleContext {
		public AndexpressionContext andexpression() {
			return GetRuleContext<AndexpressionContext>(0);
		}
		public ExclusiveorexpressionContext exclusiveorexpression() {
			return GetRuleContext<ExclusiveorexpressionContext>(0);
		}
		public ITerminalNode Caret() { return GetToken(CPP14Parser.Caret, 0); }
		public ExclusiveorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveorexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExclusiveorexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExclusiveorexpression(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveorexpressionContext exclusiveorexpression() {
		return exclusiveorexpression(0);
	}

	private ExclusiveorexpressionContext exclusiveorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveorexpressionContext _localctx = new ExclusiveorexpressionContext(Context, _parentState);
		ExclusiveorexpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_exclusiveorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 917; andexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 924;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveorexpression);
					State = 919;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 920; Match(Caret);
					State = 921; andexpression(0);
					}
					} 
				}
				State = 926;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveorexpressionContext : ParserRuleContext {
		public ExclusiveorexpressionContext exclusiveorexpression() {
			return GetRuleContext<ExclusiveorexpressionContext>(0);
		}
		public InclusiveorexpressionContext inclusiveorexpression() {
			return GetRuleContext<InclusiveorexpressionContext>(0);
		}
		public ITerminalNode Or() { return GetToken(CPP14Parser.Or, 0); }
		public InclusiveorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveorexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInclusiveorexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInclusiveorexpression(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveorexpressionContext inclusiveorexpression() {
		return inclusiveorexpression(0);
	}

	private InclusiveorexpressionContext inclusiveorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveorexpressionContext _localctx = new InclusiveorexpressionContext(Context, _parentState);
		InclusiveorexpressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_inclusiveorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 928; exclusiveorexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 935;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveorexpression);
					State = 930;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 931; Match(Or);
					State = 932; exclusiveorexpression(0);
					}
					} 
				}
				State = 937;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalandexpressionContext : ParserRuleContext {
		public InclusiveorexpressionContext inclusiveorexpression() {
			return GetRuleContext<InclusiveorexpressionContext>(0);
		}
		public LogicalandexpressionContext logicalandexpression() {
			return GetRuleContext<LogicalandexpressionContext>(0);
		}
		public LogicalandexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalandexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLogicalandexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLogicalandexpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalandexpressionContext logicalandexpression() {
		return logicalandexpression(0);
	}

	private LogicalandexpressionContext logicalandexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalandexpressionContext _localctx = new LogicalandexpressionContext(Context, _parentState);
		LogicalandexpressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_logicalandexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 939; inclusiveorexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 949;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 947;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
					case 1:
						{
						_localctx = new LogicalandexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicalandexpression);
						State = 941;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 942; Match(T__2);
						State = 943; inclusiveorexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new LogicalandexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicalandexpression);
						State = 944;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 945; Match(T__3);
						State = 946; inclusiveorexpression(0);
						}
						break;
					}
					} 
				}
				State = 951;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalorexpressionContext : ParserRuleContext {
		public LogicalandexpressionContext logicalandexpression() {
			return GetRuleContext<LogicalandexpressionContext>(0);
		}
		public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		public LogicalorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalorexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLogicalorexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLogicalorexpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalorexpressionContext logicalorexpression() {
		return logicalorexpression(0);
	}

	private LogicalorexpressionContext logicalorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalorexpressionContext _localctx = new LogicalorexpressionContext(Context, _parentState);
		LogicalorexpressionContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_logicalorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 953; logicalandexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 963;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 961;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
					case 1:
						{
						_localctx = new LogicalorexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicalorexpression);
						State = 955;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 956; Match(T__4);
						State = 957; logicalandexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new LogicalorexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicalorexpression);
						State = 958;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 959; Match(T__5);
						State = 960; logicalandexpression(0);
						}
						break;
					}
					} 
				}
				State = 965;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalexpressionContext : ParserRuleContext {
		public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		public ITerminalNode Question() { return GetToken(CPP14Parser.Question, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public ConditionalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConditionalexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConditionalexpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalexpressionContext conditionalexpression() {
		ConditionalexpressionContext _localctx = new ConditionalexpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_conditionalexpression);
		try {
			State = 973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 966; logicalorexpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 967; logicalorexpression(0);
				State = 968; Match(Question);
				State = 969; expression(0);
				State = 970; Match(Colon);
				State = 971; assignmentexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentexpressionContext : ParserRuleContext {
		public ConditionalexpressionContext conditionalexpression() {
			return GetRuleContext<ConditionalexpressionContext>(0);
		}
		public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		public AssignmentoperatorContext assignmentoperator() {
			return GetRuleContext<AssignmentoperatorContext>(0);
		}
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public ThrowexpressionContext throwexpression() {
			return GetRuleContext<ThrowexpressionContext>(0);
		}
		public AssignmentexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAssignmentexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAssignmentexpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentexpressionContext assignmentexpression() {
		AssignmentexpressionContext _localctx = new AssignmentexpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_assignmentexpression);
		try {
			State = 981;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 975; conditionalexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 976; logicalorexpression(0);
				State = 977; assignmentoperator();
				State = 978; initializerclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 980; throwexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentoperatorContext : ParserRuleContext {
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ITerminalNode StarAssign() { return GetToken(CPP14Parser.StarAssign, 0); }
		public ITerminalNode DivAssign() { return GetToken(CPP14Parser.DivAssign, 0); }
		public ITerminalNode ModAssign() { return GetToken(CPP14Parser.ModAssign, 0); }
		public ITerminalNode PlusAssign() { return GetToken(CPP14Parser.PlusAssign, 0); }
		public ITerminalNode MinusAssign() { return GetToken(CPP14Parser.MinusAssign, 0); }
		public ITerminalNode RightShiftAssign() { return GetToken(CPP14Parser.RightShiftAssign, 0); }
		public ITerminalNode LeftShiftAssign() { return GetToken(CPP14Parser.LeftShiftAssign, 0); }
		public ITerminalNode AndAssign() { return GetToken(CPP14Parser.AndAssign, 0); }
		public ITerminalNode XorAssign() { return GetToken(CPP14Parser.XorAssign, 0); }
		public ITerminalNode OrAssign() { return GetToken(CPP14Parser.OrAssign, 0); }
		public AssignmentoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAssignmentoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAssignmentoperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentoperatorContext assignmentoperator() {
		AssignmentoperatorContext _localctx = new AssignmentoperatorContext(Context, State);
		EnterRule(_localctx, 90, RULE_assignmentoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 983;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & ((1L << (Assign - 369)) | (1L << (PlusAssign - 369)) | (1L << (MinusAssign - 369)) | (1L << (StarAssign - 369)) | (1L << (DivAssign - 369)) | (1L << (ModAssign - 369)) | (1L << (XorAssign - 369)) | (1L << (AndAssign - 369)) | (1L << (OrAssign - 369)) | (1L << (LeftShiftAssign - 369)) | (1L << (RightShiftAssign - 369)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 986; assignmentexpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 993;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 988;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 989; Match(Comma);
					State = 990; assignmentexpression();
					}
					} 
				}
				State = 995;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstantexpressionContext : ParserRuleContext {
		public ConditionalexpressionContext conditionalexpression() {
			return GetRuleContext<ConditionalexpressionContext>(0);
		}
		public ConstantexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConstantexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConstantexpression(this);
		}
	}

	[RuleVersion(0)]
	public ConstantexpressionContext constantexpression() {
		ConstantexpressionContext _localctx = new ConstantexpressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_constantexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996; conditionalexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public LabeledstatementContext labeledstatement() {
			return GetRuleContext<LabeledstatementContext>(0);
		}
		public ExpressionstatementContext expressionstatement() {
			return GetRuleContext<ExpressionstatementContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public SelectionstatementContext selectionstatement() {
			return GetRuleContext<SelectionstatementContext>(0);
		}
		public IterationstatementContext iterationstatement() {
			return GetRuleContext<IterationstatementContext>(0);
		}
		public JumpstatementContext jumpstatement() {
			return GetRuleContext<JumpstatementContext>(0);
		}
		public DeclarationstatementContext declarationstatement() {
			return GetRuleContext<DeclarationstatementContext>(0);
		}
		public TryblockContext tryblock() {
			return GetRuleContext<TryblockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_statement);
		int _la;
		try {
			State = 1024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 998; labeledstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1000;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 999; attributespecifierseq(0);
					}
					break;
				}
				State = 1002; expressionstatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1003; attributespecifierseq(0);
					}
				}

				State = 1006; compoundstatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1008;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1007; attributespecifierseq(0);
					}
				}

				State = 1010; selectionstatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1012;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1011; attributespecifierseq(0);
					}
				}

				State = 1014; iterationstatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1015; attributespecifierseq(0);
					}
				}

				State = 1018; jumpstatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1019; declarationstatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1021;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1020; attributespecifierseq(0);
					}
				}

				State = 1023; tryblock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledstatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ITerminalNode Case() { return GetToken(CPP14Parser.Case, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		public LabeledstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLabeledstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLabeledstatement(this);
		}
	}

	[RuleVersion(0)]
	public LabeledstatementContext labeledstatement() {
		LabeledstatementContext _localctx = new LabeledstatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_labeledstatement);
		int _la;
		try {
			State = 1046;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1026; attributespecifierseq(0);
					}
				}

				State = 1029; Match(Identifier);
				State = 1030; Match(Colon);
				State = 1031; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1033;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1032; attributespecifierseq(0);
					}
				}

				State = 1035; Match(Case);
				State = 1036; constantexpression();
				State = 1037; Match(Colon);
				State = 1038; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1041;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1040; attributespecifierseq(0);
					}
				}

				State = 1043; Match(Default);
				State = 1044; Match(Colon);
				State = 1045; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionstatementContext : ParserRuleContext {
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExpressionstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExpressionstatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionstatementContext expressionstatement() {
		ExpressionstatementContext _localctx = new ExpressionstatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_expressionstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (This - 320)) | (1L << (Throw - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
				{
				State = 1048; expression(0);
				}
			}

			State = 1051; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundstatementContext : ParserRuleContext {
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public StatementseqContext statementseq() {
			return GetRuleContext<StatementseqContext>(0);
		}
		public CompoundstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCompoundstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCompoundstatement(this);
		}
	}

	[RuleVersion(0)]
	public CompoundstatementContext compoundstatement() {
		CompoundstatementContext _localctx = new CompoundstatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_compoundstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1053; Match(LeftBrace);
			State = 1055;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignas - 256)) | (1L << (Alignof - 256)) | (1L << (Asm - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Break - 256)) | (1L << (Case - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Class - 256)) | (1L << (Const - 256)) | (1L << (Constexpr - 256)) | (1L << (Const_cast - 256)) | (1L << (Continue - 256)) | (1L << (Decltype - 256)) | (1L << (Default - 256)) | (1L << (Delete - 256)) | (1L << (Do - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (Enum - 256)) | (1L << (Explicit - 256)) | (1L << (Extern - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (For - 256)) | (1L << (Friend - 256)) | (1L << (Goto - 256)) | (1L << (If - 256)) | (1L << (Inline - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (Mutable - 256)) | (1L << (Namespace - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Register - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Return - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static - 320)) | (1L << (Static_assert - 320)) | (1L << (Static_cast - 320)) | (1L << (Struct - 320)) | (1L << (Switch - 320)) | (1L << (This - 320)) | (1L << (Thread_local - 320)) | (1L << (Throw - 320)) | (1L << (True - 320)) | (1L << (Try - 320)) | (1L << (Typedef - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Union - 320)) | (1L << (Unsigned - 320)) | (1L << (Using - 320)) | (1L << (Virtual - 320)) | (1L << (Void - 320)) | (1L << (Volatile - 320)) | (1L << (Wchar - 320)) | (1L << (While - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (LeftBrace - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Semi - 390)) | (1L << (Ellipsis - 390)) | (1L << (SAL_NAME - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
				{
				State = 1054; statementseq(0);
				}
			}

			State = 1057; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementseqContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementseqContext statementseq() {
			return GetRuleContext<StatementseqContext>(0);
		}
		public StatementseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStatementseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStatementseq(this);
		}
	}

	[RuleVersion(0)]
	public StatementseqContext statementseq() {
		return statementseq(0);
	}

	private StatementseqContext statementseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatementseqContext _localctx = new StatementseqContext(Context, _parentState);
		StatementseqContext _prevctx = _localctx;
		int _startState = 104;
		EnterRecursionRule(_localctx, 104, RULE_statementseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1060; statement();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1066;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statementseq);
					State = 1062;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1063; statement();
					}
					} 
				}
				State = 1068;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectionstatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(CPP14Parser.If, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode Else() { return GetToken(CPP14Parser.Else, 0); }
		public ITerminalNode Switch() { return GetToken(CPP14Parser.Switch, 0); }
		public SelectionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSelectionstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSelectionstatement(this);
		}
	}

	[RuleVersion(0)]
	public SelectionstatementContext selectionstatement() {
		SelectionstatementContext _localctx = new SelectionstatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_selectionstatement);
		try {
			State = 1089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1069; Match(If);
				State = 1070; Match(LeftParen);
				State = 1071; condition();
				State = 1072; Match(RightParen);
				State = 1073; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1075; Match(If);
				State = 1076; Match(LeftParen);
				State = 1077; condition();
				State = 1078; Match(RightParen);
				State = 1079; statement();
				State = 1080; Match(Else);
				State = 1081; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1083; Match(Switch);
				State = 1084; Match(LeftParen);
				State = 1085; condition();
				State = 1086; Match(RightParen);
				State = 1087; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 108, RULE_condition);
		int _la;
		try {
			State = 1107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1091; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1092; attributespecifierseq(0);
					}
				}

				State = 1095; declspecifierseq();
				State = 1096; declarator();
				State = 1097; Match(Assign);
				State = 1098; initializerclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1100; attributespecifierseq(0);
					}
				}

				State = 1103; declspecifierseq();
				State = 1104; declarator();
				State = 1105; bracedinitlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationstatementContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(CPP14Parser.While, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode Do() { return GetToken(CPP14Parser.Do, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public ITerminalNode For() { return GetToken(CPP14Parser.For, 0); }
		public ForinitstatementContext forinitstatement() {
			return GetRuleContext<ForinitstatementContext>(0);
		}
		public ForrangedeclarationContext forrangedeclaration() {
			return GetRuleContext<ForrangedeclarationContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public ForrangeinitializerContext forrangeinitializer() {
			return GetRuleContext<ForrangeinitializerContext>(0);
		}
		public IterationstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterIterationstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitIterationstatement(this);
		}
	}

	[RuleVersion(0)]
	public IterationstatementContext iterationstatement() {
		IterationstatementContext _localctx = new IterationstatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_iterationstatement);
		int _la;
		try {
			State = 1144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1109; Match(While);
				State = 1110; Match(LeftParen);
				State = 1111; condition();
				State = 1112; Match(RightParen);
				State = 1113; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1115; Match(Do);
				State = 1116; statement();
				State = 1117; Match(While);
				State = 1118; Match(LeftParen);
				State = 1119; expression(0);
				State = 1120; Match(RightParen);
				State = 1121; Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1123; Match(For);
				State = 1124; Match(LeftParen);
				State = 1125; forinitstatement();
				State = 1127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignas - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Class - 256)) | (1L << (Const - 256)) | (1L << (Constexpr - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (Enum - 256)) | (1L << (Explicit - 256)) | (1L << (Extern - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Friend - 256)) | (1L << (Inline - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (Mutable - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Register - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static - 320)) | (1L << (Static_cast - 320)) | (1L << (Struct - 320)) | (1L << (This - 320)) | (1L << (Thread_local - 320)) | (1L << (Throw - 320)) | (1L << (True - 320)) | (1L << (Typedef - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Union - 320)) | (1L << (Unsigned - 320)) | (1L << (Virtual - 320)) | (1L << (Void - 320)) | (1L << (Volatile - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (SAL_NAME - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
					{
					State = 1126; condition();
					}
				}

				State = 1129; Match(Semi);
				State = 1131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (This - 320)) | (1L << (Throw - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
					{
					State = 1130; expression(0);
					}
				}

				State = 1133; Match(RightParen);
				State = 1134; statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1136; Match(For);
				State = 1137; Match(LeftParen);
				State = 1138; forrangedeclaration();
				State = 1139; Match(Colon);
				State = 1140; forrangeinitializer();
				State = 1141; Match(RightParen);
				State = 1142; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForinitstatementContext : ParserRuleContext {
		public ExpressionstatementContext expressionstatement() {
			return GetRuleContext<ExpressionstatementContext>(0);
		}
		public SimpledeclarationContext simpledeclaration() {
			return GetRuleContext<SimpledeclarationContext>(0);
		}
		public ForinitstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forinitstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterForinitstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitForinitstatement(this);
		}
	}

	[RuleVersion(0)]
	public ForinitstatementContext forinitstatement() {
		ForinitstatementContext _localctx = new ForinitstatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_forinitstatement);
		try {
			State = 1148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1146; expressionstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1147; simpledeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForrangedeclarationContext : ParserRuleContext {
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ForrangedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forrangedeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterForrangedeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitForrangedeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ForrangedeclarationContext forrangedeclaration() {
		ForrangedeclarationContext _localctx = new ForrangedeclarationContext(Context, State);
		EnterRule(_localctx, 114, RULE_forrangedeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1150; attributespecifierseq(0);
				}
			}

			State = 1153; declspecifierseq();
			State = 1154; declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForrangeinitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ForrangeinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forrangeinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterForrangeinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitForrangeinitializer(this);
		}
	}

	[RuleVersion(0)]
	public ForrangeinitializerContext forrangeinitializer() {
		ForrangeinitializerContext _localctx = new ForrangeinitializerContext(Context, State);
		EnterRule(_localctx, 116, RULE_forrangeinitializer);
		try {
			State = 1158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__41:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__100:
			case T__101:
			case T__102:
			case T__103:
			case T__104:
			case T__105:
			case T__106:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__112:
			case T__113:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__126:
			case T__127:
			case T__128:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__134:
			case T__135:
			case T__136:
			case T__137:
			case T__138:
			case T__139:
			case T__140:
			case T__141:
			case T__142:
			case T__143:
			case T__144:
			case T__145:
			case T__146:
			case T__147:
			case T__148:
			case T__149:
			case T__150:
			case T__151:
			case T__152:
			case T__153:
			case T__154:
			case T__155:
			case T__156:
			case T__157:
			case T__158:
			case T__159:
			case T__160:
			case T__161:
			case T__162:
			case T__163:
			case T__164:
			case T__165:
			case T__166:
			case T__167:
			case T__168:
			case T__169:
			case T__170:
			case T__171:
			case T__172:
			case T__173:
			case T__174:
			case T__175:
			case T__176:
			case T__177:
			case T__178:
			case T__179:
			case T__180:
			case T__181:
			case T__182:
			case T__183:
			case T__184:
			case T__185:
			case T__186:
			case T__187:
			case T__188:
			case T__189:
			case T__190:
			case T__191:
			case T__192:
			case T__193:
			case T__194:
			case T__195:
			case T__196:
			case T__197:
			case T__198:
			case T__199:
			case T__200:
			case T__201:
			case T__202:
			case T__203:
			case T__204:
			case T__205:
			case T__206:
			case T__207:
			case T__208:
			case T__209:
			case T__210:
			case T__211:
			case T__212:
			case T__213:
			case T__214:
			case T__215:
			case T__216:
			case T__217:
			case T__218:
			case T__219:
			case T__220:
			case T__221:
			case T__222:
			case T__223:
			case T__224:
			case T__225:
			case T__226:
			case T__227:
			case T__228:
			case T__229:
			case T__230:
			case T__231:
			case T__232:
			case T__233:
			case T__234:
			case T__235:
			case T__236:
			case T__237:
			case T__238:
			case T__239:
			case T__240:
			case T__241:
			case T__242:
			case T__243:
			case T__244:
			case T__245:
			case T__246:
			case T__247:
			case T__248:
			case T__249:
			case T__250:
			case T__251:
			case T__252:
			case T__253:
			case T__254:
			case T__255:
			case T__256:
			case T__257:
			case T__258:
			case T__259:
			case T__260:
			case T__261:
			case T__262:
			case T__263:
			case T__264:
			case T__265:
			case T__266:
			case T__267:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case Alignof:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Const_cast:
			case Decltype:
			case Delete:
			case Double:
			case Dynamic_cast:
			case False:
			case Float:
			case Int:
			case Long:
			case New:
			case Noexcept:
			case Nullptr:
			case Operator:
			case Reinterpret_cast:
			case Short:
			case Signed:
			case Sizeof:
			case Static_cast:
			case This:
			case Throw:
			case True:
			case Typeid_:
			case Typename_:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case PlusPlus:
			case MinusMinus:
			case Doublecolon:
			case Identifier:
			case Integerliteral:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1156; expression(0);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1157; bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpstatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(CPP14Parser.Break, 0); }
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public ITerminalNode Continue() { return GetToken(CPP14Parser.Continue, 0); }
		public ITerminalNode Return() { return GetToken(CPP14Parser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ITerminalNode Goto() { return GetToken(CPP14Parser.Goto, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public JumpstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterJumpstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitJumpstatement(this);
		}
	}

	[RuleVersion(0)]
	public JumpstatementContext jumpstatement() {
		JumpstatementContext _localctx = new JumpstatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_jumpstatement);
		int _la;
		try {
			State = 1176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1160; Match(Break);
				State = 1161; Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1162; Match(Continue);
				State = 1163; Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1164; Match(Return);
				State = 1166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (This - 320)) | (1L << (Throw - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
					{
					State = 1165; expression(0);
					}
				}

				State = 1168; Match(Semi);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1169; Match(Return);
				State = 1170; bracedinitlist();
				State = 1171; Match(Semi);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1173; Match(Goto);
				State = 1174; Match(Identifier);
				State = 1175; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationstatementContext : ParserRuleContext {
		public BlockdeclarationContext blockdeclaration() {
			return GetRuleContext<BlockdeclarationContext>(0);
		}
		public DeclarationstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclarationstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclarationstatement(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationstatementContext declarationstatement() {
		DeclarationstatementContext _localctx = new DeclarationstatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_declarationstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1178; blockdeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationseqContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public DeclarationseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclarationseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclarationseq(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationseqContext declarationseq() {
		return declarationseq(0);
	}

	private DeclarationseqContext declarationseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationseqContext _localctx = new DeclarationseqContext(Context, _parentState);
		DeclarationseqContext _prevctx = _localctx;
		int _startState = 122;
		EnterRecursionRule(_localctx, 122, RULE_declarationseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1181; declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1187;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarationseq);
					State = 1183;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1184; declaration();
					}
					} 
				}
				State = 1189;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public BlockdeclarationContext blockdeclaration() {
			return GetRuleContext<BlockdeclarationContext>(0);
		}
		public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		public TemplatedeclarationContext templatedeclaration() {
			return GetRuleContext<TemplatedeclarationContext>(0);
		}
		public ExplicitinstantiationContext explicitinstantiation() {
			return GetRuleContext<ExplicitinstantiationContext>(0);
		}
		public ExplicitspecializationContext explicitspecialization() {
			return GetRuleContext<ExplicitspecializationContext>(0);
		}
		public LinkagespecificationContext linkagespecification() {
			return GetRuleContext<LinkagespecificationContext>(0);
		}
		public NamespacedefinitionContext namespacedefinition() {
			return GetRuleContext<NamespacedefinitionContext>(0);
		}
		public EmptydeclarationContext emptydeclaration() {
			return GetRuleContext<EmptydeclarationContext>(0);
		}
		public AttributedeclarationContext attributedeclaration() {
			return GetRuleContext<AttributedeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_declaration);
		try {
			State = 1199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1190; blockdeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1191; functiondefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1192; templatedeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1193; explicitinstantiation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1194; explicitspecialization();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1195; linkagespecification();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1196; namespacedefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1197; emptydeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1198; attributedeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockdeclarationContext : ParserRuleContext {
		public SimpledeclarationContext simpledeclaration() {
			return GetRuleContext<SimpledeclarationContext>(0);
		}
		public AsmdefinitionContext asmdefinition() {
			return GetRuleContext<AsmdefinitionContext>(0);
		}
		public NamespacealiasdefinitionContext namespacealiasdefinition() {
			return GetRuleContext<NamespacealiasdefinitionContext>(0);
		}
		public UsingdeclarationContext usingdeclaration() {
			return GetRuleContext<UsingdeclarationContext>(0);
		}
		public UsingdirectiveContext usingdirective() {
			return GetRuleContext<UsingdirectiveContext>(0);
		}
		public Static_assertdeclarationContext static_assertdeclaration() {
			return GetRuleContext<Static_assertdeclarationContext>(0);
		}
		public AliasdeclarationContext aliasdeclaration() {
			return GetRuleContext<AliasdeclarationContext>(0);
		}
		public OpaqueenumdeclarationContext opaqueenumdeclaration() {
			return GetRuleContext<OpaqueenumdeclarationContext>(0);
		}
		public BlockdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBlockdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBlockdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public BlockdeclarationContext blockdeclaration() {
		BlockdeclarationContext _localctx = new BlockdeclarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_blockdeclaration);
		try {
			State = 1209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1201; simpledeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1202; asmdefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1203; namespacealiasdefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1204; usingdeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1205; usingdirective();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1206; static_assertdeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1207; aliasdeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1208; opaqueenumdeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasdeclarationContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public AliasdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAliasdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAliasdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AliasdeclarationContext aliasdeclaration() {
		AliasdeclarationContext _localctx = new AliasdeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_aliasdeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1211; Match(Using);
			State = 1212; Match(Identifier);
			State = 1214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1213; attributespecifierseq(0);
				}
			}

			State = 1216; Match(Assign);
			State = 1217; thetypeid();
			State = 1218; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpledeclarationContext : ParserRuleContext {
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public InitdeclaratorlistContext initdeclaratorlist() {
			return GetRuleContext<InitdeclaratorlistContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public SimpledeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpledeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimpledeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimpledeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SimpledeclarationContext simpledeclaration() {
		SimpledeclarationContext _localctx = new SimpledeclarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_simpledeclaration);
		int _la;
		try {
			State = 1234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__100:
			case T__101:
			case T__102:
			case T__103:
			case T__104:
			case T__105:
			case T__106:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__112:
			case T__113:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__126:
			case T__127:
			case T__128:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__134:
			case T__135:
			case T__136:
			case T__137:
			case T__138:
			case T__139:
			case T__140:
			case T__141:
			case T__142:
			case T__143:
			case T__144:
			case T__145:
			case T__146:
			case T__147:
			case T__148:
			case T__149:
			case T__150:
			case T__151:
			case T__152:
			case T__153:
			case T__154:
			case T__155:
			case T__156:
			case T__157:
			case T__158:
			case T__159:
			case T__160:
			case T__161:
			case T__162:
			case T__163:
			case T__164:
			case T__165:
			case T__166:
			case T__167:
			case T__168:
			case T__169:
			case T__170:
			case T__171:
			case T__172:
			case T__173:
			case T__174:
			case T__175:
			case T__176:
			case T__177:
			case T__178:
			case T__179:
			case T__180:
			case T__181:
			case T__182:
			case T__183:
			case T__184:
			case T__185:
			case T__186:
			case T__187:
			case T__188:
			case T__189:
			case T__190:
			case T__191:
			case T__192:
			case T__193:
			case T__194:
			case T__195:
			case T__196:
			case T__197:
			case T__198:
			case T__199:
			case T__200:
			case T__201:
			case T__202:
			case T__203:
			case T__204:
			case T__205:
			case T__206:
			case T__207:
			case T__208:
			case T__209:
			case T__210:
			case T__211:
			case T__212:
			case T__213:
			case T__214:
			case T__215:
			case T__216:
			case T__217:
			case T__218:
			case T__219:
			case T__220:
			case T__221:
			case T__222:
			case T__223:
			case T__224:
			case T__225:
			case T__226:
			case T__227:
			case T__228:
			case T__229:
			case T__230:
			case T__231:
			case T__232:
			case T__233:
			case T__234:
			case T__235:
			case T__236:
			case T__237:
			case T__238:
			case T__239:
			case T__240:
			case T__241:
			case T__242:
			case T__243:
			case T__244:
			case T__245:
			case T__246:
			case T__247:
			case T__248:
			case T__249:
			case T__250:
			case T__251:
			case T__252:
			case T__253:
			case T__254:
			case T__255:
			case T__256:
			case T__257:
			case T__258:
			case T__259:
			case T__260:
			case T__261:
			case T__262:
			case T__263:
			case T__264:
			case T__265:
			case T__266:
			case T__267:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Decltype:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case Struct:
			case Thread_local:
			case Typedef:
			case Typename_:
			case Union:
			case Unsigned:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case Star:
			case And:
			case Tilde:
			case Doublecolon:
			case Semi:
			case Ellipsis:
			case SAL_NAME:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1221;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
				case 1:
					{
					State = 1220; declspecifierseq();
					}
					break;
				}
				State = 1224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2 || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (Decltype - 294)) | (1L << (Operator - 294)) | (1L << (LeftParen - 294)))) != 0) || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & ((1L << (Star - 361)) | (1L << (And - 361)) | (1L << (Tilde - 361)) | (1L << (Doublecolon - 361)) | (1L << (Ellipsis - 361)) | (1L << (Identifier - 361)))) != 0)) {
					{
					State = 1223; initdeclaratorlist(0);
					}
				}

				State = 1226; Match(Semi);
				}
				break;
			case Alignas:
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1227; attributespecifierseq(0);
				State = 1229;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 1228; declspecifierseq();
					}
					break;
				}
				State = 1231; initdeclaratorlist(0);
				State = 1232; Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_assertdeclarationContext : ParserRuleContext {
		public ITerminalNode Static_assert() { return GetToken(CPP14Parser.Static_assert, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public Static_assertdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_assertdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStatic_assertdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStatic_assertdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Static_assertdeclarationContext static_assertdeclaration() {
		Static_assertdeclarationContext _localctx = new Static_assertdeclarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_static_assertdeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1236; Match(Static_assert);
			State = 1237; Match(LeftParen);
			State = 1238; constantexpression();
			State = 1239; Match(Comma);
			State = 1240; Match(Stringliteral);
			State = 1241; Match(RightParen);
			State = 1242; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptydeclarationContext : ParserRuleContext {
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public EmptydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptydeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEmptydeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEmptydeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EmptydeclarationContext emptydeclaration() {
		EmptydeclarationContext _localctx = new EmptydeclarationContext(Context, State);
		EnterRule(_localctx, 134, RULE_emptydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1244; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributedeclarationContext : ParserRuleContext {
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AttributedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributedeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributedeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributedeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AttributedeclarationContext attributedeclaration() {
		AttributedeclarationContext _localctx = new AttributedeclarationContext(Context, State);
		EnterRule(_localctx, 136, RULE_attributedeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1246; attributespecifierseq(0);
			State = 1247; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclspecifierContext : ParserRuleContext {
		public Sal_statementContext sal_statement() {
			return GetRuleContext<Sal_statementContext>(0);
		}
		public Microsoft_linkageContext microsoft_linkage() {
			return GetRuleContext<Microsoft_linkageContext>(0);
		}
		public StorageclassspecifierContext storageclassspecifier() {
			return GetRuleContext<StorageclassspecifierContext>(0);
		}
		public TypespecifierContext typespecifier() {
			return GetRuleContext<TypespecifierContext>(0);
		}
		public FunctionspecifierContext functionspecifier() {
			return GetRuleContext<FunctionspecifierContext>(0);
		}
		public ITerminalNode Friend() { return GetToken(CPP14Parser.Friend, 0); }
		public ITerminalNode Typedef() { return GetToken(CPP14Parser.Typedef, 0); }
		public ITerminalNode Constexpr() { return GetToken(CPP14Parser.Constexpr, 0); }
		public DeclspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclspecifier(this);
		}
	}

	[RuleVersion(0)]
	public DeclspecifierContext declspecifier() {
		DeclspecifierContext _localctx = new DeclspecifierContext(Context, State);
		EnterRule(_localctx, 138, RULE_declspecifier);
		try {
			State = 1257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1249; sal_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1250; microsoft_linkage();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1251; storageclassspecifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1252; typespecifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1253; functionspecifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1254; Match(Friend);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1255; Match(Typedef);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1256; Match(Constexpr);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Microsoft_linkageContext : ParserRuleContext {
		public Decl_specContext decl_spec() {
			return GetRuleContext<Decl_specContext>(0);
		}
		public Microsoft_linkageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_microsoft_linkage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMicrosoft_linkage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMicrosoft_linkage(this);
		}
	}

	[RuleVersion(0)]
	public Microsoft_linkageContext microsoft_linkage() {
		Microsoft_linkageContext _localctx = new Microsoft_linkageContext(Context, State);
		EnterRule(_localctx, 140, RULE_microsoft_linkage);
		try {
			State = 1262;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1259; Match(T__6);
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1260; decl_spec();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1261; Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclspecifierseqContext : ParserRuleContext {
		public DeclspecifierContext declspecifier() {
			return GetRuleContext<DeclspecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public DeclspecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declspecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclspecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclspecifierseq(this);
		}
	}

	[RuleVersion(0)]
	public DeclspecifierseqContext declspecifierseq() {
		DeclspecifierseqContext _localctx = new DeclspecifierseqContext(Context, State);
		EnterRule(_localctx, 142, RULE_declspecifierseq);
		try {
			State = 1271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1264; declspecifier();
				State = 1266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
				case 1:
					{
					State = 1265; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1268; declspecifier();
				State = 1269; declspecifierseq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageclassspecifierContext : ParserRuleContext {
		public ITerminalNode Register() { return GetToken(CPP14Parser.Register, 0); }
		public ITerminalNode Static() { return GetToken(CPP14Parser.Static, 0); }
		public ITerminalNode Thread_local() { return GetToken(CPP14Parser.Thread_local, 0); }
		public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		public Microsoft_storageContext microsoft_storage() {
			return GetRuleContext<Microsoft_storageContext>(0);
		}
		public StorageclassspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageclassspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStorageclassspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStorageclassspecifier(this);
		}
	}

	[RuleVersion(0)]
	public StorageclassspecifierContext storageclassspecifier() {
		StorageclassspecifierContext _localctx = new StorageclassspecifierContext(Context, State);
		EnterRule(_localctx, 144, RULE_storageclassspecifier);
		try {
			State = 1279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Register:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1273; Match(Register);
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1274; Match(Static);
				}
				break;
			case Thread_local:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1275; Match(Thread_local);
				}
				break;
			case Extern:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1276; Match(Extern);
				}
				break;
			case Mutable:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1277; Match(Mutable);
				}
				break;
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1278; microsoft_storage();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sal_statementContext : ParserRuleContext {
		public ITerminalNode SAL_NAME() { return GetToken(CPP14Parser.SAL_NAME, 0); }
		public Sal_exprContext sal_expr() {
			return GetRuleContext<Sal_exprContext>(0);
		}
		public Sal_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sal_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSal_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSal_statement(this);
		}
	}

	[RuleVersion(0)]
	public Sal_statementContext sal_statement() {
		Sal_statementContext _localctx = new Sal_statementContext(Context, State);
		EnterRule(_localctx, 146, RULE_sal_statement);
		try {
			State = 1297;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SAL_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1281; Match(SAL_NAME);
				State = 1283;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 1282; sal_expr();
					}
					break;
				}
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1285; Match(T__8);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1286; Match(T__9);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1287; Match(T__10);
				State = 1289;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
				case 1:
					{
					State = 1288; sal_expr();
					}
					break;
				}
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1291; Match(T__11);
				State = 1293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
				case 1:
					{
					State = 1292; sal_expr();
					}
					break;
				}
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1295; Match(T__12);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1296; Match(T__13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sal_exprContext : ParserRuleContext {
		public ITerminalNode[] LeftParen() { return GetTokens(CPP14Parser.LeftParen); }
		public ITerminalNode LeftParen(int i) {
			return GetToken(CPP14Parser.LeftParen, i);
		}
		public ITerminalNode[] RightParen() { return GetTokens(CPP14Parser.RightParen); }
		public ITerminalNode RightParen(int i) {
			return GetToken(CPP14Parser.RightParen, i);
		}
		public Sal_exprContext[] sal_expr() {
			return GetRuleContexts<Sal_exprContext>();
		}
		public Sal_exprContext sal_expr(int i) {
			return GetRuleContext<Sal_exprContext>(i);
		}
		public Sal_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sal_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSal_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSal_expr(this);
		}
	}

	[RuleVersion(0)]
	public Sal_exprContext sal_expr() {
		Sal_exprContext _localctx = new Sal_exprContext(Context, State);
		EnterRule(_localctx, 148, RULE_sal_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299; Match(LeftParen);
			State = 1304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (MultiLineMacro - 256)) | (1L << (Directive - 256)) | (1L << (Alignas - 256)) | (1L << (Alignof - 256)) | (1L << (Asm - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Break - 256)) | (1L << (Case - 256)) | (1L << (Catch - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Class - 256)) | (1L << (Const - 256)) | (1L << (Constexpr - 256)) | (1L << (Const_cast - 256)) | (1L << (Continue - 256)) | (1L << (Decltype - 256)) | (1L << (Default - 256)) | (1L << (Delete - 256)) | (1L << (Do - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (Else - 256)) | (1L << (Enum - 256)) | (1L << (Explicit - 256)) | (1L << (Export - 256)) | (1L << (Extern - 256)) | (1L << (False - 256)) | (1L << (Final - 256)) | (1L << (Float - 256)) | (1L << (For - 256)) | (1L << (Friend - 256)) | (1L << (Goto - 256)) | (1L << (If - 256)) | (1L << (Inline - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (Mutable - 256)) | (1L << (Namespace - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Override - 320)) | (1L << (Private - 320)) | (1L << (Protected - 320)) | (1L << (Public - 320)) | (1L << (Register - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Return - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static - 320)) | (1L << (Static_assert - 320)) | (1L << (Static_cast - 320)) | (1L << (Struct - 320)) | (1L << (Switch - 320)) | (1L << (Template - 320)) | (1L << (This - 320)) | (1L << (Thread_local - 320)) | (1L << (Throw - 320)) | (1L << (True - 320)) | (1L << (Try - 320)) | (1L << (Typedef - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Union - 320)) | (1L << (Unsigned - 320)) | (1L << (Using - 320)) | (1L << (Virtual - 320)) | (1L << (Void - 320)) | (1L << (Volatile - 320)) | (1L << (Wchar - 320)) | (1L << (While - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (RightBracket - 320)) | (1L << (LeftBrace - 320)) | (1L << (RightBrace - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (Div - 320)) | (1L << (Mod - 320)) | (1L << (Caret - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)) | (1L << (Not - 320)) | (1L << (Assign - 320)) | (1L << (Less - 320)) | (1L << (Greater - 320)) | (1L << (PlusAssign - 320)) | (1L << (MinusAssign - 320)) | (1L << (StarAssign - 320)) | (1L << (DivAssign - 320)) | (1L << (ModAssign - 320)) | (1L << (XorAssign - 320)) | (1L << (AndAssign - 320)) | (1L << (OrAssign - 320)) | (1L << (LeftShift - 320)) | (1L << (RightShift - 320)) | (1L << (LeftShiftAssign - 320)) | (1L << (RightShiftAssign - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (Equal - 384)) | (1L << (NotEqual - 384)) | (1L << (LessEqual - 384)) | (1L << (GreaterEqual - 384)) | (1L << (AndAnd - 384)) | (1L << (OrOr - 384)) | (1L << (PlusPlus - 384)) | (1L << (MinusMinus - 384)) | (1L << (Comma - 384)) | (1L << (ArrowStar - 384)) | (1L << (Arrow - 384)) | (1L << (Question - 384)) | (1L << (Colon - 384)) | (1L << (Doublecolon - 384)) | (1L << (Semi - 384)) | (1L << (Dot - 384)) | (1L << (DotStar - 384)) | (1L << (Ellipsis - 384)) | (1L << (SAL_NAME - 384)) | (1L << (Identifier - 384)) | (1L << (Integerliteral - 384)) | (1L << (Decimalliteral - 384)) | (1L << (Octalliteral - 384)) | (1L << (Hexadecimalliteral - 384)) | (1L << (Binaryliteral - 384)) | (1L << (Integersuffix - 384)) | (1L << (Characterliteral - 384)) | (1L << (Floatingliteral - 384)) | (1L << (Stringliteral - 384)) | (1L << (Userdefinedintegerliteral - 384)) | (1L << (Userdefinedfloatingliteral - 384)) | (1L << (Userdefinedstringliteral - 384)) | (1L << (Userdefinedcharacterliteral - 384)) | (1L << (Whitespace - 384)) | (1L << (Newline - 384)) | (1L << (BlockComment - 384)) | (1L << (LineComment - 384)))) != 0)) {
				{
				State = 1302;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
				case T__2:
				case T__3:
				case T__4:
				case T__5:
				case T__6:
				case T__7:
				case T__8:
				case T__9:
				case T__10:
				case T__11:
				case T__12:
				case T__13:
				case T__14:
				case T__15:
				case T__16:
				case T__17:
				case T__18:
				case T__19:
				case T__20:
				case T__21:
				case T__22:
				case T__23:
				case T__24:
				case T__25:
				case T__26:
				case T__27:
				case T__28:
				case T__29:
				case T__30:
				case T__31:
				case T__32:
				case T__33:
				case T__34:
				case T__35:
				case T__36:
				case T__37:
				case T__38:
				case T__39:
				case T__40:
				case T__41:
				case T__42:
				case T__43:
				case T__44:
				case T__45:
				case T__46:
				case T__47:
				case T__48:
				case T__49:
				case T__50:
				case T__51:
				case T__52:
				case T__53:
				case T__54:
				case T__55:
				case T__56:
				case T__57:
				case T__58:
				case T__59:
				case T__60:
				case T__61:
				case T__62:
				case T__63:
				case T__64:
				case T__65:
				case T__66:
				case T__67:
				case T__68:
				case T__69:
				case T__70:
				case T__71:
				case T__72:
				case T__73:
				case T__74:
				case T__75:
				case T__76:
				case T__77:
				case T__78:
				case T__79:
				case T__80:
				case T__81:
				case T__82:
				case T__83:
				case T__84:
				case T__85:
				case T__86:
				case T__87:
				case T__88:
				case T__89:
				case T__90:
				case T__91:
				case T__92:
				case T__93:
				case T__94:
				case T__95:
				case T__96:
				case T__97:
				case T__98:
				case T__99:
				case T__100:
				case T__101:
				case T__102:
				case T__103:
				case T__104:
				case T__105:
				case T__106:
				case T__107:
				case T__108:
				case T__109:
				case T__110:
				case T__111:
				case T__112:
				case T__113:
				case T__114:
				case T__115:
				case T__116:
				case T__117:
				case T__118:
				case T__119:
				case T__120:
				case T__121:
				case T__122:
				case T__123:
				case T__124:
				case T__125:
				case T__126:
				case T__127:
				case T__128:
				case T__129:
				case T__130:
				case T__131:
				case T__132:
				case T__133:
				case T__134:
				case T__135:
				case T__136:
				case T__137:
				case T__138:
				case T__139:
				case T__140:
				case T__141:
				case T__142:
				case T__143:
				case T__144:
				case T__145:
				case T__146:
				case T__147:
				case T__148:
				case T__149:
				case T__150:
				case T__151:
				case T__152:
				case T__153:
				case T__154:
				case T__155:
				case T__156:
				case T__157:
				case T__158:
				case T__159:
				case T__160:
				case T__161:
				case T__162:
				case T__163:
				case T__164:
				case T__165:
				case T__166:
				case T__167:
				case T__168:
				case T__169:
				case T__170:
				case T__171:
				case T__172:
				case T__173:
				case T__174:
				case T__175:
				case T__176:
				case T__177:
				case T__178:
				case T__179:
				case T__180:
				case T__181:
				case T__182:
				case T__183:
				case T__184:
				case T__185:
				case T__186:
				case T__187:
				case T__188:
				case T__189:
				case T__190:
				case T__191:
				case T__192:
				case T__193:
				case T__194:
				case T__195:
				case T__196:
				case T__197:
				case T__198:
				case T__199:
				case T__200:
				case T__201:
				case T__202:
				case T__203:
				case T__204:
				case T__205:
				case T__206:
				case T__207:
				case T__208:
				case T__209:
				case T__210:
				case T__211:
				case T__212:
				case T__213:
				case T__214:
				case T__215:
				case T__216:
				case T__217:
				case T__218:
				case T__219:
				case T__220:
				case T__221:
				case T__222:
				case T__223:
				case T__224:
				case T__225:
				case T__226:
				case T__227:
				case T__228:
				case T__229:
				case T__230:
				case T__231:
				case T__232:
				case T__233:
				case T__234:
				case T__235:
				case T__236:
				case T__237:
				case T__238:
				case T__239:
				case T__240:
				case T__241:
				case T__242:
				case T__243:
				case T__244:
				case T__245:
				case T__246:
				case T__247:
				case T__248:
				case T__249:
				case T__250:
				case T__251:
				case T__252:
				case T__253:
				case T__254:
				case T__255:
				case T__256:
				case T__257:
				case T__258:
				case T__259:
				case T__260:
				case T__261:
				case T__262:
				case T__263:
				case T__264:
				case T__265:
				case T__266:
				case T__267:
				case T__268:
				case T__269:
				case T__270:
				case T__271:
				case T__272:
				case T__273:
				case T__274:
				case MultiLineMacro:
				case Directive:
				case Alignas:
				case Alignof:
				case Asm:
				case Auto:
				case Bool:
				case Break:
				case Case:
				case Catch:
				case Char:
				case Char16:
				case Char32:
				case Class:
				case Const:
				case Constexpr:
				case Const_cast:
				case Continue:
				case Decltype:
				case Default:
				case Delete:
				case Do:
				case Double:
				case Dynamic_cast:
				case Else:
				case Enum:
				case Explicit:
				case Export:
				case Extern:
				case False:
				case Final:
				case Float:
				case For:
				case Friend:
				case Goto:
				case If:
				case Inline:
				case Int:
				case Long:
				case Mutable:
				case Namespace:
				case New:
				case Noexcept:
				case Nullptr:
				case Operator:
				case Override:
				case Private:
				case Protected:
				case Public:
				case Register:
				case Reinterpret_cast:
				case Return:
				case Short:
				case Signed:
				case Sizeof:
				case Static:
				case Static_assert:
				case Static_cast:
				case Struct:
				case Switch:
				case Template:
				case This:
				case Thread_local:
				case Throw:
				case True:
				case Try:
				case Typedef:
				case Typeid_:
				case Typename_:
				case Union:
				case Unsigned:
				case Using:
				case Virtual:
				case Void:
				case Volatile:
				case Wchar:
				case While:
				case LeftBracket:
				case RightBracket:
				case LeftBrace:
				case RightBrace:
				case Plus:
				case Minus:
				case Star:
				case Div:
				case Mod:
				case Caret:
				case And:
				case Or:
				case Tilde:
				case Not:
				case Assign:
				case Less:
				case Greater:
				case PlusAssign:
				case MinusAssign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case XorAssign:
				case AndAssign:
				case OrAssign:
				case LeftShift:
				case RightShift:
				case LeftShiftAssign:
				case RightShiftAssign:
				case Equal:
				case NotEqual:
				case LessEqual:
				case GreaterEqual:
				case AndAnd:
				case OrOr:
				case PlusPlus:
				case MinusMinus:
				case Comma:
				case ArrowStar:
				case Arrow:
				case Question:
				case Colon:
				case Doublecolon:
				case Semi:
				case Dot:
				case DotStar:
				case Ellipsis:
				case SAL_NAME:
				case Identifier:
				case Integerliteral:
				case Decimalliteral:
				case Octalliteral:
				case Hexadecimalliteral:
				case Binaryliteral:
				case Integersuffix:
				case Characterliteral:
				case Floatingliteral:
				case Stringliteral:
				case Userdefinedintegerliteral:
				case Userdefinedfloatingliteral:
				case Userdefinedstringliteral:
				case Userdefinedcharacterliteral:
				case Whitespace:
				case Newline:
				case BlockComment:
				case LineComment:
					{
					State = 1300;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==LeftParen || _la==RightParen) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case LeftParen:
					{
					State = 1301; sal_expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1307; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Microsoft_storageContext : ParserRuleContext {
		public Microsoft_storageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_microsoft_storage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMicrosoft_storage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMicrosoft_storage(this);
		}
	}

	[RuleVersion(0)]
	public Microsoft_storageContext microsoft_storage() {
		Microsoft_storageContext _localctx = new Microsoft_storageContext(Context, State);
		EnterRule(_localctx, 150, RULE_microsoft_storage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_specContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public Decl_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDecl_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDecl_spec(this);
		}
	}

	[RuleVersion(0)]
	public Decl_specContext decl_spec() {
		Decl_specContext _localctx = new Decl_specContext(Context, State);
		EnterRule(_localctx, 152, RULE_decl_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1311; Match(T__46);
			State = 1312; Match(LeftParen);
			State = 1313; Match(Identifier);
			State = 1314; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionspecifierContext : ParserRuleContext {
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		public ITerminalNode Explicit() { return GetToken(CPP14Parser.Explicit, 0); }
		public FunctionspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctionspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctionspecifier(this);
		}
	}

	[RuleVersion(0)]
	public FunctionspecifierContext functionspecifier() {
		FunctionspecifierContext _localctx = new FunctionspecifierContext(Context, State);
		EnterRule(_localctx, 154, RULE_functionspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 302)) & ~0x3f) == 0 && ((1L << (_la - 302)) & ((1L << (Explicit - 302)) | (1L << (Inline - 302)) | (1L << (Virtual - 302)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefnameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TypedefnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypedefname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypedefname(this);
		}
	}

	[RuleVersion(0)]
	public TypedefnameContext typedefname() {
		TypedefnameContext _localctx = new TypedefnameContext(Context, State);
		EnterRule(_localctx, 156, RULE_typedefname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1318; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecifierContext : ParserRuleContext {
		public TrailingtypespecifierContext trailingtypespecifier() {
			return GetRuleContext<TrailingtypespecifierContext>(0);
		}
		public ClassspecifierContext classspecifier() {
			return GetRuleContext<ClassspecifierContext>(0);
		}
		public EnumspecifierContext enumspecifier() {
			return GetRuleContext<EnumspecifierContext>(0);
		}
		public TypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypespecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypespecifierContext typespecifier() {
		TypespecifierContext _localctx = new TypespecifierContext(Context, State);
		EnterRule(_localctx, 158, RULE_typespecifier);
		try {
			State = 1323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1320; trailingtypespecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1321; classspecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1322; enumspecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Microsoft_typesContext : ParserRuleContext {
		public ITerminalNode Wchar() { return GetToken(CPP14Parser.Wchar, 0); }
		public Microsoft_typesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_microsoft_types; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMicrosoft_types(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMicrosoft_types(this);
		}
	}

	[RuleVersion(0)]
	public Microsoft_typesContext microsoft_types() {
		Microsoft_typesContext _localctx = new Microsoft_typesContext(Context, State);
		EnterRule(_localctx, 160, RULE_microsoft_types);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1325;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & ((1L << (T__41 - 42)) | (1L << (T__47 - 42)) | (1L << (T__48 - 42)) | (1L << (T__49 - 42)) | (1L << (T__50 - 42)) | (1L << (T__51 - 42)) | (1L << (T__52 - 42)) | (1L << (T__53 - 42)) | (1L << (T__54 - 42)) | (1L << (T__55 - 42)) | (1L << (T__56 - 42)) | (1L << (T__57 - 42)) | (1L << (T__58 - 42)) | (1L << (T__59 - 42)) | (1L << (T__60 - 42)) | (1L << (T__61 - 42)) | (1L << (T__62 - 42)) | (1L << (T__63 - 42)) | (1L << (T__64 - 42)) | (1L << (T__65 - 42)) | (1L << (T__66 - 42)) | (1L << (T__67 - 42)) | (1L << (T__68 - 42)) | (1L << (T__69 - 42)) | (1L << (T__70 - 42)) | (1L << (T__71 - 42)) | (1L << (T__72 - 42)) | (1L << (T__73 - 42)) | (1L << (T__74 - 42)) | (1L << (T__75 - 42)) | (1L << (T__76 - 42)) | (1L << (T__77 - 42)) | (1L << (T__78 - 42)) | (1L << (T__79 - 42)) | (1L << (T__80 - 42)) | (1L << (T__81 - 42)) | (1L << (T__82 - 42)) | (1L << (T__83 - 42)) | (1L << (T__84 - 42)) | (1L << (T__85 - 42)) | (1L << (T__86 - 42)) | (1L << (T__87 - 42)) | (1L << (T__88 - 42)) | (1L << (T__89 - 42)) | (1L << (T__90 - 42)) | (1L << (T__91 - 42)) | (1L << (T__92 - 42)) | (1L << (T__93 - 42)) | (1L << (T__94 - 42)) | (1L << (T__95 - 42)) | (1L << (T__96 - 42)) | (1L << (T__97 - 42)) | (1L << (T__98 - 42)) | (1L << (T__99 - 42)) | (1L << (T__100 - 42)) | (1L << (T__101 - 42)) | (1L << (T__102 - 42)) | (1L << (T__103 - 42)) | (1L << (T__104 - 42)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (T__105 - 106)) | (1L << (T__106 - 106)) | (1L << (T__107 - 106)) | (1L << (T__108 - 106)) | (1L << (T__109 - 106)) | (1L << (T__110 - 106)) | (1L << (T__111 - 106)) | (1L << (T__112 - 106)) | (1L << (T__113 - 106)) | (1L << (T__114 - 106)) | (1L << (T__115 - 106)) | (1L << (T__116 - 106)) | (1L << (T__117 - 106)) | (1L << (T__118 - 106)) | (1L << (T__119 - 106)) | (1L << (T__120 - 106)) | (1L << (T__121 - 106)) | (1L << (T__122 - 106)) | (1L << (T__123 - 106)) | (1L << (T__124 - 106)) | (1L << (T__125 - 106)) | (1L << (T__126 - 106)) | (1L << (T__127 - 106)) | (1L << (T__128 - 106)) | (1L << (T__129 - 106)) | (1L << (T__130 - 106)) | (1L << (T__131 - 106)) | (1L << (T__132 - 106)) | (1L << (T__133 - 106)) | (1L << (T__134 - 106)) | (1L << (T__135 - 106)) | (1L << (T__136 - 106)) | (1L << (T__137 - 106)) | (1L << (T__138 - 106)) | (1L << (T__139 - 106)) | (1L << (T__140 - 106)) | (1L << (T__141 - 106)) | (1L << (T__142 - 106)) | (1L << (T__143 - 106)) | (1L << (T__144 - 106)) | (1L << (T__145 - 106)) | (1L << (T__146 - 106)) | (1L << (T__147 - 106)) | (1L << (T__148 - 106)) | (1L << (T__149 - 106)) | (1L << (T__150 - 106)) | (1L << (T__151 - 106)) | (1L << (T__152 - 106)) | (1L << (T__153 - 106)) | (1L << (T__154 - 106)) | (1L << (T__155 - 106)) | (1L << (T__156 - 106)) | (1L << (T__157 - 106)) | (1L << (T__158 - 106)) | (1L << (T__159 - 106)) | (1L << (T__160 - 106)) | (1L << (T__161 - 106)) | (1L << (T__162 - 106)) | (1L << (T__163 - 106)) | (1L << (T__164 - 106)) | (1L << (T__165 - 106)) | (1L << (T__166 - 106)) | (1L << (T__167 - 106)) | (1L << (T__168 - 106)))) != 0) || ((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (T__169 - 170)) | (1L << (T__170 - 170)) | (1L << (T__171 - 170)) | (1L << (T__172 - 170)) | (1L << (T__173 - 170)) | (1L << (T__174 - 170)) | (1L << (T__175 - 170)) | (1L << (T__176 - 170)) | (1L << (T__177 - 170)) | (1L << (T__178 - 170)) | (1L << (T__179 - 170)) | (1L << (T__180 - 170)) | (1L << (T__181 - 170)) | (1L << (T__182 - 170)) | (1L << (T__183 - 170)) | (1L << (T__184 - 170)) | (1L << (T__185 - 170)) | (1L << (T__186 - 170)) | (1L << (T__187 - 170)) | (1L << (T__188 - 170)) | (1L << (T__189 - 170)) | (1L << (T__190 - 170)) | (1L << (T__191 - 170)) | (1L << (T__192 - 170)) | (1L << (T__193 - 170)) | (1L << (T__194 - 170)) | (1L << (T__195 - 170)) | (1L << (T__196 - 170)) | (1L << (T__197 - 170)) | (1L << (T__198 - 170)) | (1L << (T__199 - 170)) | (1L << (T__200 - 170)) | (1L << (T__201 - 170)) | (1L << (T__202 - 170)) | (1L << (T__203 - 170)) | (1L << (T__204 - 170)) | (1L << (T__205 - 170)) | (1L << (T__206 - 170)) | (1L << (T__207 - 170)) | (1L << (T__208 - 170)) | (1L << (T__209 - 170)) | (1L << (T__210 - 170)) | (1L << (T__211 - 170)) | (1L << (T__212 - 170)) | (1L << (T__213 - 170)) | (1L << (T__214 - 170)) | (1L << (T__215 - 170)) | (1L << (T__216 - 170)) | (1L << (T__217 - 170)) | (1L << (T__218 - 170)) | (1L << (T__219 - 170)) | (1L << (T__220 - 170)) | (1L << (T__221 - 170)) | (1L << (T__222 - 170)) | (1L << (T__223 - 170)) | (1L << (T__224 - 170)) | (1L << (T__225 - 170)) | (1L << (T__226 - 170)) | (1L << (T__227 - 170)) | (1L << (T__228 - 170)) | (1L << (T__229 - 170)) | (1L << (T__230 - 170)) | (1L << (T__231 - 170)) | (1L << (T__232 - 170)))) != 0) || ((((_la - 234)) & ~0x3f) == 0 && ((1L << (_la - 234)) & ((1L << (T__233 - 234)) | (1L << (T__234 - 234)) | (1L << (T__235 - 234)) | (1L << (T__236 - 234)) | (1L << (T__237 - 234)) | (1L << (T__238 - 234)) | (1L << (T__239 - 234)) | (1L << (T__240 - 234)) | (1L << (T__241 - 234)) | (1L << (T__242 - 234)) | (1L << (T__243 - 234)) | (1L << (T__244 - 234)) | (1L << (T__245 - 234)) | (1L << (T__246 - 234)) | (1L << (T__247 - 234)) | (1L << (T__248 - 234)) | (1L << (T__249 - 234)) | (1L << (T__250 - 234)) | (1L << (T__251 - 234)) | (1L << (T__252 - 234)) | (1L << (T__253 - 234)) | (1L << (T__254 - 234)) | (1L << (T__255 - 234)) | (1L << (T__256 - 234)) | (1L << (T__257 - 234)) | (1L << (T__258 - 234)) | (1L << (T__259 - 234)) | (1L << (T__260 - 234)) | (1L << (T__261 - 234)) | (1L << (T__262 - 234)) | (1L << (T__263 - 234)) | (1L << (T__264 - 234)) | (1L << (T__265 - 234)) | (1L << (T__266 - 234)) | (1L << (T__267 - 234)) | (1L << (T__268 - 234)) | (1L << (T__269 - 234)) | (1L << (T__270 - 234)) | (1L << (T__271 - 234)) | (1L << (T__272 - 234)) | (1L << (T__273 - 234)) | (1L << (T__274 - 234)))) != 0) || _la==Wchar) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingtypespecifierContext : ParserRuleContext {
		public SimpletypespecifierContext simpletypespecifier() {
			return GetRuleContext<SimpletypespecifierContext>(0);
		}
		public ElaboratedtypespecifierContext elaboratedtypespecifier() {
			return GetRuleContext<ElaboratedtypespecifierContext>(0);
		}
		public TypenamespecifierContext typenamespecifier() {
			return GetRuleContext<TypenamespecifierContext>(0);
		}
		public CvqualifierContext cvqualifier() {
			return GetRuleContext<CvqualifierContext>(0);
		}
		public TrailingtypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingtypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTrailingtypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTrailingtypespecifier(this);
		}
	}

	[RuleVersion(0)]
	public TrailingtypespecifierContext trailingtypespecifier() {
		TrailingtypespecifierContext _localctx = new TrailingtypespecifierContext(Context, State);
		EnterRule(_localctx, 162, RULE_trailingtypespecifier);
		try {
			State = 1331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__41:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__100:
			case T__101:
			case T__102:
			case T__103:
			case T__104:
			case T__105:
			case T__106:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__112:
			case T__113:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__126:
			case T__127:
			case T__128:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__134:
			case T__135:
			case T__136:
			case T__137:
			case T__138:
			case T__139:
			case T__140:
			case T__141:
			case T__142:
			case T__143:
			case T__144:
			case T__145:
			case T__146:
			case T__147:
			case T__148:
			case T__149:
			case T__150:
			case T__151:
			case T__152:
			case T__153:
			case T__154:
			case T__155:
			case T__156:
			case T__157:
			case T__158:
			case T__159:
			case T__160:
			case T__161:
			case T__162:
			case T__163:
			case T__164:
			case T__165:
			case T__166:
			case T__167:
			case T__168:
			case T__169:
			case T__170:
			case T__171:
			case T__172:
			case T__173:
			case T__174:
			case T__175:
			case T__176:
			case T__177:
			case T__178:
			case T__179:
			case T__180:
			case T__181:
			case T__182:
			case T__183:
			case T__184:
			case T__185:
			case T__186:
			case T__187:
			case T__188:
			case T__189:
			case T__190:
			case T__191:
			case T__192:
			case T__193:
			case T__194:
			case T__195:
			case T__196:
			case T__197:
			case T__198:
			case T__199:
			case T__200:
			case T__201:
			case T__202:
			case T__203:
			case T__204:
			case T__205:
			case T__206:
			case T__207:
			case T__208:
			case T__209:
			case T__210:
			case T__211:
			case T__212:
			case T__213:
			case T__214:
			case T__215:
			case T__216:
			case T__217:
			case T__218:
			case T__219:
			case T__220:
			case T__221:
			case T__222:
			case T__223:
			case T__224:
			case T__225:
			case T__226:
			case T__227:
			case T__228:
			case T__229:
			case T__230:
			case T__231:
			case T__232:
			case T__233:
			case T__234:
			case T__235:
			case T__236:
			case T__237:
			case T__238:
			case T__239:
			case T__240:
			case T__241:
			case T__242:
			case T__243:
			case T__244:
			case T__245:
			case T__246:
			case T__247:
			case T__248:
			case T__249:
			case T__250:
			case T__251:
			case T__252:
			case T__253:
			case T__254:
			case T__255:
			case T__256:
			case T__257:
			case T__258:
			case T__259:
			case T__260:
			case T__261:
			case T__262:
			case T__263:
			case T__264:
			case T__265:
			case T__266:
			case T__267:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Decltype:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Wchar:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1327; simpletypespecifier();
				}
				break;
			case Class:
			case Enum:
			case Struct:
			case Union:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1328; elaboratedtypespecifier();
				}
				break;
			case Typename_:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1329; typenamespecifier();
				}
				break;
			case Const:
			case Volatile:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1330; cvqualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecifierseqContext : ParserRuleContext {
		public TypespecifierContext typespecifier() {
			return GetRuleContext<TypespecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public TypespecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypespecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypespecifierseq(this);
		}
	}

	[RuleVersion(0)]
	public TypespecifierseqContext typespecifierseq() {
		TypespecifierseqContext _localctx = new TypespecifierseqContext(Context, State);
		EnterRule(_localctx, 164, RULE_typespecifierseq);
		try {
			State = 1340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1333; typespecifier();
				State = 1335;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
				case 1:
					{
					State = 1334; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1337; typespecifier();
				State = 1338; typespecifierseq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingtypespecifierseqContext : ParserRuleContext {
		public TrailingtypespecifierContext trailingtypespecifier() {
			return GetRuleContext<TrailingtypespecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public TrailingtypespecifierseqContext trailingtypespecifierseq() {
			return GetRuleContext<TrailingtypespecifierseqContext>(0);
		}
		public TrailingtypespecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingtypespecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTrailingtypespecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTrailingtypespecifierseq(this);
		}
	}

	[RuleVersion(0)]
	public TrailingtypespecifierseqContext trailingtypespecifierseq() {
		TrailingtypespecifierseqContext _localctx = new TrailingtypespecifierseqContext(Context, State);
		EnterRule(_localctx, 166, RULE_trailingtypespecifierseq);
		try {
			State = 1349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1342; trailingtypespecifier();
				State = 1344;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
				case 1:
					{
					State = 1343; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1346; trailingtypespecifier();
				State = 1347; trailingtypespecifierseq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpletypespecifierContext : ParserRuleContext {
		public ThetypenameContext thetypename() {
			return GetRuleContext<ThetypenameContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public Microsoft_typesContext microsoft_types() {
			return GetRuleContext<Microsoft_typesContext>(0);
		}
		public ITerminalNode Char() { return GetToken(CPP14Parser.Char, 0); }
		public ITerminalNode Char16() { return GetToken(CPP14Parser.Char16, 0); }
		public ITerminalNode Char32() { return GetToken(CPP14Parser.Char32, 0); }
		public ITerminalNode Wchar() { return GetToken(CPP14Parser.Wchar, 0); }
		public ITerminalNode Bool() { return GetToken(CPP14Parser.Bool, 0); }
		public ITerminalNode Short() { return GetToken(CPP14Parser.Short, 0); }
		public ITerminalNode Int() { return GetToken(CPP14Parser.Int, 0); }
		public ITerminalNode Long() { return GetToken(CPP14Parser.Long, 0); }
		public ITerminalNode Signed() { return GetToken(CPP14Parser.Signed, 0); }
		public ITerminalNode Unsigned() { return GetToken(CPP14Parser.Unsigned, 0); }
		public ITerminalNode Float() { return GetToken(CPP14Parser.Float, 0); }
		public ITerminalNode Double() { return GetToken(CPP14Parser.Double, 0); }
		public ITerminalNode Void() { return GetToken(CPP14Parser.Void, 0); }
		public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public SimpletypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimpletypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimpletypespecifier(this);
		}
	}

	[RuleVersion(0)]
	public SimpletypespecifierContext simpletypespecifier() {
		SimpletypespecifierContext _localctx = new SimpletypespecifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_simpletypespecifier);
		try {
			State = 1375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1352;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
				case 1:
					{
					State = 1351; nestednamespecifier(0);
					}
					break;
				}
				State = 1354; thetypename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1355; nestednamespecifier(0);
				State = 1356; Match(Template);
				State = 1357; simpletemplateid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1359; microsoft_types();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1360; Match(Char);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1361; Match(Char16);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1362; Match(Char32);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1363; Match(Wchar);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1364; Match(Bool);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1365; Match(Short);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1366; Match(Int);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1367; Match(Long);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1368; Match(Signed);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1369; Match(Unsigned);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1370; Match(Float);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1371; Match(Double);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1372; Match(Void);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1373; Match(Auto);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1374; decltypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThetypenameContext : ParserRuleContext {
		public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		public EnumnameContext enumname() {
			return GetRuleContext<EnumnameContext>(0);
		}
		public TypedefnameContext typedefname() {
			return GetRuleContext<TypedefnameContext>(0);
		}
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ThetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thetypename; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterThetypename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitThetypename(this);
		}
	}

	[RuleVersion(0)]
	public ThetypenameContext thetypename() {
		ThetypenameContext _localctx = new ThetypenameContext(Context, State);
		EnterRule(_localctx, 170, RULE_thetypename);
		try {
			State = 1381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1377; classname();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1378; enumname();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1379; typedefname();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1380; simpletemplateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecltypespecifierContext : ParserRuleContext {
		public ITerminalNode Decltype() { return GetToken(CPP14Parser.Decltype, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		public DecltypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decltypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDecltypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDecltypespecifier(this);
		}
	}

	[RuleVersion(0)]
	public DecltypespecifierContext decltypespecifier() {
		DecltypespecifierContext _localctx = new DecltypespecifierContext(Context, State);
		EnterRule(_localctx, 172, RULE_decltypespecifier);
		try {
			State = 1392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1383; Match(Decltype);
				State = 1384; Match(LeftParen);
				State = 1385; expression(0);
				State = 1386; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1388; Match(Decltype);
				State = 1389; Match(LeftParen);
				State = 1390; Match(Auto);
				State = 1391; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElaboratedtypespecifierContext : ParserRuleContext {
		public ClasskeyContext classkey() {
			return GetRuleContext<ClasskeyContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		public ElaboratedtypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaboratedtypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterElaboratedtypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitElaboratedtypespecifier(this);
		}
	}

	[RuleVersion(0)]
	public ElaboratedtypespecifierContext elaboratedtypespecifier() {
		ElaboratedtypespecifierContext _localctx = new ElaboratedtypespecifierContext(Context, State);
		EnterRule(_localctx, 174, RULE_elaboratedtypespecifier);
		int _la;
		try {
			State = 1418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1394; classkey();
				State = 1396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1395; attributespecifierseq(0);
					}
				}

				State = 1399;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
				case 1:
					{
					State = 1398; nestednamespecifier(0);
					}
					break;
				}
				State = 1401; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1403; classkey();
				State = 1404; simpletemplateid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1406; classkey();
				State = 1407; nestednamespecifier(0);
				State = 1409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 1408; Match(Template);
					}
				}

				State = 1411; simpletemplateid();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1413; Match(Enum);
				State = 1415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
				case 1:
					{
					State = 1414; nestednamespecifier(0);
					}
					break;
				}
				State = 1417; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumnameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumname(this);
		}
	}

	[RuleVersion(0)]
	public EnumnameContext enumname() {
		EnumnameContext _localctx = new EnumnameContext(Context, State);
		EnterRule(_localctx, 176, RULE_enumname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1420; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumspecifierContext : ParserRuleContext {
		public EnumheadContext enumhead() {
			return GetRuleContext<EnumheadContext>(0);
		}
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public EnumeratorlistContext enumeratorlist() {
			return GetRuleContext<EnumeratorlistContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public EnumspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumspecifier(this);
		}
	}

	[RuleVersion(0)]
	public EnumspecifierContext enumspecifier() {
		EnumspecifierContext _localctx = new EnumspecifierContext(Context, State);
		EnterRule(_localctx, 178, RULE_enumspecifier);
		int _la;
		try {
			State = 1435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1422; enumhead();
				State = 1423; Match(LeftBrace);
				State = 1425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1424; enumeratorlist(0);
					}
				}

				State = 1427; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1429; enumhead();
				State = 1430; Match(LeftBrace);
				State = 1431; enumeratorlist(0);
				State = 1432; Match(Comma);
				State = 1433; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumheadContext : ParserRuleContext {
		public EnumkeyContext enumkey() {
			return GetRuleContext<EnumkeyContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumbaseContext enumbase() {
			return GetRuleContext<EnumbaseContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public EnumheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumhead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumhead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumhead(this);
		}
	}

	[RuleVersion(0)]
	public EnumheadContext enumhead() {
		EnumheadContext _localctx = new EnumheadContext(Context, State);
		EnterRule(_localctx, 180, RULE_enumhead);
		int _la;
		try {
			State = 1456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1437; enumkey();
				State = 1439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1438; attributespecifierseq(0);
					}
				}

				State = 1442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1441; Match(Identifier);
					}
				}

				State = 1445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1444; enumbase();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1447; enumkey();
				State = 1449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1448; attributespecifierseq(0);
					}
				}

				State = 1451; nestednamespecifier(0);
				State = 1452; Match(Identifier);
				State = 1454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1453; enumbase();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpaqueenumdeclarationContext : ParserRuleContext {
		public EnumkeyContext enumkey() {
			return GetRuleContext<EnumkeyContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public EnumbaseContext enumbase() {
			return GetRuleContext<EnumbaseContext>(0);
		}
		public OpaqueenumdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opaqueenumdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOpaqueenumdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOpaqueenumdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public OpaqueenumdeclarationContext opaqueenumdeclaration() {
		OpaqueenumdeclarationContext _localctx = new OpaqueenumdeclarationContext(Context, State);
		EnterRule(_localctx, 182, RULE_opaqueenumdeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1458; enumkey();
			State = 1460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1459; attributespecifierseq(0);
				}
			}

			State = 1462; Match(Identifier);
			State = 1464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1463; enumbase();
				}
			}

			State = 1466; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumkeyContext : ParserRuleContext {
		public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		public EnumkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumkey; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumkey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumkey(this);
		}
	}

	[RuleVersion(0)]
	public EnumkeyContext enumkey() {
		EnumkeyContext _localctx = new EnumkeyContext(Context, State);
		EnterRule(_localctx, 184, RULE_enumkey);
		try {
			State = 1473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1468; Match(Enum);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1469; Match(Enum);
				State = 1470; Match(Class);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1471; Match(Enum);
				State = 1472; Match(Struct);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumbaseContext : ParserRuleContext {
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public EnumbaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumbase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumbase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumbase(this);
		}
	}

	[RuleVersion(0)]
	public EnumbaseContext enumbase() {
		EnumbaseContext _localctx = new EnumbaseContext(Context, State);
		EnterRule(_localctx, 186, RULE_enumbase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1475; Match(Colon);
			State = 1476; typespecifierseq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorlistContext : ParserRuleContext {
		public EnumeratordefinitionContext enumeratordefinition() {
			return GetRuleContext<EnumeratordefinitionContext>(0);
		}
		public EnumeratorlistContext enumeratorlist() {
			return GetRuleContext<EnumeratorlistContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public EnumeratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumeratorlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumeratorlist(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorlistContext enumeratorlist() {
		return enumeratorlist(0);
	}

	private EnumeratorlistContext enumeratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EnumeratorlistContext _localctx = new EnumeratorlistContext(Context, _parentState);
		EnumeratorlistContext _prevctx = _localctx;
		int _startState = 188;
		EnterRecursionRule(_localctx, 188, RULE_enumeratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1479; enumeratordefinition();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1486;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EnumeratorlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_enumeratorlist);
					State = 1481;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1482; Match(Comma);
					State = 1483; enumeratordefinition();
					}
					} 
				}
				State = 1488;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EnumeratordefinitionContext : ParserRuleContext {
		public EnumeratorContext enumerator() {
			return GetRuleContext<EnumeratorContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public EnumeratordefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratordefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumeratordefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumeratordefinition(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratordefinitionContext enumeratordefinition() {
		EnumeratordefinitionContext _localctx = new EnumeratordefinitionContext(Context, State);
		EnterRule(_localctx, 190, RULE_enumeratordefinition);
		try {
			State = 1494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1489; enumerator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1490; enumerator();
				State = 1491; Match(Assign);
				State = 1492; constantexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 192, RULE_enumerator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1496; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacenameContext : ParserRuleContext {
		public OriginalnamespacenameContext originalnamespacename() {
			return GetRuleContext<OriginalnamespacenameContext>(0);
		}
		public NamespacealiasContext namespacealias() {
			return GetRuleContext<NamespacealiasContext>(0);
		}
		public NamespacenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacename; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacename(this);
		}
	}

	[RuleVersion(0)]
	public NamespacenameContext namespacename() {
		NamespacenameContext _localctx = new NamespacenameContext(Context, State);
		EnterRule(_localctx, 194, RULE_namespacename);
		try {
			State = 1500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1498; originalnamespacename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1499; namespacealias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OriginalnamespacenameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public OriginalnamespacenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originalnamespacename; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOriginalnamespacename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOriginalnamespacename(this);
		}
	}

	[RuleVersion(0)]
	public OriginalnamespacenameContext originalnamespacename() {
		OriginalnamespacenameContext _localctx = new OriginalnamespacenameContext(Context, State);
		EnterRule(_localctx, 196, RULE_originalnamespacename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1502; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacedefinitionContext : ParserRuleContext {
		public NamednamespacedefinitionContext namednamespacedefinition() {
			return GetRuleContext<NamednamespacedefinitionContext>(0);
		}
		public UnnamednamespacedefinitionContext unnamednamespacedefinition() {
			return GetRuleContext<UnnamednamespacedefinitionContext>(0);
		}
		public NamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacedefinition(this);
		}
	}

	[RuleVersion(0)]
	public NamespacedefinitionContext namespacedefinition() {
		NamespacedefinitionContext _localctx = new NamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 198, RULE_namespacedefinition);
		try {
			State = 1506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1504; namednamespacedefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1505; unnamednamespacedefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamednamespacedefinitionContext : ParserRuleContext {
		public OriginalnamespacedefinitionContext originalnamespacedefinition() {
			return GetRuleContext<OriginalnamespacedefinitionContext>(0);
		}
		public ExtensionnamespacedefinitionContext extensionnamespacedefinition() {
			return GetRuleContext<ExtensionnamespacedefinitionContext>(0);
		}
		public NamednamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namednamespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamednamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamednamespacedefinition(this);
		}
	}

	[RuleVersion(0)]
	public NamednamespacedefinitionContext namednamespacedefinition() {
		NamednamespacedefinitionContext _localctx = new NamednamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 200, RULE_namednamespacedefinition);
		try {
			State = 1510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1508; originalnamespacedefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1509; extensionnamespacedefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OriginalnamespacedefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public NamespacebodyContext namespacebody() {
			return GetRuleContext<NamespacebodyContext>(0);
		}
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public OriginalnamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originalnamespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOriginalnamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOriginalnamespacedefinition(this);
		}
	}

	[RuleVersion(0)]
	public OriginalnamespacedefinitionContext originalnamespacedefinition() {
		OriginalnamespacedefinitionContext _localctx = new OriginalnamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 202, RULE_originalnamespacedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1512; Match(Inline);
				}
			}

			State = 1515; Match(Namespace);
			State = 1516; Match(Identifier);
			State = 1517; Match(LeftBrace);
			State = 1518; namespacebody();
			State = 1519; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionnamespacedefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public OriginalnamespacenameContext originalnamespacename() {
			return GetRuleContext<OriginalnamespacenameContext>(0);
		}
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public NamespacebodyContext namespacebody() {
			return GetRuleContext<NamespacebodyContext>(0);
		}
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public ExtensionnamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionnamespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExtensionnamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExtensionnamespacedefinition(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionnamespacedefinitionContext extensionnamespacedefinition() {
		ExtensionnamespacedefinitionContext _localctx = new ExtensionnamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 204, RULE_extensionnamespacedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1521; Match(Inline);
				}
			}

			State = 1524; Match(Namespace);
			State = 1525; originalnamespacename();
			State = 1526; Match(LeftBrace);
			State = 1527; namespacebody();
			State = 1528; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnnamednamespacedefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public NamespacebodyContext namespacebody() {
			return GetRuleContext<NamespacebodyContext>(0);
		}
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public UnnamednamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnamednamespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnnamednamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnnamednamespacedefinition(this);
		}
	}

	[RuleVersion(0)]
	public UnnamednamespacedefinitionContext unnamednamespacedefinition() {
		UnnamednamespacedefinitionContext _localctx = new UnnamednamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 206, RULE_unnamednamespacedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1530; Match(Inline);
				}
			}

			State = 1533; Match(Namespace);
			State = 1534; Match(LeftBrace);
			State = 1535; namespacebody();
			State = 1536; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacebodyContext : ParserRuleContext {
		public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public NamespacebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacebody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacebody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacebody(this);
		}
	}

	[RuleVersion(0)]
	public NamespacebodyContext namespacebody() {
		NamespacebodyContext _localctx = new NamespacebodyContext(Context, State);
		EnterRule(_localctx, 208, RULE_namespacebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignas - 256)) | (1L << (Asm - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Class - 256)) | (1L << (Const - 256)) | (1L << (Constexpr - 256)) | (1L << (Decltype - 256)) | (1L << (Double - 256)) | (1L << (Enum - 256)) | (1L << (Explicit - 256)) | (1L << (Extern - 256)) | (1L << (Float - 256)) | (1L << (Friend - 256)) | (1L << (Inline - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (Mutable - 256)) | (1L << (Namespace - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Register - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Static - 320)) | (1L << (Static_assert - 320)) | (1L << (Struct - 320)) | (1L << (Template - 320)) | (1L << (Thread_local - 320)) | (1L << (Typedef - 320)) | (1L << (Typename_ - 320)) | (1L << (Union - 320)) | (1L << (Unsigned - 320)) | (1L << (Using - 320)) | (1L << (Virtual - 320)) | (1L << (Void - 320)) | (1L << (Volatile - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (Doublecolon - 397)) | (1L << (Semi - 397)) | (1L << (Ellipsis - 397)) | (1L << (SAL_NAME - 397)) | (1L << (Identifier - 397)))) != 0)) {
				{
				State = 1538; declarationseq(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacealiasContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public NamespacealiasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacealias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacealias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacealias(this);
		}
	}

	[RuleVersion(0)]
	public NamespacealiasContext namespacealias() {
		NamespacealiasContext _localctx = new NamespacealiasContext(Context, State);
		EnterRule(_localctx, 210, RULE_namespacealias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1541; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacealiasdefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public QualifiednamespacespecifierContext qualifiednamespacespecifier() {
			return GetRuleContext<QualifiednamespacespecifierContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public NamespacealiasdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacealiasdefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacealiasdefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacealiasdefinition(this);
		}
	}

	[RuleVersion(0)]
	public NamespacealiasdefinitionContext namespacealiasdefinition() {
		NamespacealiasdefinitionContext _localctx = new NamespacealiasdefinitionContext(Context, State);
		EnterRule(_localctx, 212, RULE_namespacealiasdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1543; Match(Namespace);
			State = 1544; Match(Identifier);
			State = 1545; Match(Assign);
			State = 1546; qualifiednamespacespecifier();
			State = 1547; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiednamespacespecifierContext : ParserRuleContext {
		public NamespacenameContext namespacename() {
			return GetRuleContext<NamespacenameContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public QualifiednamespacespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiednamespacespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterQualifiednamespacespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitQualifiednamespacespecifier(this);
		}
	}

	[RuleVersion(0)]
	public QualifiednamespacespecifierContext qualifiednamespacespecifier() {
		QualifiednamespacespecifierContext _localctx = new QualifiednamespacespecifierContext(Context, State);
		EnterRule(_localctx, 214, RULE_qualifiednamespacespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				{
				State = 1549; nestednamespecifier(0);
				}
				break;
			}
			State = 1552; namespacename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingdeclarationContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public UnqualifiedidContext unqualifiedid() {
			return GetRuleContext<UnqualifiedidContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public ITerminalNode Typename_() { return GetToken(CPP14Parser.Typename_, 0); }
		public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		public UsingdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUsingdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUsingdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public UsingdeclarationContext usingdeclaration() {
		UsingdeclarationContext _localctx = new UsingdeclarationContext(Context, State);
		EnterRule(_localctx, 216, RULE_usingdeclaration);
		int _la;
		try {
			State = 1567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1554; Match(Using);
				State = 1556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Typename_) {
					{
					State = 1555; Match(Typename_);
					}
				}

				State = 1558; nestednamespecifier(0);
				State = 1559; unqualifiedid();
				State = 1560; Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1562; Match(Using);
				State = 1563; Match(Doublecolon);
				State = 1564; unqualifiedid();
				State = 1565; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingdirectiveContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public NamespacenameContext namespacename() {
			return GetRuleContext<NamespacenameContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public UsingdirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingdirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUsingdirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUsingdirective(this);
		}
	}

	[RuleVersion(0)]
	public UsingdirectiveContext usingdirective() {
		UsingdirectiveContext _localctx = new UsingdirectiveContext(Context, State);
		EnterRule(_localctx, 218, RULE_usingdirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1569; attributespecifierseq(0);
				}
			}

			State = 1572; Match(Using);
			State = 1573; Match(Namespace);
			State = 1575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				{
				State = 1574; nestednamespecifier(0);
				}
				break;
			}
			State = 1577; namespacename();
			State = 1578; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmdefinitionContext : ParserRuleContext {
		public ITerminalNode Asm() { return GetToken(CPP14Parser.Asm, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AsmdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmdefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAsmdefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAsmdefinition(this);
		}
	}

	[RuleVersion(0)]
	public AsmdefinitionContext asmdefinition() {
		AsmdefinitionContext _localctx = new AsmdefinitionContext(Context, State);
		EnterRule(_localctx, 220, RULE_asmdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1580; Match(Asm);
			State = 1581; Match(LeftParen);
			State = 1582; Match(Stringliteral);
			State = 1583; Match(RightParen);
			State = 1584; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkagespecificationContext : ParserRuleContext {
		public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public LinkagespecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkagespecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLinkagespecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLinkagespecification(this);
		}
	}

	[RuleVersion(0)]
	public LinkagespecificationContext linkagespecification() {
		LinkagespecificationContext _localctx = new LinkagespecificationContext(Context, State);
		EnterRule(_localctx, 222, RULE_linkagespecification);
		int _la;
		try {
			State = 1596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1586; Match(Extern);
				State = 1587; Match(Stringliteral);
				State = 1588; Match(LeftBrace);
				State = 1590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignas - 256)) | (1L << (Asm - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Class - 256)) | (1L << (Const - 256)) | (1L << (Constexpr - 256)) | (1L << (Decltype - 256)) | (1L << (Double - 256)) | (1L << (Enum - 256)) | (1L << (Explicit - 256)) | (1L << (Extern - 256)) | (1L << (Float - 256)) | (1L << (Friend - 256)) | (1L << (Inline - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (Mutable - 256)) | (1L << (Namespace - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Register - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Static - 320)) | (1L << (Static_assert - 320)) | (1L << (Struct - 320)) | (1L << (Template - 320)) | (1L << (Thread_local - 320)) | (1L << (Typedef - 320)) | (1L << (Typename_ - 320)) | (1L << (Union - 320)) | (1L << (Unsigned - 320)) | (1L << (Using - 320)) | (1L << (Virtual - 320)) | (1L << (Void - 320)) | (1L << (Volatile - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (Doublecolon - 397)) | (1L << (Semi - 397)) | (1L << (Ellipsis - 397)) | (1L << (SAL_NAME - 397)) | (1L << (Identifier - 397)))) != 0)) {
					{
					State = 1589; declarationseq(0);
					}
				}

				State = 1592; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1593; Match(Extern);
				State = 1594; Match(Stringliteral);
				State = 1595; declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributespecifierseqContext : ParserRuleContext {
		public AttributespecifierContext attributespecifier() {
			return GetRuleContext<AttributespecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public AttributespecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributespecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributespecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributespecifierseq(this);
		}
	}

	[RuleVersion(0)]
	public AttributespecifierseqContext attributespecifierseq() {
		return attributespecifierseq(0);
	}

	private AttributespecifierseqContext attributespecifierseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AttributespecifierseqContext _localctx = new AttributespecifierseqContext(Context, _parentState);
		AttributespecifierseqContext _prevctx = _localctx;
		int _startState = 224;
		EnterRecursionRule(_localctx, 224, RULE_attributespecifierseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1599; attributespecifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1605;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttributespecifierseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_attributespecifierseq);
					State = 1601;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1602; attributespecifier();
					}
					} 
				}
				State = 1607;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AttributespecifierContext : ParserRuleContext {
		public ITerminalNode[] LeftBracket() { return GetTokens(CPP14Parser.LeftBracket); }
		public ITerminalNode LeftBracket(int i) {
			return GetToken(CPP14Parser.LeftBracket, i);
		}
		public AttributelistContext attributelist() {
			return GetRuleContext<AttributelistContext>(0);
		}
		public ITerminalNode[] RightBracket() { return GetTokens(CPP14Parser.RightBracket); }
		public ITerminalNode RightBracket(int i) {
			return GetToken(CPP14Parser.RightBracket, i);
		}
		public AlignmentspecifierContext alignmentspecifier() {
			return GetRuleContext<AlignmentspecifierContext>(0);
		}
		public AttributespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributespecifier(this);
		}
	}

	[RuleVersion(0)]
	public AttributespecifierContext attributespecifier() {
		AttributespecifierContext _localctx = new AttributespecifierContext(Context, State);
		EnterRule(_localctx, 226, RULE_attributespecifier);
		try {
			State = 1615;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1608; Match(LeftBracket);
				State = 1609; Match(LeftBracket);
				State = 1610; attributelist(0);
				State = 1611; Match(RightBracket);
				State = 1612; Match(RightBracket);
				}
				break;
			case Alignas:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1614; alignmentspecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignmentspecifierContext : ParserRuleContext {
		public ITerminalNode Alignas() { return GetToken(CPP14Parser.Alignas, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public AlignmentspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignmentspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAlignmentspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAlignmentspecifier(this);
		}
	}

	[RuleVersion(0)]
	public AlignmentspecifierContext alignmentspecifier() {
		AlignmentspecifierContext _localctx = new AlignmentspecifierContext(Context, State);
		EnterRule(_localctx, 228, RULE_alignmentspecifier);
		int _la;
		try {
			State = 1633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1617; Match(Alignas);
				State = 1618; Match(LeftParen);
				State = 1619; thetypeid();
				State = 1621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1620; Match(Ellipsis);
					}
				}

				State = 1623; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1625; Match(Alignas);
				State = 1626; Match(LeftParen);
				State = 1627; constantexpression();
				State = 1629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1628; Match(Ellipsis);
					}
				}

				State = 1631; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributelistContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public AttributelistContext attributelist() {
			return GetRuleContext<AttributelistContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public AttributelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributelist(this);
		}
	}

	[RuleVersion(0)]
	public AttributelistContext attributelist() {
		return attributelist(0);
	}

	private AttributelistContext attributelist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AttributelistContext _localctx = new AttributelistContext(Context, _parentState);
		AttributelistContext _prevctx = _localctx;
		int _startState = 230;
		EnterRecursionRule(_localctx, 230, RULE_attributelist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1642;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				{
				State = 1637;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
				case 1:
					{
					State = 1636; attribute();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1639; attribute();
				State = 1640; Match(Ellipsis);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1656;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1654;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
					case 1:
						{
						_localctx = new AttributelistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_attributelist);
						State = 1644;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1645; Match(Comma);
						State = 1647;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
						case 1:
							{
							State = 1646; attribute();
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new AttributelistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_attributelist);
						State = 1649;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1650; Match(Comma);
						State = 1651; attribute();
						State = 1652; Match(Ellipsis);
						}
						break;
					}
					} 
				}
				State = 1658;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public AttributetokenContext attributetoken() {
			return GetRuleContext<AttributetokenContext>(0);
		}
		public AttributeargumentclauseContext attributeargumentclause() {
			return GetRuleContext<AttributeargumentclauseContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 232, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1659; attributetoken();
			State = 1661;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				{
				State = 1660; attributeargumentclause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributetokenContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributescopedtokenContext attributescopedtoken() {
			return GetRuleContext<AttributescopedtokenContext>(0);
		}
		public AttributetokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributetoken; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributetoken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributetoken(this);
		}
	}

	[RuleVersion(0)]
	public AttributetokenContext attributetoken() {
		AttributetokenContext _localctx = new AttributetokenContext(Context, State);
		EnterRule(_localctx, 234, RULE_attributetoken);
		try {
			State = 1665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1663; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1664; attributescopedtoken();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributescopedtokenContext : ParserRuleContext {
		public AttributenamespaceContext attributenamespace() {
			return GetRuleContext<AttributenamespaceContext>(0);
		}
		public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributescopedtokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributescopedtoken; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributescopedtoken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributescopedtoken(this);
		}
	}

	[RuleVersion(0)]
	public AttributescopedtokenContext attributescopedtoken() {
		AttributescopedtokenContext _localctx = new AttributescopedtokenContext(Context, State);
		EnterRule(_localctx, 236, RULE_attributescopedtoken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1667; attributenamespace();
			State = 1668; Match(Doublecolon);
			State = 1669; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributenamespaceContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributenamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributenamespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributenamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributenamespace(this);
		}
	}

	[RuleVersion(0)]
	public AttributenamespaceContext attributenamespace() {
		AttributenamespaceContext _localctx = new AttributenamespaceContext(Context, State);
		EnterRule(_localctx, 238, RULE_attributenamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1671; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeargumentclauseContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public BalancedtokenseqContext balancedtokenseq() {
			return GetRuleContext<BalancedtokenseqContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public AttributeargumentclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeargumentclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributeargumentclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributeargumentclause(this);
		}
	}

	[RuleVersion(0)]
	public AttributeargumentclauseContext attributeargumentclause() {
		AttributeargumentclauseContext _localctx = new AttributeargumentclauseContext(Context, State);
		EnterRule(_localctx, 240, RULE_attributeargumentclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1673; Match(LeftParen);
			State = 1674; balancedtokenseq(0);
			State = 1675; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BalancedtokenseqContext : ParserRuleContext {
		public BalancedtokenContext balancedtoken() {
			return GetRuleContext<BalancedtokenContext>(0);
		}
		public BalancedtokenseqContext balancedtokenseq() {
			return GetRuleContext<BalancedtokenseqContext>(0);
		}
		public BalancedtokenseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedtokenseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBalancedtokenseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBalancedtokenseq(this);
		}
	}

	[RuleVersion(0)]
	public BalancedtokenseqContext balancedtokenseq() {
		return balancedtokenseq(0);
	}

	private BalancedtokenseqContext balancedtokenseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BalancedtokenseqContext _localctx = new BalancedtokenseqContext(Context, _parentState);
		BalancedtokenseqContext _prevctx = _localctx;
		int _startState = 242;
		EnterRecursionRule(_localctx, 242, RULE_balancedtokenseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1679;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				{
				State = 1678; balancedtoken();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1685;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BalancedtokenseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_balancedtokenseq);
					State = 1681;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1682; balancedtoken();
					}
					} 
				}
				State = 1687;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BalancedtokenContext : ParserRuleContext {
		public ITerminalNode[] LeftParen() { return GetTokens(CPP14Parser.LeftParen); }
		public ITerminalNode LeftParen(int i) {
			return GetToken(CPP14Parser.LeftParen, i);
		}
		public BalancedtokenseqContext balancedtokenseq() {
			return GetRuleContext<BalancedtokenseqContext>(0);
		}
		public ITerminalNode[] RightParen() { return GetTokens(CPP14Parser.RightParen); }
		public ITerminalNode RightParen(int i) {
			return GetToken(CPP14Parser.RightParen, i);
		}
		public ITerminalNode[] LeftBracket() { return GetTokens(CPP14Parser.LeftBracket); }
		public ITerminalNode LeftBracket(int i) {
			return GetToken(CPP14Parser.LeftBracket, i);
		}
		public ITerminalNode[] RightBracket() { return GetTokens(CPP14Parser.RightBracket); }
		public ITerminalNode RightBracket(int i) {
			return GetToken(CPP14Parser.RightBracket, i);
		}
		public ITerminalNode[] LeftBrace() { return GetTokens(CPP14Parser.LeftBrace); }
		public ITerminalNode LeftBrace(int i) {
			return GetToken(CPP14Parser.LeftBrace, i);
		}
		public ITerminalNode[] RightBrace() { return GetTokens(CPP14Parser.RightBrace); }
		public ITerminalNode RightBrace(int i) {
			return GetToken(CPP14Parser.RightBrace, i);
		}
		public BalancedtokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedtoken; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBalancedtoken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBalancedtoken(this);
		}
	}

	[RuleVersion(0)]
	public BalancedtokenContext balancedtoken() {
		BalancedtokenContext _localctx = new BalancedtokenContext(Context, State);
		EnterRule(_localctx, 244, RULE_balancedtoken);
		int _la;
		try {
			int _alt;
			State = 1705;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1688; Match(LeftParen);
				State = 1689; balancedtokenseq(0);
				State = 1690; Match(RightParen);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1692; Match(LeftBracket);
				State = 1693; balancedtokenseq(0);
				State = 1694; Match(RightBracket);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1696; Match(LeftBrace);
				State = 1697; balancedtokenseq(0);
				State = 1698; Match(RightBrace);
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__100:
			case T__101:
			case T__102:
			case T__103:
			case T__104:
			case T__105:
			case T__106:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__112:
			case T__113:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__126:
			case T__127:
			case T__128:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__134:
			case T__135:
			case T__136:
			case T__137:
			case T__138:
			case T__139:
			case T__140:
			case T__141:
			case T__142:
			case T__143:
			case T__144:
			case T__145:
			case T__146:
			case T__147:
			case T__148:
			case T__149:
			case T__150:
			case T__151:
			case T__152:
			case T__153:
			case T__154:
			case T__155:
			case T__156:
			case T__157:
			case T__158:
			case T__159:
			case T__160:
			case T__161:
			case T__162:
			case T__163:
			case T__164:
			case T__165:
			case T__166:
			case T__167:
			case T__168:
			case T__169:
			case T__170:
			case T__171:
			case T__172:
			case T__173:
			case T__174:
			case T__175:
			case T__176:
			case T__177:
			case T__178:
			case T__179:
			case T__180:
			case T__181:
			case T__182:
			case T__183:
			case T__184:
			case T__185:
			case T__186:
			case T__187:
			case T__188:
			case T__189:
			case T__190:
			case T__191:
			case T__192:
			case T__193:
			case T__194:
			case T__195:
			case T__196:
			case T__197:
			case T__198:
			case T__199:
			case T__200:
			case T__201:
			case T__202:
			case T__203:
			case T__204:
			case T__205:
			case T__206:
			case T__207:
			case T__208:
			case T__209:
			case T__210:
			case T__211:
			case T__212:
			case T__213:
			case T__214:
			case T__215:
			case T__216:
			case T__217:
			case T__218:
			case T__219:
			case T__220:
			case T__221:
			case T__222:
			case T__223:
			case T__224:
			case T__225:
			case T__226:
			case T__227:
			case T__228:
			case T__229:
			case T__230:
			case T__231:
			case T__232:
			case T__233:
			case T__234:
			case T__235:
			case T__236:
			case T__237:
			case T__238:
			case T__239:
			case T__240:
			case T__241:
			case T__242:
			case T__243:
			case T__244:
			case T__245:
			case T__246:
			case T__247:
			case T__248:
			case T__249:
			case T__250:
			case T__251:
			case T__252:
			case T__253:
			case T__254:
			case T__255:
			case T__256:
			case T__257:
			case T__258:
			case T__259:
			case T__260:
			case T__261:
			case T__262:
			case T__263:
			case T__264:
			case T__265:
			case T__266:
			case T__267:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case MultiLineMacro:
			case Directive:
			case Alignas:
			case Alignof:
			case Asm:
			case Auto:
			case Bool:
			case Break:
			case Case:
			case Catch:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Const_cast:
			case Continue:
			case Decltype:
			case Default:
			case Delete:
			case Do:
			case Double:
			case Dynamic_cast:
			case Else:
			case Enum:
			case Explicit:
			case Export:
			case Extern:
			case False:
			case Final:
			case Float:
			case For:
			case Friend:
			case Goto:
			case If:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Namespace:
			case New:
			case Noexcept:
			case Nullptr:
			case Operator:
			case Override:
			case Private:
			case Protected:
			case Public:
			case Register:
			case Reinterpret_cast:
			case Return:
			case Short:
			case Signed:
			case Sizeof:
			case Static:
			case Static_assert:
			case Static_cast:
			case Struct:
			case Switch:
			case Template:
			case This:
			case Thread_local:
			case Throw:
			case True:
			case Try:
			case Typedef:
			case Typeid_:
			case Typename_:
			case Union:
			case Unsigned:
			case Using:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case While:
			case Plus:
			case Minus:
			case Star:
			case Div:
			case Mod:
			case Caret:
			case And:
			case Or:
			case Tilde:
			case Not:
			case Assign:
			case Less:
			case Greater:
			case PlusAssign:
			case MinusAssign:
			case StarAssign:
			case DivAssign:
			case ModAssign:
			case XorAssign:
			case AndAssign:
			case OrAssign:
			case LeftShift:
			case RightShift:
			case LeftShiftAssign:
			case RightShiftAssign:
			case Equal:
			case NotEqual:
			case LessEqual:
			case GreaterEqual:
			case AndAnd:
			case OrOr:
			case PlusPlus:
			case MinusMinus:
			case Comma:
			case ArrowStar:
			case Arrow:
			case Question:
			case Colon:
			case Doublecolon:
			case Semi:
			case Dot:
			case DotStar:
			case Ellipsis:
			case SAL_NAME:
			case Identifier:
			case Integerliteral:
			case Decimalliteral:
			case Octalliteral:
			case Hexadecimalliteral:
			case Binaryliteral:
			case Integersuffix:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
			case Whitespace:
			case Newline:
			case BlockComment:
			case LineComment:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1701;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1700;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || (((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (LeftParen - 353)) | (1L << (RightParen - 353)) | (1L << (LeftBracket - 353)) | (1L << (RightBracket - 353)) | (1L << (LeftBrace - 353)) | (1L << (RightBrace - 353)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1703;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,175,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitdeclaratorlistContext : ParserRuleContext {
		public InitdeclaratorContext initdeclarator() {
			return GetRuleContext<InitdeclaratorContext>(0);
		}
		public InitdeclaratorlistContext initdeclaratorlist() {
			return GetRuleContext<InitdeclaratorlistContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public InitdeclaratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initdeclaratorlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitdeclaratorlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitdeclaratorlist(this);
		}
	}

	[RuleVersion(0)]
	public InitdeclaratorlistContext initdeclaratorlist() {
		return initdeclaratorlist(0);
	}

	private InitdeclaratorlistContext initdeclaratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitdeclaratorlistContext _localctx = new InitdeclaratorlistContext(Context, _parentState);
		InitdeclaratorlistContext _prevctx = _localctx;
		int _startState = 246;
		EnterRecursionRule(_localctx, 246, RULE_initdeclaratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1708; initdeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1715;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitdeclaratorlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initdeclaratorlist);
					State = 1710;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1711; Match(Comma);
					State = 1712; initdeclarator();
					}
					} 
				}
				State = 1717;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InitdeclaratorContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public InitdeclaratorContext initdeclarator() {
		InitdeclaratorContext _localctx = new InitdeclaratorContext(Context, State);
		EnterRule(_localctx, 248, RULE_initdeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1718; declarator();
			State = 1720;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 1719; initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public PtrdeclaratorContext ptrdeclarator() {
			return GetRuleContext<PtrdeclaratorContext>(0);
		}
		public NoptrdeclaratorContext noptrdeclarator() {
			return GetRuleContext<NoptrdeclaratorContext>(0);
		}
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public TrailingreturntypeContext trailingreturntype() {
			return GetRuleContext<TrailingreturntypeContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 250, RULE_declarator);
		try {
			State = 1727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1722; ptrdeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1723; noptrdeclarator(0);
				State = 1724; parametersandqualifiers();
				State = 1725; trailingreturntype();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrdeclaratorContext : ParserRuleContext {
		public NoptrdeclaratorContext noptrdeclarator() {
			return GetRuleContext<NoptrdeclaratorContext>(0);
		}
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public PtrdeclaratorContext ptrdeclarator() {
			return GetRuleContext<PtrdeclaratorContext>(0);
		}
		public PtrdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPtrdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPtrdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public PtrdeclaratorContext ptrdeclarator() {
		PtrdeclaratorContext _localctx = new PtrdeclaratorContext(Context, State);
		EnterRule(_localctx, 252, RULE_ptrdeclarator);
		try {
			State = 1733;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1729; noptrdeclarator(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1730; ptroperator();
				State = 1731; ptrdeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrdeclaratorContext : ParserRuleContext {
		public DeclaratoridContext declaratorid() {
			return GetRuleContext<DeclaratoridContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public PtrdeclaratorContext ptrdeclarator() {
			return GetRuleContext<PtrdeclaratorContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoptrdeclaratorContext noptrdeclarator() {
			return GetRuleContext<NoptrdeclaratorContext>(0);
		}
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public NoptrdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoptrdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoptrdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NoptrdeclaratorContext noptrdeclarator() {
		return noptrdeclarator(0);
	}

	private NoptrdeclaratorContext noptrdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrdeclaratorContext _localctx = new NoptrdeclaratorContext(Context, _parentState);
		NoptrdeclaratorContext _prevctx = _localctx;
		int _startState = 254;
		EnterRecursionRule(_localctx, 254, RULE_noptrdeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1744;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decltype:
			case Operator:
			case Tilde:
			case Doublecolon:
			case Ellipsis:
			case Identifier:
				{
				State = 1736; declaratorid();
				State = 1738;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
				case 1:
					{
					State = 1737; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				State = 1740; Match(LeftParen);
				State = 1741; ptrdeclarator();
				State = 1742; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1759;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1757;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
					case 1:
						{
						_localctx = new NoptrdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrdeclarator);
						State = 1746;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1747; parametersandqualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoptrdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrdeclarator);
						State = 1748;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1749; Match(LeftBracket);
						State = 1751;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (This - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
							{
							State = 1750; constantexpression();
							}
						}

						State = 1753; Match(RightBracket);
						State = 1755;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
						case 1:
							{
							State = 1754; attributespecifierseq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1761;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParametersandqualifiersContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ParameterdeclarationclauseContext parameterdeclarationclause() {
			return GetRuleContext<ParameterdeclarationclauseContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		public RefqualifierContext refqualifier() {
			return GetRuleContext<RefqualifierContext>(0);
		}
		public ExceptionspecificationContext exceptionspecification() {
			return GetRuleContext<ExceptionspecificationContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ParametersandqualifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersandqualifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParametersandqualifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParametersandqualifiers(this);
		}
	}

	[RuleVersion(0)]
	public ParametersandqualifiersContext parametersandqualifiers() {
		ParametersandqualifiersContext _localctx = new ParametersandqualifiersContext(Context, State);
		EnterRule(_localctx, 256, RULE_parametersandqualifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1762; Match(LeftParen);
			State = 1763; parameterdeclarationclause();
			State = 1764; Match(RightParen);
			State = 1766;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				{
				State = 1765; cvqualifierseq();
				}
				break;
			}
			State = 1769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				{
				State = 1768; refqualifier();
				}
				break;
			}
			State = 1772;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
			case 1:
				{
				State = 1771; exceptionspecification();
				}
				break;
			}
			State = 1775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				{
				State = 1774; attributespecifierseq(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingreturntypeContext : ParserRuleContext {
		public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		public TrailingtypespecifierseqContext trailingtypespecifierseq() {
			return GetRuleContext<TrailingtypespecifierseqContext>(0);
		}
		public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public TrailingreturntypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingreturntype; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTrailingreturntype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTrailingreturntype(this);
		}
	}

	[RuleVersion(0)]
	public TrailingreturntypeContext trailingreturntype() {
		TrailingreturntypeContext _localctx = new TrailingreturntypeContext(Context, State);
		EnterRule(_localctx, 258, RULE_trailingreturntype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1777; Match(Arrow);
			State = 1778; trailingtypespecifierseq();
			State = 1780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				{
				State = 1779; abstractdeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtroperatorContext : ParserRuleContext {
		public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public PtroperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptroperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPtroperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPtroperator(this);
		}
	}

	[RuleVersion(0)]
	public PtroperatorContext ptroperator() {
		PtroperatorContext _localctx = new PtroperatorContext(Context, State);
		EnterRule(_localctx, 260, RULE_ptroperator);
		try {
			State = 1805;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Star:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1782; Match(Star);
				State = 1784;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
				case 1:
					{
					State = 1783; attributespecifierseq(0);
					}
					break;
				}
				State = 1787;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
				case 1:
					{
					State = 1786; cvqualifierseq();
					}
					break;
				}
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1789; Match(And);
				State = 1791;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
				case 1:
					{
					State = 1790; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1793; Match(T__2);
				State = 1795;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
				case 1:
					{
					State = 1794; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case Decltype:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1797; nestednamespecifier(0);
				State = 1798; Match(Star);
				State = 1800;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
				case 1:
					{
					State = 1799; attributespecifierseq(0);
					}
					break;
				}
				State = 1803;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
				case 1:
					{
					State = 1802; cvqualifierseq();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvqualifierseqContext : ParserRuleContext {
		public CvqualifierContext cvqualifier() {
			return GetRuleContext<CvqualifierContext>(0);
		}
		public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		public CvqualifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvqualifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCvqualifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCvqualifierseq(this);
		}
	}

	[RuleVersion(0)]
	public CvqualifierseqContext cvqualifierseq() {
		CvqualifierseqContext _localctx = new CvqualifierseqContext(Context, State);
		EnterRule(_localctx, 262, RULE_cvqualifierseq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1807; cvqualifier();
			State = 1809;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				State = 1808; cvqualifierseq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvqualifierContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(CPP14Parser.Const, 0); }
		public ITerminalNode Volatile() { return GetToken(CPP14Parser.Volatile, 0); }
		public CvqualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvqualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCvqualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCvqualifier(this);
		}
	}

	[RuleVersion(0)]
	public CvqualifierContext cvqualifier() {
		CvqualifierContext _localctx = new CvqualifierContext(Context, State);
		EnterRule(_localctx, 264, RULE_cvqualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1811;
			_la = TokenStream.LA(1);
			if ( !(_la==Const || _la==Volatile) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefqualifierContext : ParserRuleContext {
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public RefqualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refqualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRefqualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRefqualifier(this);
		}
	}

	[RuleVersion(0)]
	public RefqualifierContext refqualifier() {
		RefqualifierContext _localctx = new RefqualifierContext(Context, State);
		EnterRule(_localctx, 266, RULE_refqualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1813;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==And) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratoridContext : ParserRuleContext {
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public DeclaratoridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaratorid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclaratorid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclaratorid(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratoridContext declaratorid() {
		DeclaratoridContext _localctx = new DeclaratoridContext(Context, State);
		EnterRule(_localctx, 268, RULE_declaratorid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1815; Match(Ellipsis);
				}
			}

			State = 1818; idexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThetypeidContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public ThetypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thetypeid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterThetypeid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitThetypeid(this);
		}
	}

	[RuleVersion(0)]
	public ThetypeidContext thetypeid() {
		ThetypeidContext _localctx = new ThetypeidContext(Context, State);
		EnterRule(_localctx, 270, RULE_thetypeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1820; typespecifierseq();
			State = 1822;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				{
				State = 1821; abstractdeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractdeclaratorContext : ParserRuleContext {
		public PtrabstractdeclaratorContext ptrabstractdeclarator() {
			return GetRuleContext<PtrabstractdeclaratorContext>(0);
		}
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public TrailingreturntypeContext trailingreturntype() {
			return GetRuleContext<TrailingreturntypeContext>(0);
		}
		public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
			return GetRuleContext<NoptrabstractdeclaratorContext>(0);
		}
		public AbstractpackdeclaratorContext abstractpackdeclarator() {
			return GetRuleContext<AbstractpackdeclaratorContext>(0);
		}
		public AbstractdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAbstractdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAbstractdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public AbstractdeclaratorContext abstractdeclarator() {
		AbstractdeclaratorContext _localctx = new AbstractdeclaratorContext(Context, State);
		EnterRule(_localctx, 272, RULE_abstractdeclarator);
		try {
			State = 1832;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1824; ptrabstractdeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1826;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
				case 1:
					{
					State = 1825; noptrabstractdeclarator(0);
					}
					break;
				}
				State = 1828; parametersandqualifiers();
				State = 1829; trailingreturntype();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1831; abstractpackdeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrabstractdeclaratorContext : ParserRuleContext {
		public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
			return GetRuleContext<NoptrabstractdeclaratorContext>(0);
		}
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public PtrabstractdeclaratorContext ptrabstractdeclarator() {
			return GetRuleContext<PtrabstractdeclaratorContext>(0);
		}
		public PtrabstractdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrabstractdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPtrabstractdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPtrabstractdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public PtrabstractdeclaratorContext ptrabstractdeclarator() {
		PtrabstractdeclaratorContext _localctx = new PtrabstractdeclaratorContext(Context, State);
		EnterRule(_localctx, 274, RULE_ptrabstractdeclarator);
		try {
			State = 1839;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1834; noptrabstractdeclarator(0);
				}
				break;
			case T__2:
			case Decltype:
			case Star:
			case And:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1835; ptroperator();
				State = 1837;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
				case 1:
					{
					State = 1836; ptrabstractdeclarator();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrabstractdeclaratorContext : ParserRuleContext {
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public PtrabstractdeclaratorContext ptrabstractdeclarator() {
			return GetRuleContext<PtrabstractdeclaratorContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
			return GetRuleContext<NoptrabstractdeclaratorContext>(0);
		}
		public NoptrabstractdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrabstractdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoptrabstractdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoptrabstractdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
		return noptrabstractdeclarator(0);
	}

	private NoptrabstractdeclaratorContext noptrabstractdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrabstractdeclaratorContext _localctx = new NoptrabstractdeclaratorContext(Context, _parentState);
		NoptrabstractdeclaratorContext _prevctx = _localctx;
		int _startState = 276;
		EnterRecursionRule(_localctx, 276, RULE_noptrabstractdeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1855;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				{
				State = 1842; parametersandqualifiers();
				}
				break;
			case 2:
				{
				State = 1843; Match(LeftBracket);
				State = 1845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (This - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
					{
					State = 1844; constantexpression();
					}
				}

				State = 1847; Match(RightBracket);
				State = 1849;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
				case 1:
					{
					State = 1848; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 1851; Match(LeftParen);
				State = 1852; ptrabstractdeclarator();
				State = 1853; Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1870;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1868;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
					case 1:
						{
						_localctx = new NoptrabstractdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractdeclarator);
						State = 1857;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1858; parametersandqualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoptrabstractdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractdeclarator);
						State = 1859;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1860; Match(LeftBracket);
						State = 1862;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (This - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
							{
							State = 1861; constantexpression();
							}
						}

						State = 1864; Match(RightBracket);
						State = 1866;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
						case 1:
							{
							State = 1865; attributespecifierseq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1872;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AbstractpackdeclaratorContext : ParserRuleContext {
		public NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator() {
			return GetRuleContext<NoptrabstractpackdeclaratorContext>(0);
		}
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public AbstractpackdeclaratorContext abstractpackdeclarator() {
			return GetRuleContext<AbstractpackdeclaratorContext>(0);
		}
		public AbstractpackdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractpackdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAbstractpackdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAbstractpackdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public AbstractpackdeclaratorContext abstractpackdeclarator() {
		AbstractpackdeclaratorContext _localctx = new AbstractpackdeclaratorContext(Context, State);
		EnterRule(_localctx, 278, RULE_abstractpackdeclarator);
		try {
			State = 1877;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ellipsis:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1873; noptrabstractpackdeclarator(0);
				}
				break;
			case T__2:
			case Decltype:
			case Star:
			case And:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1874; ptroperator();
				State = 1875; abstractpackdeclarator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrabstractpackdeclaratorContext : ParserRuleContext {
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator() {
			return GetRuleContext<NoptrabstractpackdeclaratorContext>(0);
		}
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public NoptrabstractpackdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrabstractpackdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoptrabstractpackdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoptrabstractpackdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator() {
		return noptrabstractpackdeclarator(0);
	}

	private NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrabstractpackdeclaratorContext _localctx = new NoptrabstractpackdeclaratorContext(Context, _parentState);
		NoptrabstractpackdeclaratorContext _prevctx = _localctx;
		int _startState = 280;
		EnterRecursionRule(_localctx, 280, RULE_noptrabstractpackdeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1880; Match(Ellipsis);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1895;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,217,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1893;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
					case 1:
						{
						_localctx = new NoptrabstractpackdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractpackdeclarator);
						State = 1882;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1883; parametersandqualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoptrabstractpackdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractpackdeclarator);
						State = 1884;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1885; Match(LeftBracket);
						State = 1887;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (This - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
							{
							State = 1886; constantexpression();
							}
						}

						State = 1889; Match(RightBracket);
						State = 1891;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
						case 1:
							{
							State = 1890; attributespecifierseq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1897;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,217,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterdeclarationclauseContext : ParserRuleContext {
		public ParameterdeclarationlistContext parameterdeclarationlist() {
			return GetRuleContext<ParameterdeclarationlistContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ParameterdeclarationclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterdeclarationclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParameterdeclarationclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParameterdeclarationclause(this);
		}
	}

	[RuleVersion(0)]
	public ParameterdeclarationclauseContext parameterdeclarationclause() {
		ParameterdeclarationclauseContext _localctx = new ParameterdeclarationclauseContext(Context, State);
		EnterRule(_localctx, 282, RULE_parameterdeclarationclause);
		int _la;
		try {
			State = 1908;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignas - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Class - 256)) | (1L << (Const - 256)) | (1L << (Constexpr - 256)) | (1L << (Decltype - 256)) | (1L << (Double - 256)) | (1L << (Enum - 256)) | (1L << (Explicit - 256)) | (1L << (Extern - 256)) | (1L << (Float - 256)) | (1L << (Friend - 256)) | (1L << (Inline - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (Mutable - 256)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (Register - 325)) | (1L << (Short - 325)) | (1L << (Signed - 325)) | (1L << (Static - 325)) | (1L << (Struct - 325)) | (1L << (Thread_local - 325)) | (1L << (Typedef - 325)) | (1L << (Typename_ - 325)) | (1L << (Union - 325)) | (1L << (Unsigned - 325)) | (1L << (Virtual - 325)) | (1L << (Void - 325)) | (1L << (Volatile - 325)) | (1L << (Wchar - 325)) | (1L << (LeftBracket - 325)))) != 0) || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (Doublecolon - 397)) | (1L << (SAL_NAME - 397)) | (1L << (Identifier - 397)))) != 0)) {
					{
					State = 1898; parameterdeclarationlist(0);
					}
				}

				State = 1902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1901; Match(Ellipsis);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1904; parameterdeclarationlist(0);
				State = 1905; Match(Comma);
				State = 1906; Match(Ellipsis);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterdeclarationlistContext : ParserRuleContext {
		public ParameterdeclarationContext parameterdeclaration() {
			return GetRuleContext<ParameterdeclarationContext>(0);
		}
		public ParameterdeclarationlistContext parameterdeclarationlist() {
			return GetRuleContext<ParameterdeclarationlistContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ParameterdeclarationlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterdeclarationlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParameterdeclarationlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParameterdeclarationlist(this);
		}
	}

	[RuleVersion(0)]
	public ParameterdeclarationlistContext parameterdeclarationlist() {
		return parameterdeclarationlist(0);
	}

	private ParameterdeclarationlistContext parameterdeclarationlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterdeclarationlistContext _localctx = new ParameterdeclarationlistContext(Context, _parentState);
		ParameterdeclarationlistContext _prevctx = _localctx;
		int _startState = 284;
		EnterRecursionRule(_localctx, 284, RULE_parameterdeclarationlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1911; parameterdeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1918;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterdeclarationlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterdeclarationlist);
					State = 1913;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1914; Match(Comma);
					State = 1915; parameterdeclaration();
					}
					} 
				}
				State = 1920;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterdeclarationContext : ParserRuleContext {
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public ParameterdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParameterdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParameterdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ParameterdeclarationContext parameterdeclaration() {
		ParameterdeclarationContext _localctx = new ParameterdeclarationContext(Context, State);
		EnterRule(_localctx, 286, RULE_parameterdeclaration);
		int _la;
		try {
			State = 1952;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1921; attributespecifierseq(0);
					}
				}

				State = 1924; declspecifierseq();
				State = 1925; declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1928;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1927; attributespecifierseq(0);
					}
				}

				State = 1930; declspecifierseq();
				State = 1931; declarator();
				State = 1932; Match(Assign);
				State = 1933; initializerclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1935; attributespecifierseq(0);
					}
				}

				State = 1938; declspecifierseq();
				State = 1940;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
				case 1:
					{
					State = 1939; abstractdeclarator();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1943;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1942; attributespecifierseq(0);
					}
				}

				State = 1945; declspecifierseq();
				State = 1947;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2 || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (Decltype - 294)) | (1L << (LeftParen - 294)) | (1L << (LeftBracket - 294)))) != 0) || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & ((1L << (Star - 361)) | (1L << (And - 361)) | (1L << (Doublecolon - 361)) | (1L << (Ellipsis - 361)) | (1L << (Identifier - 361)))) != 0)) {
					{
					State = 1946; abstractdeclarator();
					}
				}

				State = 1949; Match(Assign);
				State = 1950; initializerclause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public FunctionbodyContext functionbody() {
			return GetRuleContext<FunctionbodyContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public VirtspecifierseqContext virtspecifierseq() {
			return GetRuleContext<VirtspecifierseqContext>(0);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctiondefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctiondefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 288, RULE_functiondefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1955;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1954; attributespecifierseq(0);
				}
			}

			State = 1958;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				{
				State = 1957; declspecifierseq();
				}
				break;
			}
			State = 1960; declarator();
			State = 1962;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Final || _la==Override) {
				{
				State = 1961; virtspecifierseq(0);
				}
			}

			State = 1964; functionbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionbodyContext : ParserRuleContext {
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public CtorinitializerContext ctorinitializer() {
			return GetRuleContext<CtorinitializerContext>(0);
		}
		public FunctiontryblockContext functiontryblock() {
			return GetRuleContext<FunctiontryblockContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public FunctionbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctionbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctionbody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionbodyContext functionbody() {
		FunctionbodyContext _localctx = new FunctionbodyContext(Context, State);
		EnterRule(_localctx, 290, RULE_functionbody);
		int _la;
		try {
			State = 1977;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1966; ctorinitializer();
					}
				}

				State = 1969; compoundstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1970; functiontryblock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1971; Match(Assign);
				State = 1972; Match(Default);
				State = 1973; Match(Semi);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1974; Match(Assign);
				State = 1975; Match(Delete);
				State = 1976; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public BraceorequalinitializerContext braceorequalinitializer() {
			return GetRuleContext<BraceorequalinitializerContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 292, RULE_initializer);
		try {
			State = 1984;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1979; braceorequalinitializer();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1980; Match(LeftParen);
				State = 1981; expressionlist();
				State = 1982; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceorequalinitializerContext : ParserRuleContext {
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public BraceorequalinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceorequalinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBraceorequalinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBraceorequalinitializer(this);
		}
	}

	[RuleVersion(0)]
	public BraceorequalinitializerContext braceorequalinitializer() {
		BraceorequalinitializerContext _localctx = new BraceorequalinitializerContext(Context, State);
		EnterRule(_localctx, 294, RULE_braceorequalinitializer);
		try {
			State = 1989;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1986; Match(Assign);
				State = 1987; initializerclause();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1988; bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerclauseContext : ParserRuleContext {
		public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public InitializerclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitializerclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitializerclause(this);
		}
	}

	[RuleVersion(0)]
	public InitializerclauseContext initializerclause() {
		InitializerclauseContext _localctx = new InitializerclauseContext(Context, State);
		EnterRule(_localctx, 296, RULE_initializerclause);
		try {
			State = 1993;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__41:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__100:
			case T__101:
			case T__102:
			case T__103:
			case T__104:
			case T__105:
			case T__106:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__112:
			case T__113:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__126:
			case T__127:
			case T__128:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__134:
			case T__135:
			case T__136:
			case T__137:
			case T__138:
			case T__139:
			case T__140:
			case T__141:
			case T__142:
			case T__143:
			case T__144:
			case T__145:
			case T__146:
			case T__147:
			case T__148:
			case T__149:
			case T__150:
			case T__151:
			case T__152:
			case T__153:
			case T__154:
			case T__155:
			case T__156:
			case T__157:
			case T__158:
			case T__159:
			case T__160:
			case T__161:
			case T__162:
			case T__163:
			case T__164:
			case T__165:
			case T__166:
			case T__167:
			case T__168:
			case T__169:
			case T__170:
			case T__171:
			case T__172:
			case T__173:
			case T__174:
			case T__175:
			case T__176:
			case T__177:
			case T__178:
			case T__179:
			case T__180:
			case T__181:
			case T__182:
			case T__183:
			case T__184:
			case T__185:
			case T__186:
			case T__187:
			case T__188:
			case T__189:
			case T__190:
			case T__191:
			case T__192:
			case T__193:
			case T__194:
			case T__195:
			case T__196:
			case T__197:
			case T__198:
			case T__199:
			case T__200:
			case T__201:
			case T__202:
			case T__203:
			case T__204:
			case T__205:
			case T__206:
			case T__207:
			case T__208:
			case T__209:
			case T__210:
			case T__211:
			case T__212:
			case T__213:
			case T__214:
			case T__215:
			case T__216:
			case T__217:
			case T__218:
			case T__219:
			case T__220:
			case T__221:
			case T__222:
			case T__223:
			case T__224:
			case T__225:
			case T__226:
			case T__227:
			case T__228:
			case T__229:
			case T__230:
			case T__231:
			case T__232:
			case T__233:
			case T__234:
			case T__235:
			case T__236:
			case T__237:
			case T__238:
			case T__239:
			case T__240:
			case T__241:
			case T__242:
			case T__243:
			case T__244:
			case T__245:
			case T__246:
			case T__247:
			case T__248:
			case T__249:
			case T__250:
			case T__251:
			case T__252:
			case T__253:
			case T__254:
			case T__255:
			case T__256:
			case T__257:
			case T__258:
			case T__259:
			case T__260:
			case T__261:
			case T__262:
			case T__263:
			case T__264:
			case T__265:
			case T__266:
			case T__267:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case Alignof:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Const_cast:
			case Decltype:
			case Delete:
			case Double:
			case Dynamic_cast:
			case False:
			case Float:
			case Int:
			case Long:
			case New:
			case Noexcept:
			case Nullptr:
			case Operator:
			case Reinterpret_cast:
			case Short:
			case Signed:
			case Sizeof:
			case Static_cast:
			case This:
			case Throw:
			case True:
			case Typeid_:
			case Typename_:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case PlusPlus:
			case MinusMinus:
			case Doublecolon:
			case Identifier:
			case Integerliteral:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1991; assignmentexpression();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1992; bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerlistContext : ParserRuleContext {
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public InitializerlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitializerlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitializerlist(this);
		}
	}

	[RuleVersion(0)]
	public InitializerlistContext initializerlist() {
		return initializerlist(0);
	}

	private InitializerlistContext initializerlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitializerlistContext _localctx = new InitializerlistContext(Context, _parentState);
		InitializerlistContext _prevctx = _localctx;
		int _startState = 298;
		EnterRecursionRule(_localctx, 298, RULE_initializerlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1996; initializerclause();
			State = 1998;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				{
				State = 1997; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2008;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,239,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitializerlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initializerlist);
					State = 2000;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2001; Match(Comma);
					State = 2002; initializerclause();
					State = 2004;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
					case 1:
						{
						State = 2003; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2010;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,239,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracedinitlistContext : ParserRuleContext {
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public BracedinitlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracedinitlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBracedinitlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBracedinitlist(this);
		}
	}

	[RuleVersion(0)]
	public BracedinitlistContext bracedinitlist() {
		BracedinitlistContext _localctx = new BracedinitlistContext(Context, State);
		EnterRule(_localctx, 300, RULE_bracedinitlist);
		int _la;
		try {
			State = 2020;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2011; Match(LeftBrace);
				State = 2012; initializerlist(0);
				State = 2014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 2013; Match(Comma);
					}
				}

				State = 2016; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2018; Match(LeftBrace);
				State = 2019; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassnameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ClassnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassname(this);
		}
	}

	[RuleVersion(0)]
	public ClassnameContext classname() {
		ClassnameContext _localctx = new ClassnameContext(Context, State);
		EnterRule(_localctx, 302, RULE_classname);
		try {
			State = 2024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2022; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2023; simpletemplateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassspecifierContext : ParserRuleContext {
		public ClassheadContext classhead() {
			return GetRuleContext<ClassheadContext>(0);
		}
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public MemberspecificationContext memberspecification() {
			return GetRuleContext<MemberspecificationContext>(0);
		}
		public ClassspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassspecifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassspecifierContext classspecifier() {
		ClassspecifierContext _localctx = new ClassspecifierContext(Context, State);
		EnterRule(_localctx, 304, RULE_classspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2026; classhead();
			State = 2027; Match(LeftBrace);
			State = 2029;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignas - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Class - 256)) | (1L << (Const - 256)) | (1L << (Constexpr - 256)) | (1L << (Decltype - 256)) | (1L << (Double - 256)) | (1L << (Enum - 256)) | (1L << (Explicit - 256)) | (1L << (Extern - 256)) | (1L << (Float - 256)) | (1L << (Friend - 256)) | (1L << (Inline - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (Mutable - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Private - 320)) | (1L << (Protected - 320)) | (1L << (Public - 320)) | (1L << (Register - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Static - 320)) | (1L << (Static_assert - 320)) | (1L << (Struct - 320)) | (1L << (Template - 320)) | (1L << (Thread_local - 320)) | (1L << (Typedef - 320)) | (1L << (Typename_ - 320)) | (1L << (Union - 320)) | (1L << (Unsigned - 320)) | (1L << (Using - 320)) | (1L << (Virtual - 320)) | (1L << (Void - 320)) | (1L << (Volatile - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (Colon - 396)) | (1L << (Doublecolon - 396)) | (1L << (Semi - 396)) | (1L << (Ellipsis - 396)) | (1L << (SAL_NAME - 396)) | (1L << (Identifier - 396)))) != 0)) {
				{
				State = 2028; memberspecification();
				}
			}

			State = 2031; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassheadContext : ParserRuleContext {
		public ClasskeyContext classkey() {
			return GetRuleContext<ClasskeyContext>(0);
		}
		public ClassheadnameContext classheadname() {
			return GetRuleContext<ClassheadnameContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ClassvirtspecifierContext classvirtspecifier() {
			return GetRuleContext<ClassvirtspecifierContext>(0);
		}
		public BaseclauseContext baseclause() {
			return GetRuleContext<BaseclauseContext>(0);
		}
		public ClassheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classhead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClasshead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClasshead(this);
		}
	}

	[RuleVersion(0)]
	public ClassheadContext classhead() {
		ClassheadContext _localctx = new ClassheadContext(Context, State);
		EnterRule(_localctx, 306, RULE_classhead);
		int _la;
		try {
			State = 2051;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2033; classkey();
				State = 2035;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2034; attributespecifierseq(0);
					}
				}

				State = 2037; classheadname();
				State = 2039;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Final) {
					{
					State = 2038; classvirtspecifier();
					}
				}

				State = 2042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 2041; baseclause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2044; classkey();
				State = 2046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2045; attributespecifierseq(0);
					}
				}

				State = 2049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 2048; baseclause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassheadnameContext : ParserRuleContext {
		public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ClassheadnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classheadname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassheadname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassheadname(this);
		}
	}

	[RuleVersion(0)]
	public ClassheadnameContext classheadname() {
		ClassheadnameContext _localctx = new ClassheadnameContext(Context, State);
		EnterRule(_localctx, 308, RULE_classheadname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2054;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,250,Context) ) {
			case 1:
				{
				State = 2053; nestednamespecifier(0);
				}
				break;
			}
			State = 2056; classname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvirtspecifierContext : ParserRuleContext {
		public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public ClassvirtspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvirtspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassvirtspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassvirtspecifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassvirtspecifierContext classvirtspecifier() {
		ClassvirtspecifierContext _localctx = new ClassvirtspecifierContext(Context, State);
		EnterRule(_localctx, 310, RULE_classvirtspecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2058; Match(Final);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClasskeyContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		public ITerminalNode Union() { return GetToken(CPP14Parser.Union, 0); }
		public ClasskeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classkey; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClasskey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClasskey(this);
		}
	}

	[RuleVersion(0)]
	public ClasskeyContext classkey() {
		ClasskeyContext _localctx = new ClasskeyContext(Context, State);
		EnterRule(_localctx, 312, RULE_classkey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2060;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & ((1L << (Class - 289)) | (1L << (Struct - 289)) | (1L << (Union - 289)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberspecificationContext : ParserRuleContext {
		public MemberdeclarationContext memberdeclaration() {
			return GetRuleContext<MemberdeclarationContext>(0);
		}
		public MemberspecificationContext memberspecification() {
			return GetRuleContext<MemberspecificationContext>(0);
		}
		public AccessspecifierContext accessspecifier() {
			return GetRuleContext<AccessspecifierContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public MemberspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberspecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberspecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberspecification(this);
		}
	}

	[RuleVersion(0)]
	public MemberspecificationContext memberspecification() {
		MemberspecificationContext _localctx = new MemberspecificationContext(Context, State);
		EnterRule(_localctx, 314, RULE_memberspecification);
		int _la;
		try {
			State = 2071;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__100:
			case T__101:
			case T__102:
			case T__103:
			case T__104:
			case T__105:
			case T__106:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__112:
			case T__113:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__126:
			case T__127:
			case T__128:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__134:
			case T__135:
			case T__136:
			case T__137:
			case T__138:
			case T__139:
			case T__140:
			case T__141:
			case T__142:
			case T__143:
			case T__144:
			case T__145:
			case T__146:
			case T__147:
			case T__148:
			case T__149:
			case T__150:
			case T__151:
			case T__152:
			case T__153:
			case T__154:
			case T__155:
			case T__156:
			case T__157:
			case T__158:
			case T__159:
			case T__160:
			case T__161:
			case T__162:
			case T__163:
			case T__164:
			case T__165:
			case T__166:
			case T__167:
			case T__168:
			case T__169:
			case T__170:
			case T__171:
			case T__172:
			case T__173:
			case T__174:
			case T__175:
			case T__176:
			case T__177:
			case T__178:
			case T__179:
			case T__180:
			case T__181:
			case T__182:
			case T__183:
			case T__184:
			case T__185:
			case T__186:
			case T__187:
			case T__188:
			case T__189:
			case T__190:
			case T__191:
			case T__192:
			case T__193:
			case T__194:
			case T__195:
			case T__196:
			case T__197:
			case T__198:
			case T__199:
			case T__200:
			case T__201:
			case T__202:
			case T__203:
			case T__204:
			case T__205:
			case T__206:
			case T__207:
			case T__208:
			case T__209:
			case T__210:
			case T__211:
			case T__212:
			case T__213:
			case T__214:
			case T__215:
			case T__216:
			case T__217:
			case T__218:
			case T__219:
			case T__220:
			case T__221:
			case T__222:
			case T__223:
			case T__224:
			case T__225:
			case T__226:
			case T__227:
			case T__228:
			case T__229:
			case T__230:
			case T__231:
			case T__232:
			case T__233:
			case T__234:
			case T__235:
			case T__236:
			case T__237:
			case T__238:
			case T__239:
			case T__240:
			case T__241:
			case T__242:
			case T__243:
			case T__244:
			case T__245:
			case T__246:
			case T__247:
			case T__248:
			case T__249:
			case T__250:
			case T__251:
			case T__252:
			case T__253:
			case T__254:
			case T__255:
			case T__256:
			case T__257:
			case T__258:
			case T__259:
			case T__260:
			case T__261:
			case T__262:
			case T__263:
			case T__264:
			case T__265:
			case T__266:
			case T__267:
			case T__268:
			case T__269:
			case T__270:
			case T__271:
			case T__272:
			case T__273:
			case T__274:
			case Alignas:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Decltype:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case Static_assert:
			case Struct:
			case Template:
			case Thread_local:
			case Typedef:
			case Typename_:
			case Union:
			case Unsigned:
			case Using:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Star:
			case And:
			case Tilde:
			case Colon:
			case Doublecolon:
			case Semi:
			case Ellipsis:
			case SAL_NAME:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2062; memberdeclaration();
				State = 2064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignas - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Class - 256)) | (1L << (Const - 256)) | (1L << (Constexpr - 256)) | (1L << (Decltype - 256)) | (1L << (Double - 256)) | (1L << (Enum - 256)) | (1L << (Explicit - 256)) | (1L << (Extern - 256)) | (1L << (Float - 256)) | (1L << (Friend - 256)) | (1L << (Inline - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (Mutable - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Private - 320)) | (1L << (Protected - 320)) | (1L << (Public - 320)) | (1L << (Register - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Static - 320)) | (1L << (Static_assert - 320)) | (1L << (Struct - 320)) | (1L << (Template - 320)) | (1L << (Thread_local - 320)) | (1L << (Typedef - 320)) | (1L << (Typename_ - 320)) | (1L << (Union - 320)) | (1L << (Unsigned - 320)) | (1L << (Using - 320)) | (1L << (Virtual - 320)) | (1L << (Void - 320)) | (1L << (Volatile - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (Colon - 396)) | (1L << (Doublecolon - 396)) | (1L << (Semi - 396)) | (1L << (Ellipsis - 396)) | (1L << (SAL_NAME - 396)) | (1L << (Identifier - 396)))) != 0)) {
					{
					State = 2063; memberspecification();
					}
				}

				}
				break;
			case Private:
			case Protected:
			case Public:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2066; accessspecifier();
				State = 2067; Match(Colon);
				State = 2069;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignas - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Class - 256)) | (1L << (Const - 256)) | (1L << (Constexpr - 256)) | (1L << (Decltype - 256)) | (1L << (Double - 256)) | (1L << (Enum - 256)) | (1L << (Explicit - 256)) | (1L << (Extern - 256)) | (1L << (Float - 256)) | (1L << (Friend - 256)) | (1L << (Inline - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (Mutable - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Private - 320)) | (1L << (Protected - 320)) | (1L << (Public - 320)) | (1L << (Register - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Static - 320)) | (1L << (Static_assert - 320)) | (1L << (Struct - 320)) | (1L << (Template - 320)) | (1L << (Thread_local - 320)) | (1L << (Typedef - 320)) | (1L << (Typename_ - 320)) | (1L << (Union - 320)) | (1L << (Unsigned - 320)) | (1L << (Using - 320)) | (1L << (Virtual - 320)) | (1L << (Void - 320)) | (1L << (Volatile - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (Colon - 396)) | (1L << (Doublecolon - 396)) | (1L << (Semi - 396)) | (1L << (Ellipsis - 396)) | (1L << (SAL_NAME - 396)) | (1L << (Identifier - 396)))) != 0)) {
					{
					State = 2068; memberspecification();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberdeclarationContext : ParserRuleContext {
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public MemberdeclaratorlistContext memberdeclaratorlist() {
			return GetRuleContext<MemberdeclaratorlistContext>(0);
		}
		public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		public UsingdeclarationContext usingdeclaration() {
			return GetRuleContext<UsingdeclarationContext>(0);
		}
		public Static_assertdeclarationContext static_assertdeclaration() {
			return GetRuleContext<Static_assertdeclarationContext>(0);
		}
		public TemplatedeclarationContext templatedeclaration() {
			return GetRuleContext<TemplatedeclarationContext>(0);
		}
		public AliasdeclarationContext aliasdeclaration() {
			return GetRuleContext<AliasdeclarationContext>(0);
		}
		public EmptydeclarationContext emptydeclaration() {
			return GetRuleContext<EmptydeclarationContext>(0);
		}
		public MemberdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MemberdeclarationContext memberdeclaration() {
		MemberdeclarationContext _localctx = new MemberdeclarationContext(Context, State);
		EnterRule(_localctx, 316, RULE_memberdeclaration);
		int _la;
		try {
			State = 2089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2074;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
				case 1:
					{
					State = 2073; attributespecifierseq(0);
					}
					break;
				}
				State = 2077;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
				case 1:
					{
					State = 2076; declspecifierseq();
					}
					break;
				}
				State = 2080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2 || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (Alignas - 278)) | (1L << (Decltype - 278)) | (1L << (Operator - 278)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (LeftParen - 353)) | (1L << (LeftBracket - 353)) | (1L << (Star - 353)) | (1L << (And - 353)) | (1L << (Tilde - 353)) | (1L << (Colon - 353)) | (1L << (Doublecolon - 353)) | (1L << (Ellipsis - 353)) | (1L << (Identifier - 353)))) != 0)) {
					{
					State = 2079; memberdeclaratorlist(0);
					}
				}

				State = 2082; Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2083; functiondefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2084; usingdeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2085; static_assertdeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2086; templatedeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2087; aliasdeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2088; emptydeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberdeclaratorlistContext : ParserRuleContext {
		public MemberdeclaratorContext memberdeclarator() {
			return GetRuleContext<MemberdeclaratorContext>(0);
		}
		public MemberdeclaratorlistContext memberdeclaratorlist() {
			return GetRuleContext<MemberdeclaratorlistContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public MemberdeclaratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclaratorlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberdeclaratorlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberdeclaratorlist(this);
		}
	}

	[RuleVersion(0)]
	public MemberdeclaratorlistContext memberdeclaratorlist() {
		return memberdeclaratorlist(0);
	}

	private MemberdeclaratorlistContext memberdeclaratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MemberdeclaratorlistContext _localctx = new MemberdeclaratorlistContext(Context, _parentState);
		MemberdeclaratorlistContext _prevctx = _localctx;
		int _startState = 318;
		EnterRecursionRule(_localctx, 318, RULE_memberdeclaratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2092; memberdeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2099;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,258,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MemberdeclaratorlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_memberdeclaratorlist);
					State = 2094;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2095; Match(Comma);
					State = 2096; memberdeclarator();
					}
					} 
				}
				State = 2101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,258,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MemberdeclaratorContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public VirtspecifierseqContext virtspecifierseq() {
			return GetRuleContext<VirtspecifierseqContext>(0);
		}
		public PurespecifierContext purespecifier() {
			return GetRuleContext<PurespecifierContext>(0);
		}
		public BraceorequalinitializerContext braceorequalinitializer() {
			return GetRuleContext<BraceorequalinitializerContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public MemberdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public MemberdeclaratorContext memberdeclarator() {
		MemberdeclaratorContext _localctx = new MemberdeclaratorContext(Context, State);
		EnterRule(_localctx, 320, RULE_memberdeclarator);
		int _la;
		try {
			State = 2121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2102; declarator();
				State = 2104;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
				case 1:
					{
					State = 2103; virtspecifierseq(0);
					}
					break;
				}
				State = 2107;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
				case 1:
					{
					State = 2106; purespecifier();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2109; declarator();
				State = 2111;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
				case 1:
					{
					State = 2110; braceorequalinitializer();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2113; Match(Identifier);
					}
				}

				State = 2117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2116; attributespecifierseq(0);
					}
				}

				State = 2119; Match(Colon);
				State = 2120; constantexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VirtspecifierseqContext : ParserRuleContext {
		public VirtspecifierContext virtspecifier() {
			return GetRuleContext<VirtspecifierContext>(0);
		}
		public VirtspecifierseqContext virtspecifierseq() {
			return GetRuleContext<VirtspecifierseqContext>(0);
		}
		public VirtspecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtspecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterVirtspecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitVirtspecifierseq(this);
		}
	}

	[RuleVersion(0)]
	public VirtspecifierseqContext virtspecifierseq() {
		return virtspecifierseq(0);
	}

	private VirtspecifierseqContext virtspecifierseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		VirtspecifierseqContext _localctx = new VirtspecifierseqContext(Context, _parentState);
		VirtspecifierseqContext _prevctx = _localctx;
		int _startState = 322;
		EnterRecursionRule(_localctx, 322, RULE_virtspecifierseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2124; virtspecifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2130;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,265,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VirtspecifierseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_virtspecifierseq);
					State = 2126;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2127; virtspecifier();
					}
					} 
				}
				State = 2132;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,265,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VirtspecifierContext : ParserRuleContext {
		public ITerminalNode Override() { return GetToken(CPP14Parser.Override, 0); }
		public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public VirtspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterVirtspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitVirtspecifier(this);
		}
	}

	[RuleVersion(0)]
	public VirtspecifierContext virtspecifier() {
		VirtspecifierContext _localctx = new VirtspecifierContext(Context, State);
		EnterRule(_localctx, 324, RULE_virtspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2133;
			_la = TokenStream.LA(1);
			if ( !(_la==Final || _la==Override) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurespecifierContext : ParserRuleContext {
		public IToken val;
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ITerminalNode Octalliteral() { return GetToken(CPP14Parser.Octalliteral, 0); }
		public PurespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPurespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPurespecifier(this);
		}
	}

	[RuleVersion(0)]
	public PurespecifierContext purespecifier() {
		PurespecifierContext _localctx = new PurespecifierContext(Context, State);
		EnterRule(_localctx, 326, RULE_purespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2135; Match(Assign);
			State = 2136; _localctx.val = Match(Octalliteral);
			if((_localctx.val!=null?_localctx.val.Text:null).CompareTo("0")!=0) throw new InputMismatchException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseclauseContext : ParserRuleContext {
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public BasespecifierlistContext basespecifierlist() {
			return GetRuleContext<BasespecifierlistContext>(0);
		}
		public BaseclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBaseclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBaseclause(this);
		}
	}

	[RuleVersion(0)]
	public BaseclauseContext baseclause() {
		BaseclauseContext _localctx = new BaseclauseContext(Context, State);
		EnterRule(_localctx, 328, RULE_baseclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2139; Match(Colon);
			State = 2140; basespecifierlist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasespecifierlistContext : ParserRuleContext {
		public BasespecifierContext basespecifier() {
			return GetRuleContext<BasespecifierContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public BasespecifierlistContext basespecifierlist() {
			return GetRuleContext<BasespecifierlistContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public BasespecifierlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basespecifierlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBasespecifierlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBasespecifierlist(this);
		}
	}

	[RuleVersion(0)]
	public BasespecifierlistContext basespecifierlist() {
		return basespecifierlist(0);
	}

	private BasespecifierlistContext basespecifierlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BasespecifierlistContext _localctx = new BasespecifierlistContext(Context, _parentState);
		BasespecifierlistContext _prevctx = _localctx;
		int _startState = 330;
		EnterRecursionRule(_localctx, 330, RULE_basespecifierlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2143; basespecifier();
			State = 2145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				{
				State = 2144; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2155;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,268,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BasespecifierlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_basespecifierlist);
					State = 2147;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2148; Match(Comma);
					State = 2149; basespecifier();
					State = 2151;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
					case 1:
						{
						State = 2150; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2157;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,268,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BasespecifierContext : ParserRuleContext {
		public BasetypespecifierContext basetypespecifier() {
			return GetRuleContext<BasetypespecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		public AccessspecifierContext accessspecifier() {
			return GetRuleContext<AccessspecifierContext>(0);
		}
		public BasespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBasespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBasespecifier(this);
		}
	}

	[RuleVersion(0)]
	public BasespecifierContext basespecifier() {
		BasespecifierContext _localctx = new BasespecifierContext(Context, State);
		EnterRule(_localctx, 332, RULE_basespecifier);
		int _la;
		try {
			State = 2179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2158; attributespecifierseq(0);
					}
				}

				State = 2161; basetypespecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2162; attributespecifierseq(0);
					}
				}

				State = 2165; Match(Virtual);
				State = 2167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (Private - 322)) | (1L << (Protected - 322)) | (1L << (Public - 322)))) != 0)) {
					{
					State = 2166; accessspecifier();
					}
				}

				State = 2169; basetypespecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2170; attributespecifierseq(0);
					}
				}

				State = 2173; accessspecifier();
				State = 2175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Virtual) {
					{
					State = 2174; Match(Virtual);
					}
				}

				State = 2177; basetypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassordecltypeContext : ParserRuleContext {
		public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public ClassordecltypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classordecltype; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassordecltype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassordecltype(this);
		}
	}

	[RuleVersion(0)]
	public ClassordecltypeContext classordecltype() {
		ClassordecltypeContext _localctx = new ClassordecltypeContext(Context, State);
		EnterRule(_localctx, 334, RULE_classordecltype);
		try {
			State = 2186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2182;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
				case 1:
					{
					State = 2181; nestednamespecifier(0);
					}
					break;
				}
				State = 2184; classname();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2185; decltypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasetypespecifierContext : ParserRuleContext {
		public ClassordecltypeContext classordecltype() {
			return GetRuleContext<ClassordecltypeContext>(0);
		}
		public BasetypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basetypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBasetypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBasetypespecifier(this);
		}
	}

	[RuleVersion(0)]
	public BasetypespecifierContext basetypespecifier() {
		BasetypespecifierContext _localctx = new BasetypespecifierContext(Context, State);
		EnterRule(_localctx, 336, RULE_basetypespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2188; classordecltype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessspecifierContext : ParserRuleContext {
		public ITerminalNode Private() { return GetToken(CPP14Parser.Private, 0); }
		public ITerminalNode Protected() { return GetToken(CPP14Parser.Protected, 0); }
		public ITerminalNode Public() { return GetToken(CPP14Parser.Public, 0); }
		public AccessspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAccessspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAccessspecifier(this);
		}
	}

	[RuleVersion(0)]
	public AccessspecifierContext accessspecifier() {
		AccessspecifierContext _localctx = new AccessspecifierContext(Context, State);
		EnterRule(_localctx, 338, RULE_accessspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2190;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (Private - 322)) | (1L << (Protected - 322)) | (1L << (Public - 322)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionfunctionidContext : ParserRuleContext {
		public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		public ConversiontypeidContext conversiontypeid() {
			return GetRuleContext<ConversiontypeidContext>(0);
		}
		public ConversionfunctionidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionfunctionid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConversionfunctionid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConversionfunctionid(this);
		}
	}

	[RuleVersion(0)]
	public ConversionfunctionidContext conversionfunctionid() {
		ConversionfunctionidContext _localctx = new ConversionfunctionidContext(Context, State);
		EnterRule(_localctx, 340, RULE_conversionfunctionid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2192; Match(Operator);
			State = 2193; conversiontypeid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversiontypeidContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public ConversiondeclaratorContext conversiondeclarator() {
			return GetRuleContext<ConversiondeclaratorContext>(0);
		}
		public ConversiontypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversiontypeid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConversiontypeid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConversiontypeid(this);
		}
	}

	[RuleVersion(0)]
	public ConversiontypeidContext conversiontypeid() {
		ConversiontypeidContext _localctx = new ConversiontypeidContext(Context, State);
		EnterRule(_localctx, 342, RULE_conversiontypeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2195; typespecifierseq();
			State = 2197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				{
				State = 2196; conversiondeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversiondeclaratorContext : ParserRuleContext {
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public ConversiondeclaratorContext conversiondeclarator() {
			return GetRuleContext<ConversiondeclaratorContext>(0);
		}
		public ConversiondeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversiondeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConversiondeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConversiondeclarator(this);
		}
	}

	[RuleVersion(0)]
	public ConversiondeclaratorContext conversiondeclarator() {
		ConversiondeclaratorContext _localctx = new ConversiondeclaratorContext(Context, State);
		EnterRule(_localctx, 344, RULE_conversiondeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2199; ptroperator();
			State = 2201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				{
				State = 2200; conversiondeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtorinitializerContext : ParserRuleContext {
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public MeminitializerlistContext meminitializerlist() {
			return GetRuleContext<MeminitializerlistContext>(0);
		}
		public CtorinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctorinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCtorinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCtorinitializer(this);
		}
	}

	[RuleVersion(0)]
	public CtorinitializerContext ctorinitializer() {
		CtorinitializerContext _localctx = new CtorinitializerContext(Context, State);
		EnterRule(_localctx, 346, RULE_ctorinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2203; Match(Colon);
			State = 2204; meminitializerlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializerlistContext : ParserRuleContext {
		public MeminitializerContext meminitializer() {
			return GetRuleContext<MeminitializerContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public MeminitializerlistContext meminitializerlist() {
			return GetRuleContext<MeminitializerlistContext>(0);
		}
		public MeminitializerlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializerlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMeminitializerlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMeminitializerlist(this);
		}
	}

	[RuleVersion(0)]
	public MeminitializerlistContext meminitializerlist() {
		MeminitializerlistContext _localctx = new MeminitializerlistContext(Context, State);
		EnterRule(_localctx, 348, RULE_meminitializerlist);
		int _la;
		try {
			State = 2217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2206; meminitializer();
				State = 2208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 2207; Match(Ellipsis);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2210; meminitializer();
				State = 2212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 2211; Match(Ellipsis);
					}
				}

				State = 2214; Match(Comma);
				State = 2215; meminitializerlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializerContext : ParserRuleContext {
		public MeminitializeridContext meminitializerid() {
			return GetRuleContext<MeminitializeridContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public MeminitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMeminitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMeminitializer(this);
		}
	}

	[RuleVersion(0)]
	public MeminitializerContext meminitializer() {
		MeminitializerContext _localctx = new MeminitializerContext(Context, State);
		EnterRule(_localctx, 350, RULE_meminitializer);
		int _la;
		try {
			State = 2229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2219; meminitializerid();
				State = 2220; Match(LeftParen);
				State = 2222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (This - 320)) | (1L << (Throw - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (LeftBrace - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
					{
					State = 2221; expressionlist();
					}
				}

				State = 2224; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2226; meminitializerid();
				State = 2227; bracedinitlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializeridContext : ParserRuleContext {
		public ClassordecltypeContext classordecltype() {
			return GetRuleContext<ClassordecltypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public MeminitializeridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializerid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMeminitializerid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMeminitializerid(this);
		}
	}

	[RuleVersion(0)]
	public MeminitializeridContext meminitializerid() {
		MeminitializeridContext _localctx = new MeminitializeridContext(Context, State);
		EnterRule(_localctx, 352, RULE_meminitializerid);
		try {
			State = 2233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2231; classordecltype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2232; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorfunctionidContext : ParserRuleContext {
		public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		public TheoperatorContext theoperator() {
			return GetRuleContext<TheoperatorContext>(0);
		}
		public OperatorfunctionidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorfunctionid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOperatorfunctionid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOperatorfunctionid(this);
		}
	}

	[RuleVersion(0)]
	public OperatorfunctionidContext operatorfunctionid() {
		OperatorfunctionidContext _localctx = new OperatorfunctionidContext(Context, State);
		EnterRule(_localctx, 354, RULE_operatorfunctionid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2235; Match(Operator);
			State = 2236; theoperator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteraloperatoridContext : ParserRuleContext {
		public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Userdefinedstringliteral() { return GetToken(CPP14Parser.Userdefinedstringliteral, 0); }
		public LiteraloperatoridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literaloperatorid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLiteraloperatorid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLiteraloperatorid(this);
		}
	}

	[RuleVersion(0)]
	public LiteraloperatoridContext literaloperatorid() {
		LiteraloperatoridContext _localctx = new LiteraloperatoridContext(Context, State);
		EnterRule(_localctx, 356, RULE_literaloperatorid);
		try {
			State = 2243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2238; Match(Operator);
				State = 2239; Match(Stringliteral);
				State = 2240; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2241; Match(Operator);
				State = 2242; Match(Userdefinedstringliteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplatedeclarationContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public TemplateparameterlistContext templateparameterlist() {
			return GetRuleContext<TemplateparameterlistContext>(0);
		}
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public TemplatedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templatedeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplatedeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplatedeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TemplatedeclarationContext templatedeclaration() {
		TemplatedeclarationContext _localctx = new TemplatedeclarationContext(Context, State);
		EnterRule(_localctx, 358, RULE_templatedeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2245; Match(Template);
			State = 2246; Match(Less);
			State = 2247; templateparameterlist(0);
			State = 2248; Match(Greater);
			State = 2249; declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateparameterlistContext : ParserRuleContext {
		public TemplateparameterContext templateparameter() {
			return GetRuleContext<TemplateparameterContext>(0);
		}
		public TemplateparameterlistContext templateparameterlist() {
			return GetRuleContext<TemplateparameterlistContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public TemplateparameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateparameterlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateparameterlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateparameterlist(this);
		}
	}

	[RuleVersion(0)]
	public TemplateparameterlistContext templateparameterlist() {
		return templateparameterlist(0);
	}

	private TemplateparameterlistContext templateparameterlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TemplateparameterlistContext _localctx = new TemplateparameterlistContext(Context, _parentState);
		TemplateparameterlistContext _prevctx = _localctx;
		int _startState = 360;
		EnterRecursionRule(_localctx, 360, RULE_templateparameterlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2252; templateparameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2259;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,286,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TemplateparameterlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_templateparameterlist);
					State = 2254;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2255; Match(Comma);
					State = 2256; templateparameter();
					}
					} 
				}
				State = 2261;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,286,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TemplateparameterContext : ParserRuleContext {
		public TypeparameterContext typeparameter() {
			return GetRuleContext<TypeparameterContext>(0);
		}
		public ParameterdeclarationContext parameterdeclaration() {
			return GetRuleContext<ParameterdeclarationContext>(0);
		}
		public TemplateparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateparameter(this);
		}
	}

	[RuleVersion(0)]
	public TemplateparameterContext templateparameter() {
		TemplateparameterContext _localctx = new TemplateparameterContext(Context, State);
		EnterRule(_localctx, 362, RULE_templateparameter);
		try {
			State = 2264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2262; typeparameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2263; parameterdeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ITerminalNode Typename_() { return GetToken(CPP14Parser.Typename_, 0); }
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public TemplateparameterlistContext templateparameterlist() {
			return GetRuleContext<TemplateparameterlistContext>(0);
		}
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public TypeparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeparameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterContext typeparameter() {
		TypeparameterContext _localctx = new TypeparameterContext(Context, State);
		EnterRule(_localctx, 364, RULE_typeparameter);
		int _la;
		try {
			State = 2314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2266; Match(Class);
				State = 2268;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
				case 1:
					{
					State = 2267; Match(Ellipsis);
					}
					break;
				}
				State = 2271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
				case 1:
					{
					State = 2270; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2273; Match(Class);
				State = 2275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2274; Match(Identifier);
					}
				}

				State = 2277; Match(Assign);
				State = 2278; thetypeid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2279; Match(Typename_);
				State = 2281;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
				case 1:
					{
					State = 2280; Match(Ellipsis);
					}
					break;
				}
				State = 2284;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
				case 1:
					{
					State = 2283; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2286; Match(Typename_);
				State = 2288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2287; Match(Identifier);
					}
				}

				State = 2290; Match(Assign);
				State = 2291; thetypeid();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2292; Match(Template);
				State = 2293; Match(Less);
				State = 2294; templateparameterlist(0);
				State = 2295; Match(Greater);
				State = 2296; Match(Class);
				State = 2298;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
				case 1:
					{
					State = 2297; Match(Ellipsis);
					}
					break;
				}
				State = 2301;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
				case 1:
					{
					State = 2300; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2303; Match(Template);
				State = 2304; Match(Less);
				State = 2305; templateparameterlist(0);
				State = 2306; Match(Greater);
				State = 2307; Match(Class);
				State = 2309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2308; Match(Identifier);
					}
				}

				State = 2311; Match(Assign);
				State = 2312; idexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpletemplateidContext : ParserRuleContext {
		public TemplatenameContext templatename() {
			return GetRuleContext<TemplatenameContext>(0);
		}
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public TemplateargumentlistContext templateargumentlist() {
			return GetRuleContext<TemplateargumentlistContext>(0);
		}
		public SimpletemplateidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletemplateid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimpletemplateid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimpletemplateid(this);
		}
	}

	[RuleVersion(0)]
	public SimpletemplateidContext simpletemplateid() {
		SimpletemplateidContext _localctx = new SimpletemplateidContext(Context, State);
		EnterRule(_localctx, 366, RULE_simpletemplateid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2316; templatename();
			State = 2317; Match(Less);
			State = 2319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Class - 256)) | (1L << (Const - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (Enum - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (Struct - 320)) | (1L << (This - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Union - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Volatile - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
				{
				State = 2318; templateargumentlist(0);
				}
			}

			State = 2321; Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateidContext : ParserRuleContext {
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public OperatorfunctionidContext operatorfunctionid() {
			return GetRuleContext<OperatorfunctionidContext>(0);
		}
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public TemplateargumentlistContext templateargumentlist() {
			return GetRuleContext<TemplateargumentlistContext>(0);
		}
		public LiteraloperatoridContext literaloperatorid() {
			return GetRuleContext<LiteraloperatoridContext>(0);
		}
		public TemplateidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateid(this);
		}
	}

	[RuleVersion(0)]
	public TemplateidContext templateid() {
		TemplateidContext _localctx = new TemplateidContext(Context, State);
		EnterRule(_localctx, 368, RULE_templateid);
		int _la;
		try {
			State = 2338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2323; simpletemplateid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2324; operatorfunctionid();
				State = 2325; Match(Less);
				State = 2327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Class - 256)) | (1L << (Const - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (Enum - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (Struct - 320)) | (1L << (This - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Union - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Volatile - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
					{
					State = 2326; templateargumentlist(0);
					}
				}

				State = 2329; Match(Greater);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2331; literaloperatorid();
				State = 2332; Match(Less);
				State = 2334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__41) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)) | (1L << (T__156 - 128)) | (1L << (T__157 - 128)) | (1L << (T__158 - 128)) | (1L << (T__159 - 128)) | (1L << (T__160 - 128)) | (1L << (T__161 - 128)) | (1L << (T__162 - 128)) | (1L << (T__163 - 128)) | (1L << (T__164 - 128)) | (1L << (T__165 - 128)) | (1L << (T__166 - 128)) | (1L << (T__167 - 128)) | (1L << (T__168 - 128)) | (1L << (T__169 - 128)) | (1L << (T__170 - 128)) | (1L << (T__171 - 128)) | (1L << (T__172 - 128)) | (1L << (T__173 - 128)) | (1L << (T__174 - 128)) | (1L << (T__175 - 128)) | (1L << (T__176 - 128)) | (1L << (T__177 - 128)) | (1L << (T__178 - 128)) | (1L << (T__179 - 128)) | (1L << (T__180 - 128)) | (1L << (T__181 - 128)) | (1L << (T__182 - 128)) | (1L << (T__183 - 128)) | (1L << (T__184 - 128)) | (1L << (T__185 - 128)) | (1L << (T__186 - 128)) | (1L << (T__187 - 128)) | (1L << (T__188 - 128)) | (1L << (T__189 - 128)) | (1L << (T__190 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__191 - 192)) | (1L << (T__192 - 192)) | (1L << (T__193 - 192)) | (1L << (T__194 - 192)) | (1L << (T__195 - 192)) | (1L << (T__196 - 192)) | (1L << (T__197 - 192)) | (1L << (T__198 - 192)) | (1L << (T__199 - 192)) | (1L << (T__200 - 192)) | (1L << (T__201 - 192)) | (1L << (T__202 - 192)) | (1L << (T__203 - 192)) | (1L << (T__204 - 192)) | (1L << (T__205 - 192)) | (1L << (T__206 - 192)) | (1L << (T__207 - 192)) | (1L << (T__208 - 192)) | (1L << (T__209 - 192)) | (1L << (T__210 - 192)) | (1L << (T__211 - 192)) | (1L << (T__212 - 192)) | (1L << (T__213 - 192)) | (1L << (T__214 - 192)) | (1L << (T__215 - 192)) | (1L << (T__216 - 192)) | (1L << (T__217 - 192)) | (1L << (T__218 - 192)) | (1L << (T__219 - 192)) | (1L << (T__220 - 192)) | (1L << (T__221 - 192)) | (1L << (T__222 - 192)) | (1L << (T__223 - 192)) | (1L << (T__224 - 192)) | (1L << (T__225 - 192)) | (1L << (T__226 - 192)) | (1L << (T__227 - 192)) | (1L << (T__228 - 192)) | (1L << (T__229 - 192)) | (1L << (T__230 - 192)) | (1L << (T__231 - 192)) | (1L << (T__232 - 192)) | (1L << (T__233 - 192)) | (1L << (T__234 - 192)) | (1L << (T__235 - 192)) | (1L << (T__236 - 192)) | (1L << (T__237 - 192)) | (1L << (T__238 - 192)) | (1L << (T__239 - 192)) | (1L << (T__240 - 192)) | (1L << (T__241 - 192)) | (1L << (T__242 - 192)) | (1L << (T__243 - 192)) | (1L << (T__244 - 192)) | (1L << (T__245 - 192)) | (1L << (T__246 - 192)) | (1L << (T__247 - 192)) | (1L << (T__248 - 192)) | (1L << (T__249 - 192)) | (1L << (T__250 - 192)) | (1L << (T__251 - 192)) | (1L << (T__252 - 192)) | (1L << (T__253 - 192)) | (1L << (T__254 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (T__255 - 256)) | (1L << (T__256 - 256)) | (1L << (T__257 - 256)) | (1L << (T__258 - 256)) | (1L << (T__259 - 256)) | (1L << (T__260 - 256)) | (1L << (T__261 - 256)) | (1L << (T__262 - 256)) | (1L << (T__263 - 256)) | (1L << (T__264 - 256)) | (1L << (T__265 - 256)) | (1L << (T__266 - 256)) | (1L << (T__267 - 256)) | (1L << (T__268 - 256)) | (1L << (T__269 - 256)) | (1L << (T__270 - 256)) | (1L << (T__271 - 256)) | (1L << (T__272 - 256)) | (1L << (T__273 - 256)) | (1L << (T__274 - 256)) | (1L << (Alignof - 256)) | (1L << (Auto - 256)) | (1L << (Bool - 256)) | (1L << (Char - 256)) | (1L << (Char16 - 256)) | (1L << (Char32 - 256)) | (1L << (Class - 256)) | (1L << (Const - 256)) | (1L << (Const_cast - 256)) | (1L << (Decltype - 256)) | (1L << (Delete - 256)) | (1L << (Double - 256)) | (1L << (Dynamic_cast - 256)) | (1L << (Enum - 256)) | (1L << (False - 256)) | (1L << (Float - 256)) | (1L << (Int - 256)) | (1L << (Long - 256)) | (1L << (New - 256)) | (1L << (Noexcept - 256)) | (1L << (Nullptr - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (Operator - 320)) | (1L << (Reinterpret_cast - 320)) | (1L << (Short - 320)) | (1L << (Signed - 320)) | (1L << (Sizeof - 320)) | (1L << (Static_cast - 320)) | (1L << (Struct - 320)) | (1L << (This - 320)) | (1L << (True - 320)) | (1L << (Typeid_ - 320)) | (1L << (Typename_ - 320)) | (1L << (Union - 320)) | (1L << (Unsigned - 320)) | (1L << (Void - 320)) | (1L << (Volatile - 320)) | (1L << (Wchar - 320)) | (1L << (LeftParen - 320)) | (1L << (LeftBracket - 320)) | (1L << (Plus - 320)) | (1L << (Minus - 320)) | (1L << (Star - 320)) | (1L << (And - 320)) | (1L << (Or - 320)) | (1L << (Tilde - 320)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (PlusPlus - 390)) | (1L << (MinusMinus - 390)) | (1L << (Doublecolon - 390)) | (1L << (Identifier - 390)) | (1L << (Integerliteral - 390)) | (1L << (Characterliteral - 390)) | (1L << (Floatingliteral - 390)) | (1L << (Stringliteral - 390)) | (1L << (Userdefinedintegerliteral - 390)) | (1L << (Userdefinedfloatingliteral - 390)) | (1L << (Userdefinedstringliteral - 390)) | (1L << (Userdefinedcharacterliteral - 390)))) != 0)) {
					{
					State = 2333; templateargumentlist(0);
					}
				}

				State = 2336; Match(Greater);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplatenameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TemplatenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templatename; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplatename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplatename(this);
		}
	}

	[RuleVersion(0)]
	public TemplatenameContext templatename() {
		TemplatenameContext _localctx = new TemplatenameContext(Context, State);
		EnterRule(_localctx, 370, RULE_templatename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2340; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateargumentlistContext : ParserRuleContext {
		public TemplateargumentContext templateargument() {
			return GetRuleContext<TemplateargumentContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public TemplateargumentlistContext templateargumentlist() {
			return GetRuleContext<TemplateargumentlistContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public TemplateargumentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateargumentlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateargumentlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateargumentlist(this);
		}
	}

	[RuleVersion(0)]
	public TemplateargumentlistContext templateargumentlist() {
		return templateargumentlist(0);
	}

	private TemplateargumentlistContext templateargumentlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TemplateargumentlistContext _localctx = new TemplateargumentlistContext(Context, _parentState);
		TemplateargumentlistContext _prevctx = _localctx;
		int _startState = 372;
		EnterRecursionRule(_localctx, 372, RULE_templateargumentlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2343; templateargument();
			State = 2345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
			case 1:
				{
				State = 2344; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2355;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,304,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TemplateargumentlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_templateargumentlist);
					State = 2347;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2348; Match(Comma);
					State = 2349; templateargument();
					State = 2351;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
					case 1:
						{
						State = 2350; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2357;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,304,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TemplateargumentContext : ParserRuleContext {
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public TemplateargumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateargument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateargument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateargument(this);
		}
	}

	[RuleVersion(0)]
	public TemplateargumentContext templateargument() {
		TemplateargumentContext _localctx = new TemplateargumentContext(Context, State);
		EnterRule(_localctx, 374, RULE_templateargument);
		try {
			State = 2361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2358; thetypeid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2359; constantexpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2360; idexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenamespecifierContext : ParserRuleContext {
		public ITerminalNode Typename_() { return GetToken(CPP14Parser.Typename_, 0); }
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public TypenamespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typenamespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypenamespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypenamespecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypenamespecifierContext typenamespecifier() {
		TypenamespecifierContext _localctx = new TypenamespecifierContext(Context, State);
		EnterRule(_localctx, 376, RULE_typenamespecifier);
		int _la;
		try {
			State = 2374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2363; Match(Typename_);
				State = 2364; nestednamespecifier(0);
				State = 2365; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2367; Match(Typename_);
				State = 2368; nestednamespecifier(0);
				State = 2370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 2369; Match(Template);
					}
				}

				State = 2372; simpletemplateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitinstantiationContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ExplicitinstantiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitinstantiation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExplicitinstantiation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExplicitinstantiation(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitinstantiationContext explicitinstantiation() {
		ExplicitinstantiationContext _localctx = new ExplicitinstantiationContext(Context, State);
		EnterRule(_localctx, 378, RULE_explicitinstantiation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extern) {
				{
				State = 2376; Match(Extern);
				}
			}

			State = 2379; Match(Template);
			State = 2380; declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitspecializationContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExplicitspecializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitspecialization; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExplicitspecialization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExplicitspecialization(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitspecializationContext explicitspecialization() {
		ExplicitspecializationContext _localctx = new ExplicitspecializationContext(Context, State);
		EnterRule(_localctx, 380, RULE_explicitspecialization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2382; Match(Template);
			State = 2383; Match(Less);
			State = 2384; Match(Greater);
			State = 2385; declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryblockContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public HandlerseqContext handlerseq() {
			return GetRuleContext<HandlerseqContext>(0);
		}
		public TryblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTryblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTryblock(this);
		}
	}

	[RuleVersion(0)]
	public TryblockContext tryblock() {
		TryblockContext _localctx = new TryblockContext(Context, State);
		EnterRule(_localctx, 382, RULE_tryblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2387; Match(Try);
			State = 2388; compoundstatement();
			State = 2389; handlerseq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiontryblockContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public HandlerseqContext handlerseq() {
			return GetRuleContext<HandlerseqContext>(0);
		}
		public CtorinitializerContext ctorinitializer() {
			return GetRuleContext<CtorinitializerContext>(0);
		}
		public FunctiontryblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiontryblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctiontryblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctiontryblock(this);
		}
	}

	[RuleVersion(0)]
	public FunctiontryblockContext functiontryblock() {
		FunctiontryblockContext _localctx = new FunctiontryblockContext(Context, State);
		EnterRule(_localctx, 384, RULE_functiontryblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2391; Match(Try);
			State = 2393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 2392; ctorinitializer();
				}
			}

			State = 2395; compoundstatement();
			State = 2396; handlerseq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerseqContext : ParserRuleContext {
		public HandlerContext handler() {
			return GetRuleContext<HandlerContext>(0);
		}
		public HandlerseqContext handlerseq() {
			return GetRuleContext<HandlerseqContext>(0);
		}
		public HandlerseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterHandlerseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitHandlerseq(this);
		}
	}

	[RuleVersion(0)]
	public HandlerseqContext handlerseq() {
		HandlerseqContext _localctx = new HandlerseqContext(Context, State);
		EnterRule(_localctx, 386, RULE_handlerseq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2398; handler();
			State = 2400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
			case 1:
				{
				State = 2399; handlerseq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerContext : ParserRuleContext {
		public ITerminalNode Catch() { return GetToken(CPP14Parser.Catch, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ExceptiondeclarationContext exceptiondeclaration() {
			return GetRuleContext<ExceptiondeclarationContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public HandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handler; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitHandler(this);
		}
	}

	[RuleVersion(0)]
	public HandlerContext handler() {
		HandlerContext _localctx = new HandlerContext(Context, State);
		EnterRule(_localctx, 388, RULE_handler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2402; Match(Catch);
			State = 2403; Match(LeftParen);
			State = 2404; exceptiondeclaration();
			State = 2405; Match(RightParen);
			State = 2406; compoundstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptiondeclarationContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ExceptiondeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptiondeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExceptiondeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExceptiondeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ExceptiondeclarationContext exceptiondeclaration() {
		ExceptiondeclarationContext _localctx = new ExceptiondeclarationContext(Context, State);
		EnterRule(_localctx, 390, RULE_exceptiondeclaration);
		int _la;
		try {
			State = 2422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,314,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2408; attributespecifierseq(0);
					}
				}

				State = 2411; typespecifierseq();
				State = 2412; declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2414; attributespecifierseq(0);
					}
				}

				State = 2417; typespecifierseq();
				State = 2419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2 || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (Decltype - 294)) | (1L << (LeftParen - 294)) | (1L << (LeftBracket - 294)))) != 0) || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & ((1L << (Star - 361)) | (1L << (And - 361)) | (1L << (Doublecolon - 361)) | (1L << (Ellipsis - 361)) | (1L << (Identifier - 361)))) != 0)) {
					{
					State = 2418; abstractdeclarator();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2421; Match(Ellipsis);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowexpressionContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public ThrowexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterThrowexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitThrowexpression(this);
		}
	}

	[RuleVersion(0)]
	public ThrowexpressionContext throwexpression() {
		ThrowexpressionContext _localctx = new ThrowexpressionContext(Context, State);
		EnterRule(_localctx, 392, RULE_throwexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2424; Match(Throw);
			State = 2426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
			case 1:
				{
				State = 2425; assignmentexpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionspecificationContext : ParserRuleContext {
		public DynamicexceptionspecificationContext dynamicexceptionspecification() {
			return GetRuleContext<DynamicexceptionspecificationContext>(0);
		}
		public NoexceptspecificationContext noexceptspecification() {
			return GetRuleContext<NoexceptspecificationContext>(0);
		}
		public ExceptionspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionspecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExceptionspecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExceptionspecification(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionspecificationContext exceptionspecification() {
		ExceptionspecificationContext _localctx = new ExceptionspecificationContext(Context, State);
		EnterRule(_localctx, 394, RULE_exceptionspecification);
		try {
			State = 2430;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Throw:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2428; dynamicexceptionspecification();
				}
				break;
			case Noexcept:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2429; noexceptspecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicexceptionspecificationContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public TypeidlistContext typeidlist() {
			return GetRuleContext<TypeidlistContext>(0);
		}
		public DynamicexceptionspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicexceptionspecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDynamicexceptionspecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDynamicexceptionspecification(this);
		}
	}

	[RuleVersion(0)]
	public DynamicexceptionspecificationContext dynamicexceptionspecification() {
		DynamicexceptionspecificationContext _localctx = new DynamicexceptionspecificationContext(Context, State);
		EnterRule(_localctx, 396, RULE_dynamicexceptionspecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2432; Match(Throw);
			State = 2433; Match(LeftParen);
			State = 2435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & ((1L << (T__41 - 42)) | (1L << (T__47 - 42)) | (1L << (T__48 - 42)) | (1L << (T__49 - 42)) | (1L << (T__50 - 42)) | (1L << (T__51 - 42)) | (1L << (T__52 - 42)) | (1L << (T__53 - 42)) | (1L << (T__54 - 42)) | (1L << (T__55 - 42)) | (1L << (T__56 - 42)) | (1L << (T__57 - 42)) | (1L << (T__58 - 42)) | (1L << (T__59 - 42)) | (1L << (T__60 - 42)) | (1L << (T__61 - 42)) | (1L << (T__62 - 42)) | (1L << (T__63 - 42)) | (1L << (T__64 - 42)) | (1L << (T__65 - 42)) | (1L << (T__66 - 42)) | (1L << (T__67 - 42)) | (1L << (T__68 - 42)) | (1L << (T__69 - 42)) | (1L << (T__70 - 42)) | (1L << (T__71 - 42)) | (1L << (T__72 - 42)) | (1L << (T__73 - 42)) | (1L << (T__74 - 42)) | (1L << (T__75 - 42)) | (1L << (T__76 - 42)) | (1L << (T__77 - 42)) | (1L << (T__78 - 42)) | (1L << (T__79 - 42)) | (1L << (T__80 - 42)) | (1L << (T__81 - 42)) | (1L << (T__82 - 42)) | (1L << (T__83 - 42)) | (1L << (T__84 - 42)) | (1L << (T__85 - 42)) | (1L << (T__86 - 42)) | (1L << (T__87 - 42)) | (1L << (T__88 - 42)) | (1L << (T__89 - 42)) | (1L << (T__90 - 42)) | (1L << (T__91 - 42)) | (1L << (T__92 - 42)) | (1L << (T__93 - 42)) | (1L << (T__94 - 42)) | (1L << (T__95 - 42)) | (1L << (T__96 - 42)) | (1L << (T__97 - 42)) | (1L << (T__98 - 42)) | (1L << (T__99 - 42)) | (1L << (T__100 - 42)) | (1L << (T__101 - 42)) | (1L << (T__102 - 42)) | (1L << (T__103 - 42)) | (1L << (T__104 - 42)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (T__105 - 106)) | (1L << (T__106 - 106)) | (1L << (T__107 - 106)) | (1L << (T__108 - 106)) | (1L << (T__109 - 106)) | (1L << (T__110 - 106)) | (1L << (T__111 - 106)) | (1L << (T__112 - 106)) | (1L << (T__113 - 106)) | (1L << (T__114 - 106)) | (1L << (T__115 - 106)) | (1L << (T__116 - 106)) | (1L << (T__117 - 106)) | (1L << (T__118 - 106)) | (1L << (T__119 - 106)) | (1L << (T__120 - 106)) | (1L << (T__121 - 106)) | (1L << (T__122 - 106)) | (1L << (T__123 - 106)) | (1L << (T__124 - 106)) | (1L << (T__125 - 106)) | (1L << (T__126 - 106)) | (1L << (T__127 - 106)) | (1L << (T__128 - 106)) | (1L << (T__129 - 106)) | (1L << (T__130 - 106)) | (1L << (T__131 - 106)) | (1L << (T__132 - 106)) | (1L << (T__133 - 106)) | (1L << (T__134 - 106)) | (1L << (T__135 - 106)) | (1L << (T__136 - 106)) | (1L << (T__137 - 106)) | (1L << (T__138 - 106)) | (1L << (T__139 - 106)) | (1L << (T__140 - 106)) | (1L << (T__141 - 106)) | (1L << (T__142 - 106)) | (1L << (T__143 - 106)) | (1L << (T__144 - 106)) | (1L << (T__145 - 106)) | (1L << (T__146 - 106)) | (1L << (T__147 - 106)) | (1L << (T__148 - 106)) | (1L << (T__149 - 106)) | (1L << (T__150 - 106)) | (1L << (T__151 - 106)) | (1L << (T__152 - 106)) | (1L << (T__153 - 106)) | (1L << (T__154 - 106)) | (1L << (T__155 - 106)) | (1L << (T__156 - 106)) | (1L << (T__157 - 106)) | (1L << (T__158 - 106)) | (1L << (T__159 - 106)) | (1L << (T__160 - 106)) | (1L << (T__161 - 106)) | (1L << (T__162 - 106)) | (1L << (T__163 - 106)) | (1L << (T__164 - 106)) | (1L << (T__165 - 106)) | (1L << (T__166 - 106)) | (1L << (T__167 - 106)) | (1L << (T__168 - 106)))) != 0) || ((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (T__169 - 170)) | (1L << (T__170 - 170)) | (1L << (T__171 - 170)) | (1L << (T__172 - 170)) | (1L << (T__173 - 170)) | (1L << (T__174 - 170)) | (1L << (T__175 - 170)) | (1L << (T__176 - 170)) | (1L << (T__177 - 170)) | (1L << (T__178 - 170)) | (1L << (T__179 - 170)) | (1L << (T__180 - 170)) | (1L << (T__181 - 170)) | (1L << (T__182 - 170)) | (1L << (T__183 - 170)) | (1L << (T__184 - 170)) | (1L << (T__185 - 170)) | (1L << (T__186 - 170)) | (1L << (T__187 - 170)) | (1L << (T__188 - 170)) | (1L << (T__189 - 170)) | (1L << (T__190 - 170)) | (1L << (T__191 - 170)) | (1L << (T__192 - 170)) | (1L << (T__193 - 170)) | (1L << (T__194 - 170)) | (1L << (T__195 - 170)) | (1L << (T__196 - 170)) | (1L << (T__197 - 170)) | (1L << (T__198 - 170)) | (1L << (T__199 - 170)) | (1L << (T__200 - 170)) | (1L << (T__201 - 170)) | (1L << (T__202 - 170)) | (1L << (T__203 - 170)) | (1L << (T__204 - 170)) | (1L << (T__205 - 170)) | (1L << (T__206 - 170)) | (1L << (T__207 - 170)) | (1L << (T__208 - 170)) | (1L << (T__209 - 170)) | (1L << (T__210 - 170)) | (1L << (T__211 - 170)) | (1L << (T__212 - 170)) | (1L << (T__213 - 170)) | (1L << (T__214 - 170)) | (1L << (T__215 - 170)) | (1L << (T__216 - 170)) | (1L << (T__217 - 170)) | (1L << (T__218 - 170)) | (1L << (T__219 - 170)) | (1L << (T__220 - 170)) | (1L << (T__221 - 170)) | (1L << (T__222 - 170)) | (1L << (T__223 - 170)) | (1L << (T__224 - 170)) | (1L << (T__225 - 170)) | (1L << (T__226 - 170)) | (1L << (T__227 - 170)) | (1L << (T__228 - 170)) | (1L << (T__229 - 170)) | (1L << (T__230 - 170)) | (1L << (T__231 - 170)) | (1L << (T__232 - 170)))) != 0) || ((((_la - 234)) & ~0x3f) == 0 && ((1L << (_la - 234)) & ((1L << (T__233 - 234)) | (1L << (T__234 - 234)) | (1L << (T__235 - 234)) | (1L << (T__236 - 234)) | (1L << (T__237 - 234)) | (1L << (T__238 - 234)) | (1L << (T__239 - 234)) | (1L << (T__240 - 234)) | (1L << (T__241 - 234)) | (1L << (T__242 - 234)) | (1L << (T__243 - 234)) | (1L << (T__244 - 234)) | (1L << (T__245 - 234)) | (1L << (T__246 - 234)) | (1L << (T__247 - 234)) | (1L << (T__248 - 234)) | (1L << (T__249 - 234)) | (1L << (T__250 - 234)) | (1L << (T__251 - 234)) | (1L << (T__252 - 234)) | (1L << (T__253 - 234)) | (1L << (T__254 - 234)) | (1L << (T__255 - 234)) | (1L << (T__256 - 234)) | (1L << (T__257 - 234)) | (1L << (T__258 - 234)) | (1L << (T__259 - 234)) | (1L << (T__260 - 234)) | (1L << (T__261 - 234)) | (1L << (T__262 - 234)) | (1L << (T__263 - 234)) | (1L << (T__264 - 234)) | (1L << (T__265 - 234)) | (1L << (T__266 - 234)) | (1L << (T__267 - 234)) | (1L << (T__268 - 234)) | (1L << (T__269 - 234)) | (1L << (T__270 - 234)) | (1L << (T__271 - 234)) | (1L << (T__272 - 234)) | (1L << (T__273 - 234)) | (1L << (T__274 - 234)) | (1L << (Auto - 234)) | (1L << (Bool - 234)) | (1L << (Char - 234)) | (1L << (Char16 - 234)) | (1L << (Char32 - 234)) | (1L << (Class - 234)) | (1L << (Const - 234)) | (1L << (Decltype - 234)))) != 0) || ((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & ((1L << (Double - 298)) | (1L << (Enum - 298)) | (1L << (Float - 298)) | (1L << (Int - 298)) | (1L << (Long - 298)) | (1L << (Short - 298)) | (1L << (Signed - 298)) | (1L << (Struct - 298)) | (1L << (Typename_ - 298)) | (1L << (Union - 298)) | (1L << (Unsigned - 298)) | (1L << (Void - 298)) | (1L << (Volatile - 298)) | (1L << (Wchar - 298)))) != 0) || _la==Doublecolon || _la==Identifier) {
				{
				State = 2434; typeidlist(0);
				}
			}

			State = 2437; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeidlistContext : ParserRuleContext {
		public ThetypeidContext thetypeid() {
			return GetRuleContext<ThetypeidContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public TypeidlistContext typeidlist() {
			return GetRuleContext<TypeidlistContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public TypeidlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeidlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeidlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeidlist(this);
		}
	}

	[RuleVersion(0)]
	public TypeidlistContext typeidlist() {
		return typeidlist(0);
	}

	private TypeidlistContext typeidlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeidlistContext _localctx = new TypeidlistContext(Context, _parentState);
		TypeidlistContext _prevctx = _localctx;
		int _startState = 398;
		EnterRecursionRule(_localctx, 398, RULE_typeidlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2440; thetypeid();
			State = 2442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,318,Context) ) {
			case 1:
				{
				State = 2441; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2452;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,320,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeidlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeidlist);
					State = 2444;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2445; Match(Comma);
					State = 2446; thetypeid();
					State = 2448;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,319,Context) ) {
					case 1:
						{
						State = 2447; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,320,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NoexceptspecificationContext : ParserRuleContext {
		public ITerminalNode Noexcept() { return GetToken(CPP14Parser.Noexcept, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoexceptspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noexceptspecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoexceptspecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoexceptspecification(this);
		}
	}

	[RuleVersion(0)]
	public NoexceptspecificationContext noexceptspecification() {
		NoexceptspecificationContext _localctx = new NoexceptspecificationContext(Context, State);
		EnterRule(_localctx, 400, RULE_noexceptspecification);
		try {
			State = 2461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,321,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2455; Match(Noexcept);
				State = 2456; Match(LeftParen);
				State = 2457; constantexpression();
				State = 2458; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2460; Match(Noexcept);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TheoperatorContext : ParserRuleContext {
		public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public ITerminalNode Plus() { return GetToken(CPP14Parser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(CPP14Parser.Minus, 0); }
		public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		public ITerminalNode Div() { return GetToken(CPP14Parser.Div, 0); }
		public ITerminalNode Mod() { return GetToken(CPP14Parser.Mod, 0); }
		public ITerminalNode Caret() { return GetToken(CPP14Parser.Caret, 0); }
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public ITerminalNode Or() { return GetToken(CPP14Parser.Or, 0); }
		public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public ITerminalNode PlusAssign() { return GetToken(CPP14Parser.PlusAssign, 0); }
		public ITerminalNode MinusAssign() { return GetToken(CPP14Parser.MinusAssign, 0); }
		public ITerminalNode StarAssign() { return GetToken(CPP14Parser.StarAssign, 0); }
		public ITerminalNode DivAssign() { return GetToken(CPP14Parser.DivAssign, 0); }
		public ITerminalNode ModAssign() { return GetToken(CPP14Parser.ModAssign, 0); }
		public ITerminalNode XorAssign() { return GetToken(CPP14Parser.XorAssign, 0); }
		public ITerminalNode AndAssign() { return GetToken(CPP14Parser.AndAssign, 0); }
		public ITerminalNode OrAssign() { return GetToken(CPP14Parser.OrAssign, 0); }
		public ITerminalNode LeftShift() { return GetToken(CPP14Parser.LeftShift, 0); }
		public ITerminalNode RightShift() { return GetToken(CPP14Parser.RightShift, 0); }
		public ITerminalNode RightShiftAssign() { return GetToken(CPP14Parser.RightShiftAssign, 0); }
		public ITerminalNode LeftShiftAssign() { return GetToken(CPP14Parser.LeftShiftAssign, 0); }
		public ITerminalNode Equal() { return GetToken(CPP14Parser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(CPP14Parser.NotEqual, 0); }
		public ITerminalNode LessEqual() { return GetToken(CPP14Parser.LessEqual, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(CPP14Parser.GreaterEqual, 0); }
		public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ITerminalNode ArrowStar() { return GetToken(CPP14Parser.ArrowStar, 0); }
		public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public TheoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTheoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTheoperator(this);
		}
	}

	[RuleVersion(0)]
	public TheoperatorContext theoperator() {
		TheoperatorContext _localctx = new TheoperatorContext(Context, State);
		EnterRule(_localctx, 402, RULE_theoperator);
		try {
			State = 2514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2463; Match(New);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2464; Match(Delete);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2465; Match(New);
				State = 2466; Match(LeftBracket);
				State = 2467; Match(RightBracket);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2468; Match(Delete);
				State = 2469; Match(LeftBracket);
				State = 2470; Match(RightBracket);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2471; Match(Plus);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2472; Match(Minus);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2473; Match(Star);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2474; Match(Div);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2475; Match(Mod);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2476; Match(Caret);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2477; Match(And);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2478; Match(Or);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2479; Match(Tilde);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2480; Match(T__0);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2481; Match(T__1);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2482; Match(Assign);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2483; Match(Less);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2484; Match(Greater);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2485; Match(PlusAssign);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2486; Match(MinusAssign);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2487; Match(StarAssign);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2488; Match(DivAssign);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2489; Match(ModAssign);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2490; Match(XorAssign);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2491; Match(AndAssign);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2492; Match(OrAssign);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2493; Match(LeftShift);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2494; Match(RightShift);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2495; Match(RightShiftAssign);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2496; Match(LeftShiftAssign);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2497; Match(Equal);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2498; Match(NotEqual);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2499; Match(LessEqual);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2500; Match(GreaterEqual);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2501; Match(T__2);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 2502; Match(T__3);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 2503; Match(T__4);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 2504; Match(T__5);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 2505; Match(PlusPlus);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 2506; Match(MinusMinus);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 2507; Match(Comma);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 2508; Match(ArrowStar);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 2509; Match(Arrow);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 2510; Match(LeftParen);
				State = 2511; Match(RightParen);
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 2512; Match(LeftBracket);
				State = 2513; Match(RightBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode Integerliteral() { return GetToken(CPP14Parser.Integerliteral, 0); }
		public ITerminalNode Characterliteral() { return GetToken(CPP14Parser.Characterliteral, 0); }
		public ITerminalNode Floatingliteral() { return GetToken(CPP14Parser.Floatingliteral, 0); }
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public BooleanliteralContext booleanliteral() {
			return GetRuleContext<BooleanliteralContext>(0);
		}
		public PointerliteralContext pointerliteral() {
			return GetRuleContext<PointerliteralContext>(0);
		}
		public UserdefinedliteralContext userdefinedliteral() {
			return GetRuleContext<UserdefinedliteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 404, RULE_literal);
		try {
			State = 2523;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integerliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2516; Match(Integerliteral);
				}
				break;
			case Characterliteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2517; Match(Characterliteral);
				}
				break;
			case Floatingliteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2518; Match(Floatingliteral);
				}
				break;
			case Stringliteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2519; Match(Stringliteral);
				}
				break;
			case False:
			case True:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2520; booleanliteral();
				}
				break;
			case Nullptr:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2521; pointerliteral();
				}
				break;
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2522; userdefinedliteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanliteralContext : ParserRuleContext {
		public ITerminalNode False() { return GetToken(CPP14Parser.False, 0); }
		public ITerminalNode True() { return GetToken(CPP14Parser.True, 0); }
		public BooleanliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanliteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBooleanliteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBooleanliteral(this);
		}
	}

	[RuleVersion(0)]
	public BooleanliteralContext booleanliteral() {
		BooleanliteralContext _localctx = new BooleanliteralContext(Context, State);
		EnterRule(_localctx, 406, RULE_booleanliteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2525;
			_la = TokenStream.LA(1);
			if ( !(_la==False || _la==True) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerliteralContext : ParserRuleContext {
		public ITerminalNode Nullptr() { return GetToken(CPP14Parser.Nullptr, 0); }
		public PointerliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerliteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPointerliteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPointerliteral(this);
		}
	}

	[RuleVersion(0)]
	public PointerliteralContext pointerliteral() {
		PointerliteralContext _localctx = new PointerliteralContext(Context, State);
		EnterRule(_localctx, 408, RULE_pointerliteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2527; Match(Nullptr);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserdefinedliteralContext : ParserRuleContext {
		public ITerminalNode Userdefinedintegerliteral() { return GetToken(CPP14Parser.Userdefinedintegerliteral, 0); }
		public ITerminalNode Userdefinedfloatingliteral() { return GetToken(CPP14Parser.Userdefinedfloatingliteral, 0); }
		public ITerminalNode Userdefinedstringliteral() { return GetToken(CPP14Parser.Userdefinedstringliteral, 0); }
		public ITerminalNode Userdefinedcharacterliteral() { return GetToken(CPP14Parser.Userdefinedcharacterliteral, 0); }
		public UserdefinedliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userdefinedliteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUserdefinedliteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUserdefinedliteral(this);
		}
	}

	[RuleVersion(0)]
	public UserdefinedliteralContext userdefinedliteral() {
		UserdefinedliteralContext _localctx = new UserdefinedliteralContext(Context, State);
		EnterRule(_localctx, 410, RULE_userdefinedliteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2529;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (Userdefinedintegerliteral - 413)) | (1L << (Userdefinedfloatingliteral - 413)) | (1L << (Userdefinedstringliteral - 413)) | (1L << (Userdefinedcharacterliteral - 413)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return nestednamespecifier_sempred((NestednamespecifierContext)_localctx, predIndex);
		case 10: return capturelist_sempred((CapturelistContext)_localctx, predIndex);
		case 15: return postfixexpression_sempred((PostfixexpressionContext)_localctx, predIndex);
		case 26: return noptrnewdeclarator_sempred((NoptrnewdeclaratorContext)_localctx, predIndex);
		case 31: return pmexpression_sempred((PmexpressionContext)_localctx, predIndex);
		case 32: return multiplicativeexpression_sempred((MultiplicativeexpressionContext)_localctx, predIndex);
		case 33: return additiveexpression_sempred((AdditiveexpressionContext)_localctx, predIndex);
		case 34: return shiftexpression_sempred((ShiftexpressionContext)_localctx, predIndex);
		case 36: return relationalexpression_sempred((RelationalexpressionContext)_localctx, predIndex);
		case 37: return equalityexpression_sempred((EqualityexpressionContext)_localctx, predIndex);
		case 38: return andexpression_sempred((AndexpressionContext)_localctx, predIndex);
		case 39: return exclusiveorexpression_sempred((ExclusiveorexpressionContext)_localctx, predIndex);
		case 40: return inclusiveorexpression_sempred((InclusiveorexpressionContext)_localctx, predIndex);
		case 41: return logicalandexpression_sempred((LogicalandexpressionContext)_localctx, predIndex);
		case 42: return logicalorexpression_sempred((LogicalorexpressionContext)_localctx, predIndex);
		case 46: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 52: return statementseq_sempred((StatementseqContext)_localctx, predIndex);
		case 61: return declarationseq_sempred((DeclarationseqContext)_localctx, predIndex);
		case 94: return enumeratorlist_sempred((EnumeratorlistContext)_localctx, predIndex);
		case 112: return attributespecifierseq_sempred((AttributespecifierseqContext)_localctx, predIndex);
		case 115: return attributelist_sempred((AttributelistContext)_localctx, predIndex);
		case 121: return balancedtokenseq_sempred((BalancedtokenseqContext)_localctx, predIndex);
		case 123: return initdeclaratorlist_sempred((InitdeclaratorlistContext)_localctx, predIndex);
		case 127: return noptrdeclarator_sempred((NoptrdeclaratorContext)_localctx, predIndex);
		case 138: return noptrabstractdeclarator_sempred((NoptrabstractdeclaratorContext)_localctx, predIndex);
		case 140: return noptrabstractpackdeclarator_sempred((NoptrabstractpackdeclaratorContext)_localctx, predIndex);
		case 142: return parameterdeclarationlist_sempred((ParameterdeclarationlistContext)_localctx, predIndex);
		case 149: return initializerlist_sempred((InitializerlistContext)_localctx, predIndex);
		case 159: return memberdeclaratorlist_sempred((MemberdeclaratorlistContext)_localctx, predIndex);
		case 161: return virtspecifierseq_sempred((VirtspecifierseqContext)_localctx, predIndex);
		case 165: return basespecifierlist_sempred((BasespecifierlistContext)_localctx, predIndex);
		case 180: return templateparameterlist_sempred((TemplateparameterlistContext)_localctx, predIndex);
		case 186: return templateargumentlist_sempred((TemplateargumentlistContext)_localctx, predIndex);
		case 199: return typeidlist_sempred((TypeidlistContext)_localctx, predIndex);
		}
		return true;
	}
	private bool nestednamespecifier_sempred(NestednamespecifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool capturelist_sempred(CapturelistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixexpression_sempred(PostfixexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 19);
		case 4: return Precpred(Context, 18);
		case 5: return Precpred(Context, 17);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 9);
		case 10: return Precpred(Context, 8);
		case 11: return Precpred(Context, 7);
		}
		return true;
	}
	private bool noptrnewdeclarator_sempred(NoptrnewdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool pmexpression_sempred(PmexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeexpression_sempred(MultiplicativeexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveexpression_sempred(AdditiveexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftexpression_sempred(ShiftexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalexpression_sempred(RelationalexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 4);
		case 22: return Precpred(Context, 3);
		case 23: return Precpred(Context, 2);
		case 24: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityexpression_sempred(EqualityexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Precpred(Context, 2);
		case 26: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andexpression_sempred(AndexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveorexpression_sempred(ExclusiveorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveorexpression_sempred(InclusiveorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalandexpression_sempred(LogicalandexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 2);
		case 31: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalorexpression_sempred(LogicalorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return Precpred(Context, 2);
		case 33: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return Precpred(Context, 1);
		}
		return true;
	}
	private bool statementseq_sempred(StatementseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return Precpred(Context, 1);
		}
		return true;
	}
	private bool declarationseq_sempred(DeclarationseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return Precpred(Context, 1);
		}
		return true;
	}
	private bool enumeratorlist_sempred(EnumeratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool attributespecifierseq_sempred(AttributespecifierseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 1);
		}
		return true;
	}
	private bool attributelist_sempred(AttributelistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return Precpred(Context, 3);
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool balancedtokenseq_sempred(BalancedtokenseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initdeclaratorlist_sempred(InitdeclaratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(Context, 1);
		}
		return true;
	}
	private bool noptrdeclarator_sempred(NoptrdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return Precpred(Context, 3);
		case 44: return Precpred(Context, 2);
		}
		return true;
	}
	private bool noptrabstractdeclarator_sempred(NoptrabstractdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return Precpred(Context, 5);
		case 46: return Precpred(Context, 3);
		}
		return true;
	}
	private bool noptrabstractpackdeclarator_sempred(NoptrabstractpackdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return Precpred(Context, 3);
		case 48: return Precpred(Context, 2);
		}
		return true;
	}
	private bool parameterdeclarationlist_sempred(ParameterdeclarationlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initializerlist_sempred(InitializerlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return Precpred(Context, 1);
		}
		return true;
	}
	private bool memberdeclaratorlist_sempred(MemberdeclaratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return Precpred(Context, 1);
		}
		return true;
	}
	private bool virtspecifierseq_sempred(VirtspecifierseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return Precpred(Context, 1);
		}
		return true;
	}
	private bool basespecifierlist_sempred(BasespecifierlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Precpred(Context, 1);
		}
		return true;
	}
	private bool templateparameterlist_sempred(TemplateparameterlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(Context, 1);
		}
		return true;
	}
	private bool templateargumentlist_sempred(TemplateargumentlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typeidlist_sempred(TypeidlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1A6', '\x9E6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x3', '\x2', 
		'\x5', '\x2', '\x1A0', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1AC', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x1B0', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x1BB', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x1BF', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x1CE', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x1D5', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'\x1DA', '\n', '\a', '\f', '\a', '\xE', '\a', '\x1DD', '\v', '\a', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '\x1E1', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x1E7', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\x1F1', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x1F8', 
		'\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\x1FE', '\n', '\f', '\a', '\f', '\x200', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\x203', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\x207', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\x20D', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x214', '\n', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x21A', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x21D', 
		'\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x220', '\n', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x223', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x22A', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x231', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x265', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x274', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x27A', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x280', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\x28D', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x290', 
		'\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x5', '\x15', '\x299', '\n', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x2A8', 
		'\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x2AE', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x2CC', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x5', '\x18', '\x2D1', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x2D5', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x2D9', '\n', '\x18', '\x3', '\x18', '\x5', '\x18', '\x2DC', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x2E0', '\n', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x2E6', '\n', '\x18', '\x5', '\x18', '\x2E8', '\n', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x2F0', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x2F4', '\n', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x2F7', 
		'\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x2FE', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x305', 
		'\n', '\x1C', '\a', '\x1C', '\x307', '\n', '\x1C', '\f', '\x1C', '\xE', 
		'\x1C', '\x30A', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x30E', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x312', 
		'\n', '\x1D', '\x3', '\x1E', '\x5', '\x1E', '\x315', '\n', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x31A', '\n', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x320', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x5', ' ', '\x32D', '\n', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\a', '!', '\x338', '\n', '!', '\f', '!', '\xE', '!', 
		'\x33B', '\v', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x349', '\n', '\"', '\f', 
		'\"', '\xE', '\"', '\x34C', '\v', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\a', '#', '\x357', '\n', '#', '\f', '#', '\xE', '#', '\x35A', '\v', 
		'#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\a', '$', '\x363', '\n', '$', '\f', '$', '\xE', '$', 
		'\x366', '\v', '$', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\a', '&', '\x379', '\n', '&', '\f', '&', '\xE', '&', '\x37C', '\v', 
		'&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', '\x387', 
		'\n', '\'', '\f', '\'', '\xE', '\'', '\x38A', '\v', '\'', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\a', '(', 
		'\x392', '\n', '(', '\f', '(', '\xE', '(', '\x395', '\v', '(', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\a', 
		')', '\x39D', '\n', ')', '\f', ')', '\xE', ')', '\x3A0', '\v', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\a', 
		'*', '\x3A8', '\n', '*', '\f', '*', '\xE', '*', '\x3AB', '\v', '*', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\a', '+', '\x3B6', '\n', '+', '\f', '+', 
		'\xE', '+', '\x3B9', '\v', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\a', 
		',', '\x3C4', '\n', ',', '\f', ',', '\xE', ',', '\x3C7', '\v', ',', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x5', '-', '\x3D0', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x3D8', '\n', '.', '\x3', 
		'/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x3E2', '\n', '\x30', '\f', 
		'\x30', '\xE', '\x30', '\x3E5', '\v', '\x30', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x3EB', '\n', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x5', '\x32', '\x3EF', '\n', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x5', '\x32', '\x3F3', '\n', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x5', '\x32', '\x3F7', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x5', '\x32', '\x3FB', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x5', '\x32', '\x400', '\n', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x403', '\n', '\x32', '\x3', '\x33', '\x5', '\x33', '\x406', '\n', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', 
		'\x40C', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x414', '\n', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x419', '\n', 
		'\x33', '\x3', '\x34', '\x5', '\x34', '\x41C', '\n', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x422', '\n', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x42B', '\n', '\x36', 
		'\f', '\x36', '\xE', '\x36', '\x42E', '\v', '\x36', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x444', 
		'\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x448', '\n', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x5', '\x38', '\x450', '\n', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x456', '\n', 
		'\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x46A', 
		'\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x46E', '\n', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x5', '\x39', '\x47B', '\n', '\x39', '\x3', ':', 
		'\x3', ':', '\x5', ':', '\x47F', '\n', ':', '\x3', ';', '\x5', ';', '\x482', 
		'\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', 
		'\x5', '<', '\x489', '\n', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x5', '=', '\x491', '\n', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x5', '=', '\x49B', '\n', '=', '\x3', '>', '\x3', '>', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\a', '?', '\x4A4', 
		'\n', '?', '\f', '?', '\xE', '?', '\x4A7', '\v', '?', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\x5', '@', '\x4B2', '\n', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x5', '\x41', '\x4BC', '\n', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x4C1', '\n', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x5', 
		'\x43', '\x4C8', '\n', '\x43', '\x3', '\x43', '\x5', '\x43', '\x4CB', 
		'\n', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', 
		'\x4D0', '\n', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', 
		'\x43', '\x4D5', '\n', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x5', 'G', '\x4EC', '\n', 'G', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x5', 'H', '\x4F1', '\n', 'H', '\x3', 'I', '\x3', 'I', 
		'\x5', 'I', '\x4F5', '\n', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 
		'I', '\x4FA', '\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x5', 'J', '\x502', '\n', 'J', '\x3', 'K', '\x3', 
		'K', '\x5', 'K', '\x506', '\n', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x5', 'K', '\x50C', '\n', 'K', '\x3', 'K', '\x3', 'K', '\x5', 
		'K', '\x510', '\n', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x514', 
		'\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\a', 'L', '\x519', '\n', 
		'L', '\f', 'L', '\xE', 'L', '\x51C', '\v', 'L', '\x3', 'L', '\x3', 'L', 
		'\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', 
		'\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x52E', '\n', 'Q', '\x3', 'R', '\x3', 
		'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', '\x536', 
		'\n', 'S', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x53A', '\n', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x53F', '\n', 'T', '\x3', 'U', 
		'\x3', 'U', '\x5', 'U', '\x543', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x5', 'U', '\x548', '\n', 'U', '\x3', 'V', '\x5', 'V', '\x54B', 
		'\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x562', '\n', 
		'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\x568', 
		'\n', 'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x573', '\n', 
		'X', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\x577', '\n', 'Y', '\x3', 'Y', 
		'\x5', 'Y', '\x57A', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\x584', 
		'\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', 
		'\x58A', '\n', 'Y', '\x3', 'Y', '\x5', 'Y', '\x58D', '\n', 'Y', '\x3', 
		'Z', '\x3', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\x594', 
		'\n', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', 
		'\x3', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\x59E', '\n', '[', '\x3', 
		'\\', '\x3', '\\', '\x5', '\\', '\x5A2', '\n', '\\', '\x3', '\\', '\x5', 
		'\\', '\x5A5', '\n', '\\', '\x3', '\\', '\x5', '\\', '\x5A8', '\n', '\\', 
		'\x3', '\\', '\x3', '\\', '\x5', '\\', '\x5AC', '\n', '\\', '\x3', '\\', 
		'\x3', '\\', '\x3', '\\', '\x5', '\\', '\x5B1', '\n', '\\', '\x5', '\\', 
		'\x5B3', '\n', '\\', '\x3', ']', '\x3', ']', '\x5', ']', '\x5B7', '\n', 
		']', '\x3', ']', '\x3', ']', '\x5', ']', '\x5BB', '\n', ']', '\x3', ']', 
		'\x3', ']', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', 
		'\x5', '^', '\x5C4', '\n', '^', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\a', 
		'`', '\x5CF', '\n', '`', '\f', '`', '\xE', '`', '\x5D2', '\v', '`', '\x3', 
		'\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x5', 
		'\x61', '\x5D9', '\n', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', 
		'\x3', '\x63', '\x5', '\x63', '\x5DF', '\n', '\x63', '\x3', '\x64', '\x3', 
		'\x64', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', '\x5E5', '\n', '\x65', 
		'\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x5E9', '\n', '\x66', '\x3', 
		'g', '\x5', 'g', '\x5EC', '\n', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'h', '\x5', 'h', '\x5F5', '\n', 
		'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 
		'h', '\x3', 'i', '\x5', 'i', '\x5FE', '\n', 'i', '\x3', 'i', '\x3', 'i', 
		'\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'j', '\x5', 'j', '\x606', '\n', 
		'j', '\x3', 'k', '\x3', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'm', '\x5', 'm', '\x611', '\n', 'm', 
		'\x3', 'm', '\x3', 'm', '\x3', 'n', '\x3', 'n', '\x5', 'n', '\x617', '\n', 
		'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 
		'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x5', 'n', '\x622', '\n', 'n', 
		'\x3', 'o', '\x5', 'o', '\x625', '\n', 'o', '\x3', 'o', '\x3', 'o', '\x3', 
		'o', '\x5', 'o', '\x62A', '\n', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', 
		'\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', 
		'\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', '\x639', '\n', 
		'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', '\x63F', 
		'\n', 'q', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', 
		'\a', 'r', '\x646', '\n', 'r', '\f', 'r', '\xE', 'r', '\x649', '\v', 'r', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x5', 's', '\x652', '\n', 's', '\x3', 't', '\x3', 't', '\x3', 
		't', '\x3', 't', '\x5', 't', '\x658', '\n', 't', '\x3', 't', '\x3', 't', 
		'\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\x660', '\n', 
		't', '\x3', 't', '\x3', 't', '\x5', 't', '\x664', '\n', 't', '\x3', 'u', 
		'\x3', 'u', '\x5', 'u', '\x668', '\n', 'u', '\x3', 'u', '\x3', 'u', '\x3', 
		'u', '\x5', 'u', '\x66D', '\n', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', 
		'\x5', 'u', '\x672', '\n', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 
		'u', '\x3', 'u', '\a', 'u', '\x679', '\n', 'u', '\f', 'u', '\xE', 'u', 
		'\x67C', '\v', 'u', '\x3', 'v', '\x3', 'v', '\x5', 'v', '\x680', '\n', 
		'v', '\x3', 'w', '\x3', 'w', '\x5', 'w', '\x684', '\n', 'w', '\x3', 'x', 
		'\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'y', '\x3', 'y', '\x3', 'z', 
		'\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', '{', '\x3', '{', '\x5', '{', 
		'\x692', '\n', '{', '\x3', '{', '\x3', '{', '\a', '{', '\x696', '\n', 
		'{', '\f', '{', '\xE', '{', '\x699', '\v', '{', '\x3', '|', '\x3', '|', 
		'\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', 
		'\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x6', '|', 
		'\x6A8', '\n', '|', '\r', '|', '\xE', '|', '\x6A9', '\x5', '|', '\x6AC', 
		'\n', '|', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', 
		'\x3', '}', '\a', '}', '\x6B4', '\n', '}', '\f', '}', '\xE', '}', '\x6B7', 
		'\v', '}', '\x3', '~', '\x3', '~', '\x5', '~', '\x6BB', '\n', '~', '\x3', 
		'\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x5', 
		'\x7F', '\x6C2', '\n', '\x7F', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', 
		'\x3', '\x80', '\x5', '\x80', '\x6C8', '\n', '\x80', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x5', '\x81', '\x6CD', '\n', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x5', '\x81', '\x6D3', '\n', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x5', '\x81', '\x6DA', '\n', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x5', '\x81', '\x6DE', '\n', '\x81', '\a', '\x81', '\x6E0', '\n', '\x81', 
		'\f', '\x81', '\xE', '\x81', '\x6E3', '\v', '\x81', '\x3', '\x82', '\x3', 
		'\x82', '\x3', '\x82', '\x3', '\x82', '\x5', '\x82', '\x6E9', '\n', '\x82', 
		'\x3', '\x82', '\x5', '\x82', '\x6EC', '\n', '\x82', '\x3', '\x82', '\x5', 
		'\x82', '\x6EF', '\n', '\x82', '\x3', '\x82', '\x5', '\x82', '\x6F2', 
		'\n', '\x82', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x5', '\x83', 
		'\x6F7', '\n', '\x83', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\x6FB', 
		'\n', '\x84', '\x3', '\x84', '\x5', '\x84', '\x6FE', '\n', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x5', '\x84', '\x702', '\n', '\x84', '\x3', '\x84', 
		'\x3', '\x84', '\x5', '\x84', '\x706', '\n', '\x84', '\x3', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x5', '\x84', '\x70B', '\n', '\x84', '\x3', '\x84', 
		'\x5', '\x84', '\x70E', '\n', '\x84', '\x5', '\x84', '\x710', '\n', '\x84', 
		'\x3', '\x85', '\x3', '\x85', '\x5', '\x85', '\x714', '\n', '\x85', '\x3', 
		'\x86', '\x3', '\x86', '\x3', '\x87', '\x3', '\x87', '\x3', '\x88', '\x5', 
		'\x88', '\x71B', '\n', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x89', 
		'\x3', '\x89', '\x5', '\x89', '\x721', '\n', '\x89', '\x3', '\x8A', '\x3', 
		'\x8A', '\x5', '\x8A', '\x725', '\n', '\x8A', '\x3', '\x8A', '\x3', '\x8A', 
		'\x3', '\x8A', '\x3', '\x8A', '\x5', '\x8A', '\x72B', '\n', '\x8A', '\x3', 
		'\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x5', '\x8B', '\x730', '\n', '\x8B', 
		'\x5', '\x8B', '\x732', '\n', '\x8B', '\x3', '\x8C', '\x3', '\x8C', '\x3', 
		'\x8C', '\x3', '\x8C', '\x5', '\x8C', '\x738', '\n', '\x8C', '\x3', '\x8C', 
		'\x3', '\x8C', '\x5', '\x8C', '\x73C', '\n', '\x8C', '\x3', '\x8C', '\x3', 
		'\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x5', '\x8C', '\x742', '\n', '\x8C', 
		'\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', 
		'\x5', '\x8C', '\x749', '\n', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x5', 
		'\x8C', '\x74D', '\n', '\x8C', '\a', '\x8C', '\x74F', '\n', '\x8C', '\f', 
		'\x8C', '\xE', '\x8C', '\x752', '\v', '\x8C', '\x3', '\x8D', '\x3', '\x8D', 
		'\x3', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\x758', '\n', '\x8D', '\x3', 
		'\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', 
		'\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x5', '\x8E', '\x762', '\n', '\x8E', 
		'\x3', '\x8E', '\x3', '\x8E', '\x5', '\x8E', '\x766', '\n', '\x8E', '\a', 
		'\x8E', '\x768', '\n', '\x8E', '\f', '\x8E', '\xE', '\x8E', '\x76B', '\v', 
		'\x8E', '\x3', '\x8F', '\x5', '\x8F', '\x76E', '\n', '\x8F', '\x3', '\x8F', 
		'\x5', '\x8F', '\x771', '\n', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', 
		'\x8F', '\x3', '\x8F', '\x5', '\x8F', '\x777', '\n', '\x8F', '\x3', '\x90', 
		'\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', 
		'\a', '\x90', '\x77F', '\n', '\x90', '\f', '\x90', '\xE', '\x90', '\x782', 
		'\v', '\x90', '\x3', '\x91', '\x5', '\x91', '\x785', '\n', '\x91', '\x3', 
		'\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\x78B', 
		'\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\x793', '\n', '\x91', '\x3', 
		'\x91', '\x3', '\x91', '\x5', '\x91', '\x797', '\n', '\x91', '\x3', '\x91', 
		'\x5', '\x91', '\x79A', '\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x5', 
		'\x91', '\x79E', '\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x5', '\x91', '\x7A3', '\n', '\x91', '\x3', '\x92', '\x5', '\x92', '\x7A6', 
		'\n', '\x92', '\x3', '\x92', '\x5', '\x92', '\x7A9', '\n', '\x92', '\x3', 
		'\x92', '\x3', '\x92', '\x5', '\x92', '\x7AD', '\n', '\x92', '\x3', '\x92', 
		'\x3', '\x92', '\x3', '\x93', '\x5', '\x93', '\x7B2', '\n', '\x93', '\x3', 
		'\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', 
		'\x93', '\x3', '\x93', '\x3', '\x93', '\x5', '\x93', '\x7BC', '\n', '\x93', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', 
		'\x5', '\x94', '\x7C3', '\n', '\x94', '\x3', '\x95', '\x3', '\x95', '\x3', 
		'\x95', '\x5', '\x95', '\x7C8', '\n', '\x95', '\x3', '\x96', '\x3', '\x96', 
		'\x5', '\x96', '\x7CC', '\n', '\x96', '\x3', '\x97', '\x3', '\x97', '\x3', 
		'\x97', '\x5', '\x97', '\x7D1', '\n', '\x97', '\x3', '\x97', '\x3', '\x97', 
		'\x3', '\x97', '\x3', '\x97', '\x5', '\x97', '\x7D7', '\n', '\x97', '\a', 
		'\x97', '\x7D9', '\n', '\x97', '\f', '\x97', '\xE', '\x97', '\x7DC', '\v', 
		'\x97', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x5', '\x98', '\x7E1', 
		'\n', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', 
		'\x5', '\x98', '\x7E7', '\n', '\x98', '\x3', '\x99', '\x3', '\x99', '\x5', 
		'\x99', '\x7EB', '\n', '\x99', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', 
		'\x5', '\x9A', '\x7F0', '\n', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', 
		'\x9B', '\x3', '\x9B', '\x5', '\x9B', '\x7F6', '\n', '\x9B', '\x3', '\x9B', 
		'\x3', '\x9B', '\x5', '\x9B', '\x7FA', '\n', '\x9B', '\x3', '\x9B', '\x5', 
		'\x9B', '\x7FD', '\n', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', 
		'\x801', '\n', '\x9B', '\x3', '\x9B', '\x5', '\x9B', '\x804', '\n', '\x9B', 
		'\x5', '\x9B', '\x806', '\n', '\x9B', '\x3', '\x9C', '\x5', '\x9C', '\x809', 
		'\n', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9D', '\x3', '\x9D', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', 
		'\x813', '\n', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', 
		'\x9F', '\x818', '\n', '\x9F', '\x5', '\x9F', '\x81A', '\n', '\x9F', '\x3', 
		'\xA0', '\x5', '\xA0', '\x81D', '\n', '\xA0', '\x3', '\xA0', '\x5', '\xA0', 
		'\x820', '\n', '\xA0', '\x3', '\xA0', '\x5', '\xA0', '\x823', '\n', '\xA0', 
		'\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', 
		'\x3', '\xA0', '\x3', '\xA0', '\x5', '\xA0', '\x82C', '\n', '\xA0', '\x3', 
		'\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', 
		'\xA1', '\a', '\xA1', '\x834', '\n', '\xA1', '\f', '\xA1', '\xE', '\xA1', 
		'\x837', '\v', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\x83B', 
		'\n', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\x83E', '\n', '\xA2', '\x3', 
		'\xA2', '\x3', '\xA2', '\x5', '\xA2', '\x842', '\n', '\xA2', '\x3', '\xA2', 
		'\x5', '\xA2', '\x845', '\n', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\x848', 
		'\n', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\x84C', '\n', 
		'\xA2', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\a', '\xA3', '\x853', '\n', '\xA3', '\f', '\xA3', '\xE', '\xA3', 
		'\x856', '\v', '\xA3', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA5', '\x3', 
		'\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x5', '\xA7', '\x864', 
		'\n', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', 
		'\x5', '\xA7', '\x86A', '\n', '\xA7', '\a', '\xA7', '\x86C', '\n', '\xA7', 
		'\f', '\xA7', '\xE', '\xA7', '\x86F', '\v', '\xA7', '\x3', '\xA8', '\x5', 
		'\xA8', '\x872', '\n', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x5', '\xA8', 
		'\x876', '\n', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x5', '\xA8', '\x87A', 
		'\n', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x5', '\xA8', '\x87E', '\n', 
		'\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x5', '\xA8', '\x882', '\n', '\xA8', 
		'\x3', '\xA8', '\x3', '\xA8', '\x5', '\xA8', '\x886', '\n', '\xA8', '\x3', 
		'\xA9', '\x5', '\xA9', '\x889', '\n', '\xA9', '\x3', '\xA9', '\x3', '\xA9', 
		'\x5', '\xA9', '\x88D', '\n', '\xA9', '\x3', '\xAA', '\x3', '\xAA', '\x3', 
		'\xAB', '\x3', '\xAB', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', 
		'\xAD', '\x3', '\xAD', '\x5', '\xAD', '\x898', '\n', '\xAD', '\x3', '\xAE', 
		'\x3', '\xAE', '\x5', '\xAE', '\x89C', '\n', '\xAE', '\x3', '\xAF', '\x3', 
		'\xAF', '\x3', '\xAF', '\x3', '\xB0', '\x3', '\xB0', '\x5', '\xB0', '\x8A3', 
		'\n', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x5', '\xB0', '\x8A7', '\n', 
		'\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x5', '\xB0', '\x8AC', 
		'\n', '\xB0', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x5', '\xB1', 
		'\x8B1', '\n', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', 
		'\xB1', '\x3', '\xB1', '\x5', '\xB1', '\x8B8', '\n', '\xB1', '\x3', '\xB2', 
		'\x3', '\xB2', '\x5', '\xB2', '\x8BC', '\n', '\xB2', '\x3', '\xB3', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x5', '\xB4', '\x8C6', '\n', '\xB4', '\x3', '\xB5', 
		'\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', 
		'\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', 
		'\x3', '\xB6', '\a', '\xB6', '\x8D4', '\n', '\xB6', '\f', '\xB6', '\xE', 
		'\xB6', '\x8D7', '\v', '\xB6', '\x3', '\xB7', '\x3', '\xB7', '\x5', '\xB7', 
		'\x8DB', '\n', '\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x8DF', 
		'\n', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x8E2', '\n', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x8E6', '\n', '\xB8', '\x3', '\xB8', 
		'\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x8EC', '\n', 
		'\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x8EF', '\n', '\xB8', '\x3', '\xB8', 
		'\x3', '\xB8', '\x5', '\xB8', '\x8F3', '\n', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x8FD', '\n', '\xB8', '\x3', '\xB8', 
		'\x5', '\xB8', '\x900', '\n', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x908', 
		'\n', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', 
		'\x90D', '\n', '\xB8', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x5', 
		'\xB9', '\x912', '\n', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xBA', 
		'\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x91A', '\n', 
		'\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\x5', '\xBA', '\x921', '\n', '\xBA', '\x3', '\xBA', '\x3', '\xBA', 
		'\x5', '\xBA', '\x925', '\n', '\xBA', '\x3', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x92C', '\n', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', 
		'\x932', '\n', '\xBC', '\a', '\xBC', '\x934', '\n', '\xBC', '\f', '\xBC', 
		'\xE', '\xBC', '\x937', '\v', '\xBC', '\x3', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x5', '\xBD', '\x93C', '\n', '\xBD', '\x3', '\xBE', '\x3', '\xBE', 
		'\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', 
		'\x5', '\xBE', '\x945', '\n', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x5', 
		'\xBE', '\x949', '\n', '\xBE', '\x3', '\xBF', '\x5', '\xBF', '\x94C', 
		'\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xC0', 
		'\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC1', 
		'\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC2', '\x3', '\xC2', 
		'\x5', '\xC2', '\x95C', '\n', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', 
		'\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x5', '\xC3', '\x963', '\n', '\xC3', 
		'\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', 
		'\x3', '\xC4', '\x3', '\xC5', '\x5', '\xC5', '\x96C', '\n', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x972', 
		'\n', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x976', '\n', 
		'\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x979', '\n', '\xC5', '\x3', '\xC6', 
		'\x3', '\xC6', '\x5', '\xC6', '\x97D', '\n', '\xC6', '\x3', '\xC7', '\x3', 
		'\xC7', '\x5', '\xC7', '\x981', '\n', '\xC7', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x5', '\xC8', '\x986', '\n', '\xC8', '\x3', '\xC8', '\x3', 
		'\xC8', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x98D', 
		'\n', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', 
		'\x5', '\xC9', '\x993', '\n', '\xC9', '\a', '\xC9', '\x995', '\n', '\xC9', 
		'\f', '\xC9', '\xE', '\xC9', '\x998', '\v', '\xC9', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', 
		'\xCA', '\x9A0', '\n', '\xCA', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', '\x9D5', '\n', 
		'\xCB', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\x9DE', '\n', '\xCC', 
		'\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCF', 
		'\x3', '\xCF', '\x3', '\xCF', '\x2', '$', '\f', '\x16', ' ', '\x36', '@', 
		'\x42', '\x44', '\x46', 'J', 'L', 'N', 'P', 'R', 'T', 'V', '^', 'j', '|', 
		'\xBE', '\xE2', '\xE8', '\xF4', '\xF8', '\x100', '\x116', '\x11A', '\x11E', 
		'\x12C', '\x140', '\x144', '\x14C', '\x16A', '\x176', '\x190', '\xD0', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 
		't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', 
		'\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', '\xBE', 
		'\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', '\xCC', '\xCE', '\xD0', 
		'\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', '\xDE', '\xE0', '\xE2', 
		'\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', '\xF0', '\xF2', '\xF4', 
		'\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', '\x102', '\x104', '\x106', 
		'\x108', '\x10A', '\x10C', '\x10E', '\x110', '\x112', '\x114', '\x116', 
		'\x118', '\x11A', '\x11C', '\x11E', '\x120', '\x122', '\x124', '\x126', 
		'\x128', '\x12A', '\x12C', '\x12E', '\x130', '\x132', '\x134', '\x136', 
		'\x138', '\x13A', '\x13C', '\x13E', '\x140', '\x142', '\x144', '\x146', 
		'\x148', '\x14A', '\x14C', '\x14E', '\x150', '\x152', '\x154', '\x156', 
		'\x158', '\x15A', '\x15C', '\x15E', '\x160', '\x162', '\x164', '\x166', 
		'\x168', '\x16A', '\x16C', '\x16E', '\x170', '\x172', '\x174', '\x176', 
		'\x178', '\x17A', '\x17C', '\x17E', '\x180', '\x182', '\x184', '\x186', 
		'\x188', '\x18A', '\x18C', '\x18E', '\x190', '\x192', '\x194', '\x196', 
		'\x198', '\x19A', '\x19C', '\x2', '\x12', '\x4', '\x2', '\x16F', '\x16F', 
		'\x173', '\x173', '\x5', '\x2', '\x3', '\x4', '\x169', '\x16B', '\x16F', 
		'\x171', '\x3', '\x2', '\x17E', '\x17F', '\x5', '\x2', '\x173', '\x173', 
		'\x176', '\x17D', '\x180', '\x181', '\x3', '\x2', '\x163', '\x164', '\x3', 
		'\x2', '\x11', '\x30', '\x5', '\x2', '\x130', '\x130', '\x13A', '\x13A', 
		'\x15E', '\x15E', '\x5', '\x2', ',', ',', '\x32', '\x115', '\x161', '\x161', 
		'\x3', '\x2', '\x163', '\x168', '\x4', '\x2', '\x124', '\x124', '\x160', 
		'\x160', '\x4', '\x2', '\x5', '\x5', '\x16F', '\x16F', '\x5', '\x2', '\x123', 
		'\x123', '\x150', '\x150', '\x15B', '\x15B', '\x4', '\x2', '\x134', '\x134', 
		'\x143', '\x143', '\x3', '\x2', '\x144', '\x146', '\x4', '\x2', '\x133', 
		'\x133', '\x156', '\x156', '\x3', '\x2', '\x19F', '\x1A2', '\x2', '\xB11', 
		'\x2', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1AB', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\b', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x1BC', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\xE', '\x1DE', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x12', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x1F2', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x18', '\x206', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x213', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x215', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x264', '\x3', '\x2', '\x2', '\x2', '\"', '\x291', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x293', '\x3', '\x2', '\x2', '\x2', '&', '\x295', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x2AD', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x2CB', '\x3', '\x2', '\x2', '\x2', ',', '\x2CD', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x30', '\x2E9', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x2ED', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x36', '\x2F8', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x311', '\x3', '\x2', '\x2', '\x2', ':', '\x31F', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x321', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x32C', '\x3', '\x2', '\x2', '\x2', '@', '\x32E', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x44', '\x34D', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x35B', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x367', '\x3', '\x2', '\x2', '\x2', 'J', '\x369', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x37D', '\x3', '\x2', '\x2', '\x2', 'N', '\x38B', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x396', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x3A1', '\x3', '\x2', '\x2', '\x2', 'T', '\x3AC', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x3BA', '\x3', '\x2', '\x2', '\x2', 'X', '\x3CF', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x3D7', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x3D9', '\x3', '\x2', '\x2', '\x2', '^', '\x3DB', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x3E6', '\x3', '\x2', '\x2', '\x2', '\x62', '\x402', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x418', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x41B', '\x3', '\x2', '\x2', '\x2', 'h', '\x41F', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x425', '\x3', '\x2', '\x2', '\x2', 'l', '\x443', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x455', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x47A', '\x3', '\x2', '\x2', '\x2', 'r', '\x47E', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x481', '\x3', '\x2', '\x2', '\x2', 'v', '\x488', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x49A', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x49C', '\x3', '\x2', '\x2', '\x2', '|', '\x49E', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x4B1', '\x3', '\x2', '\x2', '\x2', '\x80', '\x4BB', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x4BD', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\x86', '\x4D6', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x4DE', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x4E0', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x4EB', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x4F0', '\x3', '\x2', '\x2', '\x2', '\x90', '\x4F9', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x501', '\x3', '\x2', '\x2', '\x2', '\x94', '\x513', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x515', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x51F', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x521', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x526', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x528', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x52D', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x52F', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x535', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x53E', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x547', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x561', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x567', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x572', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\x58C', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x58E', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\x59D', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\x5B2', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x5B4', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\x5C3', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x5C5', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\x5C8', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\x5D8', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x5DA', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\x5DE', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x5E0', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\x5E4', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\x5E8', '\x3', '\x2', '\x2', '\x2', '\xCC', '\x5EB', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\x5F4', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x5FD', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\x605', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\x607', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x609', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\x610', '\x3', '\x2', '\x2', '\x2', '\xDA', '\x621', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\x624', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\x62E', '\x3', '\x2', '\x2', '\x2', '\xE0', '\x63E', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\x640', '\x3', '\x2', '\x2', '\x2', '\xE4', '\x651', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\x663', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\x66C', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x67D', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\x683', '\x3', '\x2', '\x2', '\x2', '\xEE', '\x685', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\x689', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\x68B', '\x3', '\x2', '\x2', '\x2', '\xF4', '\x68F', '\x3', '\x2', 
		'\x2', '\x2', '\xF6', '\x6AB', '\x3', '\x2', '\x2', '\x2', '\xF8', '\x6AD', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\x6B8', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\x6C1', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x6C7', '\x3', '\x2', 
		'\x2', '\x2', '\x100', '\x6D2', '\x3', '\x2', '\x2', '\x2', '\x102', '\x6E4', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x6F3', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x70F', '\x3', '\x2', '\x2', '\x2', '\x108', '\x711', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x715', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x717', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x71A', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x71E', '\x3', '\x2', '\x2', '\x2', '\x112', '\x72A', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x731', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x741', '\x3', '\x2', '\x2', '\x2', '\x118', '\x757', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x759', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x776', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x778', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x7A2', '\x3', '\x2', '\x2', '\x2', '\x122', '\x7A5', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x7BB', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x7C2', '\x3', '\x2', '\x2', '\x2', '\x128', '\x7C7', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x7CB', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x7CD', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x7E6', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x7EA', '\x3', '\x2', '\x2', '\x2', '\x132', '\x7EC', 
		'\x3', '\x2', '\x2', '\x2', '\x134', '\x805', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\x808', '\x3', '\x2', '\x2', '\x2', '\x138', '\x80C', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x80E', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x819', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x82B', '\x3', '\x2', '\x2', 
		'\x2', '\x140', '\x82D', '\x3', '\x2', '\x2', '\x2', '\x142', '\x84B', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x84D', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x857', '\x3', '\x2', '\x2', '\x2', '\x148', '\x859', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x85D', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x860', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x885', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x88C', '\x3', '\x2', '\x2', '\x2', '\x152', '\x88E', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x890', '\x3', '\x2', '\x2', '\x2', 
		'\x156', '\x892', '\x3', '\x2', '\x2', '\x2', '\x158', '\x895', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x899', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x89D', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x8AB', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x8B7', '\x3', '\x2', '\x2', '\x2', '\x162', '\x8BB', 
		'\x3', '\x2', '\x2', '\x2', '\x164', '\x8BD', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x8C5', '\x3', '\x2', '\x2', '\x2', '\x168', '\x8C7', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x8CD', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x8DA', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x90C', '\x3', '\x2', '\x2', 
		'\x2', '\x170', '\x90E', '\x3', '\x2', '\x2', '\x2', '\x172', '\x924', 
		'\x3', '\x2', '\x2', '\x2', '\x174', '\x926', '\x3', '\x2', '\x2', '\x2', 
		'\x176', '\x928', '\x3', '\x2', '\x2', '\x2', '\x178', '\x93B', '\x3', 
		'\x2', '\x2', '\x2', '\x17A', '\x948', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x94B', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x950', '\x3', '\x2', '\x2', 
		'\x2', '\x180', '\x955', '\x3', '\x2', '\x2', '\x2', '\x182', '\x959', 
		'\x3', '\x2', '\x2', '\x2', '\x184', '\x960', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x964', '\x3', '\x2', '\x2', '\x2', '\x188', '\x978', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x97A', '\x3', '\x2', '\x2', '\x2', '\x18C', 
		'\x980', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x982', '\x3', '\x2', '\x2', 
		'\x2', '\x190', '\x989', '\x3', '\x2', '\x2', '\x2', '\x192', '\x99F', 
		'\x3', '\x2', '\x2', '\x2', '\x194', '\x9D4', '\x3', '\x2', '\x2', '\x2', 
		'\x196', '\x9DD', '\x3', '\x2', '\x2', '\x2', '\x198', '\x9DF', '\x3', 
		'\x2', '\x2', '\x2', '\x19A', '\x9E1', '\x3', '\x2', '\x2', '\x2', '\x19C', 
		'\x9E3', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x1A0', '\x5', '|', '?', 
		'\x2', '\x19F', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', 
		'\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'\x1A1', '\x1A2', '\a', '\x2', '\x2', '\x3', '\x1A2', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x1A3', '\x1AC', '\x5', '\x196', '\xCC', '\x2', '\x1A4', 
		'\x1AC', '\a', '\x153', '\x2', '\x2', '\x1A5', '\x1A6', '\a', '\x163', 
		'\x2', '\x2', '\x1A6', '\x1A7', '\x5', '^', '\x30', '\x2', '\x1A7', '\x1A8', 
		'\a', '\x164', '\x2', '\x2', '\x1A8', '\x1AC', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1AC', '\x5', '\x6', '\x4', '\x2', '\x1AA', '\x1AC', '\x5', 
		'\xE', '\b', '\x2', '\x1AB', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1AB', 
		'\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x1AB', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '\x1B0', '\x5', '\b', '\x5', '\x2', '\x1AE', '\x1B0', '\x5', 
		'\n', '\x6', '\x2', '\x1AF', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x1B1', '\x1BB', '\a', '\x195', '\x2', '\x2', '\x1B2', '\x1BB', 
		'\x5', '\x164', '\xB3', '\x2', '\x1B3', '\x1BB', '\x5', '\x156', '\xAC', 
		'\x2', '\x1B4', '\x1BB', '\x5', '\x166', '\xB4', '\x2', '\x1B5', '\x1B6', 
		'\a', '\x171', '\x2', '\x2', '\x1B6', '\x1BB', '\x5', '\x130', '\x99', 
		'\x2', '\x1B7', '\x1B8', '\a', '\x171', '\x2', '\x2', '\x1B8', '\x1BB', 
		'\x5', '\xAE', 'X', '\x2', '\x1B9', '\x1BB', '\x5', '\x172', '\xBA', '\x2', 
		'\x1BA', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B2', '\x3', 
		'\x2', '\x2', '\x2', '\x1BA', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B5', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x1BC', '\x1BE', '\x5', '\f', '\a', '\x2', '\x1BD', '\x1BF', '\a', '\x152', 
		'\x2', '\x2', '\x1BE', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C0', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\x1C1', '\x5', '\b', '\x5', '\x2', '\x1C1', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x1C2', '\x1C3', '\b', '\a', '\x1', '\x2', '\x1C3', '\x1CE', 
		'\a', '\x18F', '\x2', '\x2', '\x1C4', '\x1C5', '\x5', '\xAC', 'W', '\x2', 
		'\x1C5', '\x1C6', '\a', '\x18F', '\x2', '\x2', '\x1C6', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1C7', '\x1C8', '\x5', '\xC4', '\x63', '\x2', '\x1C8', 
		'\x1C9', '\a', '\x18F', '\x2', '\x2', '\x1C9', '\x1CE', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA', '\x1CB', '\x5', '\xAE', 'X', '\x2', '\x1CB', '\x1CC', 
		'\a', '\x18F', '\x2', '\x2', '\x1CC', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'\x1CD', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1C4', '\x3', 
		'\x2', '\x2', '\x2', '\x1CD', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1CD', 
		'\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1DB', '\x3', '\x2', '\x2', 
		'\x2', '\x1CF', '\x1D0', '\f', '\x4', '\x2', '\x2', '\x1D0', '\x1D1', 
		'\a', '\x195', '\x2', '\x2', '\x1D1', '\x1DA', '\a', '\x18F', '\x2', '\x2', 
		'\x1D2', '\x1D4', '\f', '\x3', '\x2', '\x2', '\x1D3', '\x1D5', '\a', '\x152', 
		'\x2', '\x2', '\x1D4', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x3', '\x2', '\x2', '\x2', 
		'\x1D6', '\x1D7', '\x5', '\x170', '\xB9', '\x2', '\x1D7', '\x1D8', '\a', 
		'\x18F', '\x2', '\x2', '\x1D8', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1D9', 
		'\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1D2', '\x3', '\x2', '\x2', 
		'\x2', '\x1DA', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x1DC', '\r', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DB', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE', '\x1E0', '\x5', '\x10', '\t', '\x2', '\x1DF', '\x1E1', 
		'\x5', '\x1E', '\x10', '\x2', '\x1E0', '\x1DF', '\x3', '\x2', '\x2', '\x2', 
		'\x1E0', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\x3', 
		'\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\x5', 'h', '\x35', '\x2', '\x1E3', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E6', '\a', '\x165', '\x2', 
		'\x2', '\x1E5', '\x1E7', '\x5', '\x12', '\n', '\x2', '\x1E6', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E7', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\a', 
		'\x166', '\x2', '\x2', '\x1E9', '\x11', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x1F1', '\x5', '\x14', '\v', '\x2', '\x1EB', '\x1F1', '\x5', '\x16', 
		'\f', '\x2', '\x1EC', '\x1ED', '\x5', '\x14', '\v', '\x2', '\x1ED', '\x1EE', 
		'\a', '\x18A', '\x2', '\x2', '\x1EE', '\x1EF', '\x5', '\x16', '\f', '\x2', 
		'\x1EF', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1EA', '\x3', 
		'\x2', '\x2', '\x2', '\x1F0', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1F0', 
		'\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x1F2', '\x1F3', '\t', '\x2', '\x2', '\x2', '\x1F3', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\b', '\f', '\x1', '\x2', '\x1F5', 
		'\x1F7', '\x5', '\x18', '\r', '\x2', '\x1F6', '\x1F8', '\a', '\x193', 
		'\x2', '\x2', '\x1F7', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', 
		'\x3', '\x2', '\x2', '\x2', '\x1F8', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'\x1F9', '\x1FA', '\f', '\x3', '\x2', '\x2', '\x1FA', '\x1FB', '\a', '\x18A', 
		'\x2', '\x2', '\x1FB', '\x1FD', '\x5', '\x18', '\r', '\x2', '\x1FC', '\x1FE', 
		'\a', '\x193', '\x2', '\x2', '\x1FD', '\x1FC', '\x3', '\x2', '\x2', '\x2', 
		'\x1FD', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x200', '\x3', 
		'\x2', '\x2', '\x2', '\x1FF', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x200', 
		'\x203', '\x3', '\x2', '\x2', '\x2', '\x201', '\x1FF', '\x3', '\x2', '\x2', 
		'\x2', '\x201', '\x202', '\x3', '\x2', '\x2', '\x2', '\x202', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x203', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'\x204', '\x207', '\x5', '\x1A', '\xE', '\x2', '\x205', '\x207', '\x5', 
		'\x1C', '\xF', '\x2', '\x206', '\x204', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x205', '\x3', '\x2', '\x2', '\x2', '\x207', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x208', '\x20D', '\a', '\x195', '\x2', '\x2', '\x209', '\x20A', 
		'\a', '\x16F', '\x2', '\x2', '\x20A', '\x20D', '\a', '\x195', '\x2', '\x2', 
		'\x20B', '\x20D', '\a', '\x153', '\x2', '\x2', '\x20C', '\x208', '\x3', 
		'\x2', '\x2', '\x2', '\x20C', '\x209', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x20E', '\x20F', '\a', '\x195', '\x2', '\x2', '\x20F', '\x214', 
		'\x5', '\x126', '\x94', '\x2', '\x210', '\x211', '\a', '\x16F', '\x2', 
		'\x2', '\x211', '\x212', '\a', '\x195', '\x2', '\x2', '\x212', '\x214', 
		'\x5', '\x126', '\x94', '\x2', '\x213', '\x20E', '\x3', '\x2', '\x2', 
		'\x2', '\x213', '\x210', '\x3', '\x2', '\x2', '\x2', '\x214', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x215', '\x216', '\a', '\x163', '\x2', '\x2', 
		'\x216', '\x217', '\x5', '\x11C', '\x8F', '\x2', '\x217', '\x219', '\a', 
		'\x164', '\x2', '\x2', '\x218', '\x21A', '\a', '\x13D', '\x2', '\x2', 
		'\x219', '\x218', '\x3', '\x2', '\x2', '\x2', '\x219', '\x21A', '\x3', 
		'\x2', '\x2', '\x2', '\x21A', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'\x21D', '\x5', '\x18C', '\xC7', '\x2', '\x21C', '\x21B', '\x3', '\x2', 
		'\x2', '\x2', '\x21C', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21F', 
		'\x3', '\x2', '\x2', '\x2', '\x21E', '\x220', '\x5', '\xE2', 'r', '\x2', 
		'\x21F', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x220', '\x3', 
		'\x2', '\x2', '\x2', '\x220', '\x222', '\x3', '\x2', '\x2', '\x2', '\x221', 
		'\x223', '\x5', '\x104', '\x83', '\x2', '\x222', '\x221', '\x3', '\x2', 
		'\x2', '\x2', '\x222', '\x223', '\x3', '\x2', '\x2', '\x2', '\x223', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x224', '\x225', '\b', '\x11', '\x1', '\x2', 
		'\x225', '\x265', '\x5', '\x4', '\x3', '\x2', '\x226', '\x227', '\x5', 
		'\xAA', 'V', '\x2', '\x227', '\x229', '\a', '\x163', '\x2', '\x2', '\x228', 
		'\x22A', '\x5', '&', '\x14', '\x2', '\x229', '\x228', '\x3', '\x2', '\x2', 
		'\x2', '\x229', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', 
		'\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', '\a', '\x164', '\x2', '\x2', 
		'\x22C', '\x265', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', '\x5', 
		'\x17A', '\xBE', '\x2', '\x22E', '\x230', '\a', '\x163', '\x2', '\x2', 
		'\x22F', '\x231', '\x5', '&', '\x14', '\x2', '\x230', '\x22F', '\x3', 
		'\x2', '\x2', '\x2', '\x230', '\x231', '\x3', '\x2', '\x2', '\x2', '\x231', 
		'\x232', '\x3', '\x2', '\x2', '\x2', '\x232', '\x233', '\a', '\x164', 
		'\x2', '\x2', '\x233', '\x265', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', 
		'\x5', '\xAA', 'V', '\x2', '\x235', '\x236', '\x5', '\x12E', '\x98', '\x2', 
		'\x236', '\x265', '\x3', '\x2', '\x2', '\x2', '\x237', '\x238', '\x5', 
		'\x17A', '\xBE', '\x2', '\x238', '\x239', '\x5', '\x12E', '\x98', '\x2', 
		'\x239', '\x265', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x23B', '\a', 
		'\x12D', '\x2', '\x2', '\x23B', '\x23C', '\a', '\x174', '\x2', '\x2', 
		'\x23C', '\x23D', '\x5', '\x110', '\x89', '\x2', '\x23D', '\x23E', '\a', 
		'\x175', '\x2', '\x2', '\x23E', '\x23F', '\a', '\x163', '\x2', '\x2', 
		'\x23F', '\x240', '\x5', '^', '\x30', '\x2', '\x240', '\x241', '\a', '\x164', 
		'\x2', '\x2', '\x241', '\x265', '\x3', '\x2', '\x2', '\x2', '\x242', '\x243', 
		'\a', '\x14F', '\x2', '\x2', '\x243', '\x244', '\a', '\x174', '\x2', '\x2', 
		'\x244', '\x245', '\x5', '\x110', '\x89', '\x2', '\x245', '\x246', '\a', 
		'\x175', '\x2', '\x2', '\x246', '\x247', '\a', '\x163', '\x2', '\x2', 
		'\x247', '\x248', '\x5', '^', '\x30', '\x2', '\x248', '\x249', '\a', '\x164', 
		'\x2', '\x2', '\x249', '\x265', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', 
		'\a', '\x148', '\x2', '\x2', '\x24B', '\x24C', '\a', '\x174', '\x2', '\x2', 
		'\x24C', '\x24D', '\x5', '\x110', '\x89', '\x2', '\x24D', '\x24E', '\a', 
		'\x175', '\x2', '\x2', '\x24E', '\x24F', '\a', '\x163', '\x2', '\x2', 
		'\x24F', '\x250', '\x5', '^', '\x30', '\x2', '\x250', '\x251', '\a', '\x164', 
		'\x2', '\x2', '\x251', '\x265', '\x3', '\x2', '\x2', '\x2', '\x252', '\x253', 
		'\a', '\x126', '\x2', '\x2', '\x253', '\x254', '\a', '\x174', '\x2', '\x2', 
		'\x254', '\x255', '\x5', '\x110', '\x89', '\x2', '\x255', '\x256', '\a', 
		'\x175', '\x2', '\x2', '\x256', '\x257', '\a', '\x163', '\x2', '\x2', 
		'\x257', '\x258', '\x5', '^', '\x30', '\x2', '\x258', '\x259', '\a', '\x164', 
		'\x2', '\x2', '\x259', '\x265', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25B', 
		'\x5', '$', '\x13', '\x2', '\x25B', '\x25C', '\a', '\x163', '\x2', '\x2', 
		'\x25C', '\x25D', '\x5', '^', '\x30', '\x2', '\x25D', '\x25E', '\a', '\x164', 
		'\x2', '\x2', '\x25E', '\x265', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x260', 
		'\x5', '$', '\x13', '\x2', '\x260', '\x261', '\a', '\x163', '\x2', '\x2', 
		'\x261', '\x262', '\x5', '\x110', '\x89', '\x2', '\x262', '\x263', '\a', 
		'\x164', '\x2', '\x2', '\x263', '\x265', '\x3', '\x2', '\x2', '\x2', '\x264', 
		'\x224', '\x3', '\x2', '\x2', '\x2', '\x264', '\x226', '\x3', '\x2', '\x2', 
		'\x2', '\x264', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x264', '\x234', 
		'\x3', '\x2', '\x2', '\x2', '\x264', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'\x264', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x264', '\x242', '\x3', 
		'\x2', '\x2', '\x2', '\x264', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x264', 
		'\x252', '\x3', '\x2', '\x2', '\x2', '\x264', '\x25A', '\x3', '\x2', '\x2', 
		'\x2', '\x264', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x265', '\x28E', 
		'\x3', '\x2', '\x2', '\x2', '\x266', '\x267', '\f', '\x15', '\x2', '\x2', 
		'\x267', '\x268', '\a', '\x165', '\x2', '\x2', '\x268', '\x269', '\x5', 
		'^', '\x30', '\x2', '\x269', '\x26A', '\a', '\x166', '\x2', '\x2', '\x26A', 
		'\x28D', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\f', '\x14', '\x2', 
		'\x2', '\x26C', '\x26D', '\a', '\x165', '\x2', '\x2', '\x26D', '\x26E', 
		'\x5', '\x12E', '\x98', '\x2', '\x26E', '\x26F', '\a', '\x166', '\x2', 
		'\x2', '\x26F', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x270', '\x271', 
		'\f', '\x13', '\x2', '\x2', '\x271', '\x273', '\a', '\x163', '\x2', '\x2', 
		'\x272', '\x274', '\x5', '&', '\x14', '\x2', '\x273', '\x272', '\x3', 
		'\x2', '\x2', '\x2', '\x273', '\x274', '\x3', '\x2', '\x2', '\x2', '\x274', 
		'\x275', '\x3', '\x2', '\x2', '\x2', '\x275', '\x28D', '\a', '\x164', 
		'\x2', '\x2', '\x276', '\x277', '\f', '\xE', '\x2', '\x2', '\x277', '\x279', 
		'\a', '\x191', '\x2', '\x2', '\x278', '\x27A', '\a', '\x152', '\x2', '\x2', 
		'\x279', '\x278', '\x3', '\x2', '\x2', '\x2', '\x279', '\x27A', '\x3', 
		'\x2', '\x2', '\x2', '\x27A', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27B', 
		'\x28D', '\x5', '\x6', '\x4', '\x2', '\x27C', '\x27D', '\f', '\r', '\x2', 
		'\x2', '\x27D', '\x27F', '\a', '\x18C', '\x2', '\x2', '\x27E', '\x280', 
		'\a', '\x152', '\x2', '\x2', '\x27F', '\x27E', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', '\x280', '\x3', '\x2', '\x2', '\x2', '\x280', '\x281', '\x3', 
		'\x2', '\x2', '\x2', '\x281', '\x28D', '\x5', '\x6', '\x4', '\x2', '\x282', 
		'\x283', '\f', '\f', '\x2', '\x2', '\x283', '\x284', '\a', '\x191', '\x2', 
		'\x2', '\x284', '\x28D', '\x5', '(', '\x15', '\x2', '\x285', '\x286', 
		'\f', '\v', '\x2', '\x2', '\x286', '\x287', '\a', '\x18C', '\x2', '\x2', 
		'\x287', '\x28D', '\x5', '(', '\x15', '\x2', '\x288', '\x289', '\f', '\n', 
		'\x2', '\x2', '\x289', '\x28D', '\a', '\x188', '\x2', '\x2', '\x28A', 
		'\x28B', '\f', '\t', '\x2', '\x2', '\x28B', '\x28D', '\a', '\x189', '\x2', 
		'\x2', '\x28C', '\x266', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x26B', 
		'\x3', '\x2', '\x2', '\x2', '\x28C', '\x270', '\x3', '\x2', '\x2', '\x2', 
		'\x28C', '\x276', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x27C', '\x3', 
		'\x2', '\x2', '\x2', '\x28C', '\x282', '\x3', '\x2', '\x2', '\x2', '\x28C', 
		'\x285', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x288', '\x3', '\x2', '\x2', 
		'\x2', '\x28C', '\x28A', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x290', 
		'\x3', '\x2', '\x2', '\x2', '\x28E', '\x28C', '\x3', '\x2', '\x2', '\x2', 
		'\x28E', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x28F', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x290', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x291', '\x292', 
		'\a', '\x159', '\x2', '\x2', '\x292', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x293', '\x294', '\a', '\x159', '\x2', '\x2', '\x294', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x295', '\x296', '\x5', '\x12C', '\x97', '\x2', '\x296', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x297', '\x299', '\x5', '\f', '\a', 
		'\x2', '\x298', '\x297', '\x3', '\x2', '\x2', '\x2', '\x298', '\x299', 
		'\x3', '\x2', '\x2', '\x2', '\x299', '\x29A', '\x3', '\x2', '\x2', '\x2', 
		'\x29A', '\x29B', '\x5', '\xAC', 'W', '\x2', '\x29B', '\x29C', '\a', '\x18F', 
		'\x2', '\x2', '\x29C', '\x29D', '\a', '\x171', '\x2', '\x2', '\x29D', 
		'\x29E', '\x5', '\xAC', 'W', '\x2', '\x29E', '\x2AE', '\x3', '\x2', '\x2', 
		'\x2', '\x29F', '\x2A0', '\x5', '\f', '\a', '\x2', '\x2A0', '\x2A1', '\a', 
		'\x152', '\x2', '\x2', '\x2A1', '\x2A2', '\x5', '\x170', '\xB9', '\x2', 
		'\x2A2', '\x2A3', '\a', '\x18F', '\x2', '\x2', '\x2A3', '\x2A4', '\a', 
		'\x171', '\x2', '\x2', '\x2A4', '\x2A5', '\x5', '\xAC', 'W', '\x2', '\x2A5', 
		'\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2A6', '\x2A8', '\x5', '\f', '\a', 
		'\x2', '\x2A7', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A8', 
		'\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A9', '\x3', '\x2', '\x2', '\x2', 
		'\x2A9', '\x2AA', '\a', '\x171', '\x2', '\x2', '\x2AA', '\x2AE', '\x5', 
		'\xAC', 'W', '\x2', '\x2AB', '\x2AC', '\a', '\x171', '\x2', '\x2', '\x2AC', 
		'\x2AE', '\x5', '\xAE', 'X', '\x2', '\x2AD', '\x298', '\x3', '\x2', '\x2', 
		'\x2', '\x2AD', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2A7', 
		'\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AB', '\x3', '\x2', '\x2', '\x2', 
		'\x2AE', ')', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2CC', '\x5', ' ', 
		'\x11', '\x2', '\x2B0', '\x2B1', '\a', '\x188', '\x2', '\x2', '\x2B1', 
		'\x2CC', '\x5', '>', ' ', '\x2', '\x2B2', '\x2B3', '\a', '\x189', '\x2', 
		'\x2', '\x2B3', '\x2CC', '\x5', '>', ' ', '\x2', '\x2B4', '\x2B5', '\x5', 
		',', '\x17', '\x2', '\x2B5', '\x2B6', '\x5', '>', ' ', '\x2', '\x2B6', 
		'\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B8', '\a', '\x14C', 
		'\x2', '\x2', '\x2B8', '\x2CC', '\x5', '*', '\x16', '\x2', '\x2B9', '\x2BA', 
		'\a', '\x14C', '\x2', '\x2', '\x2BA', '\x2BB', '\a', '\x163', '\x2', '\x2', 
		'\x2BB', '\x2BC', '\x5', '\x110', '\x89', '\x2', '\x2BC', '\x2BD', '\a', 
		'\x164', '\x2', '\x2', '\x2BD', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2BE', 
		'\x2BF', '\a', '\x14C', '\x2', '\x2', '\x2BF', '\x2C0', '\a', '\x193', 
		'\x2', '\x2', '\x2C0', '\x2C1', '\a', '\x163', '\x2', '\x2', '\x2C1', 
		'\x2C2', '\a', '\x195', '\x2', '\x2', '\x2C2', '\x2CC', '\a', '\x164', 
		'\x2', '\x2', '\x2C3', '\x2C4', '\a', '\x119', '\x2', '\x2', '\x2C4', 
		'\x2C5', '\a', '\x163', '\x2', '\x2', '\x2C5', '\x2C6', '\x5', '\x110', 
		'\x89', '\x2', '\x2C6', '\x2C7', '\a', '\x164', '\x2', '\x2', '\x2C7', 
		'\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2CC', '\x5', '<', '\x1F', 
		'\x2', '\x2C9', '\x2CC', '\x5', '.', '\x18', '\x2', '\x2CA', '\x2CC', 
		'\x5', ':', '\x1E', '\x2', '\x2CB', '\x2AF', '\x3', '\x2', '\x2', '\x2', 
		'\x2CB', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2B2', '\x3', 
		'\x2', '\x2', '\x2', '\x2CB', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2CB', 
		'\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2B9', '\x3', '\x2', '\x2', 
		'\x2', '\x2CB', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2C3', 
		'\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'\x2CB', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2CA', '\x3', 
		'\x2', '\x2', '\x2', '\x2CC', '+', '\x3', '\x2', '\x2', '\x2', '\x2CD', 
		'\x2CE', '\t', '\x3', '\x2', '\x2', '\x2CE', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x2CF', '\x2D1', '\a', '\x18F', '\x2', '\x2', '\x2D0', '\x2CF', 
		'\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D1', '\x3', '\x2', '\x2', '\x2', 
		'\x2D1', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D4', '\a', 
		'\x13F', '\x2', '\x2', '\x2D3', '\x2D5', '\x5', '\x30', '\x19', '\x2', 
		'\x2D4', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2D5', '\x3', 
		'\x2', '\x2', '\x2', '\x2D5', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D6', 
		'\x2D8', '\x5', '\x32', '\x1A', '\x2', '\x2D7', '\x2D9', '\x5', '\x38', 
		'\x1D', '\x2', '\x2D8', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2D8', 
		'\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2E8', '\x3', '\x2', '\x2', 
		'\x2', '\x2DA', '\x2DC', '\a', '\x18F', '\x2', '\x2', '\x2DB', '\x2DA', 
		'\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DC', '\x3', '\x2', '\x2', '\x2', 
		'\x2DC', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DF', '\a', 
		'\x13F', '\x2', '\x2', '\x2DE', '\x2E0', '\x5', '\x30', '\x19', '\x2', 
		'\x2DF', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E0', '\x3', 
		'\x2', '\x2', '\x2', '\x2E0', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2E1', 
		'\x2E2', '\a', '\x163', '\x2', '\x2', '\x2E2', '\x2E3', '\x5', '\x110', 
		'\x89', '\x2', '\x2E3', '\x2E5', '\a', '\x164', '\x2', '\x2', '\x2E4', 
		'\x2E6', '\x5', '\x38', '\x1D', '\x2', '\x2E5', '\x2E4', '\x3', '\x2', 
		'\x2', '\x2', '\x2E5', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x2E8', 
		'\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2D0', '\x3', '\x2', '\x2', '\x2', 
		'\x2E7', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2E8', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x2E9', '\x2EA', '\a', '\x163', '\x2', '\x2', '\x2EA', 
		'\x2EB', '\x5', '&', '\x14', '\x2', '\x2EB', '\x2EC', '\a', '\x164', '\x2', 
		'\x2', '\x2EC', '\x31', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EF', 
		'\x5', '\xA6', 'T', '\x2', '\x2EE', '\x2F0', '\x5', '\x34', '\x1B', '\x2', 
		'\x2EF', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2F0', '\x3', 
		'\x2', '\x2', '\x2', '\x2F0', '\x33', '\x3', '\x2', '\x2', '\x2', '\x2F1', 
		'\x2F3', '\x5', '\x106', '\x84', '\x2', '\x2F2', '\x2F4', '\x5', '\x34', 
		'\x1B', '\x2', '\x2F3', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F3', 
		'\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F7', '\x3', '\x2', '\x2', 
		'\x2', '\x2F5', '\x2F7', '\x5', '\x36', '\x1C', '\x2', '\x2F6', '\x2F1', 
		'\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'\x2F7', '\x35', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F9', '\b', '\x1C', 
		'\x1', '\x2', '\x2F9', '\x2FA', '\a', '\x165', '\x2', '\x2', '\x2FA', 
		'\x2FB', '\x5', '^', '\x30', '\x2', '\x2FB', '\x2FD', '\a', '\x166', '\x2', 
		'\x2', '\x2FC', '\x2FE', '\x5', '\xE2', 'r', '\x2', '\x2FD', '\x2FC', 
		'\x3', '\x2', '\x2', '\x2', '\x2FD', '\x2FE', '\x3', '\x2', '\x2', '\x2', 
		'\x2FE', '\x308', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x300', '\f', 
		'\x3', '\x2', '\x2', '\x300', '\x301', '\a', '\x165', '\x2', '\x2', '\x301', 
		'\x302', '\x5', '`', '\x31', '\x2', '\x302', '\x304', '\a', '\x166', '\x2', 
		'\x2', '\x303', '\x305', '\x5', '\xE2', 'r', '\x2', '\x304', '\x303', 
		'\x3', '\x2', '\x2', '\x2', '\x304', '\x305', '\x3', '\x2', '\x2', '\x2', 
		'\x305', '\x307', '\x3', '\x2', '\x2', '\x2', '\x306', '\x2FF', '\x3', 
		'\x2', '\x2', '\x2', '\x307', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x308', 
		'\x306', '\x3', '\x2', '\x2', '\x2', '\x308', '\x309', '\x3', '\x2', '\x2', 
		'\x2', '\x309', '\x37', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x308', 
		'\x3', '\x2', '\x2', '\x2', '\x30B', '\x30D', '\a', '\x163', '\x2', '\x2', 
		'\x30C', '\x30E', '\x5', '&', '\x14', '\x2', '\x30D', '\x30C', '\x3', 
		'\x2', '\x2', '\x2', '\x30D', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x30E', 
		'\x30F', '\x3', '\x2', '\x2', '\x2', '\x30F', '\x312', '\a', '\x164', 
		'\x2', '\x2', '\x310', '\x312', '\x5', '\x12E', '\x98', '\x2', '\x311', 
		'\x30B', '\x3', '\x2', '\x2', '\x2', '\x311', '\x310', '\x3', '\x2', '\x2', 
		'\x2', '\x312', '\x39', '\x3', '\x2', '\x2', '\x2', '\x313', '\x315', 
		'\a', '\x18F', '\x2', '\x2', '\x314', '\x313', '\x3', '\x2', '\x2', '\x2', 
		'\x314', '\x315', '\x3', '\x2', '\x2', '\x2', '\x315', '\x316', '\x3', 
		'\x2', '\x2', '\x2', '\x316', '\x317', '\a', '\x12A', '\x2', '\x2', '\x317', 
		'\x320', '\x5', '>', ' ', '\x2', '\x318', '\x31A', '\a', '\x18F', '\x2', 
		'\x2', '\x319', '\x318', '\x3', '\x2', '\x2', '\x2', '\x319', '\x31A', 
		'\x3', '\x2', '\x2', '\x2', '\x31A', '\x31B', '\x3', '\x2', '\x2', '\x2', 
		'\x31B', '\x31C', '\a', '\x12A', '\x2', '\x2', '\x31C', '\x31D', '\a', 
		'\x165', '\x2', '\x2', '\x31D', '\x31E', '\a', '\x166', '\x2', '\x2', 
		'\x31E', '\x320', '\x5', '>', ' ', '\x2', '\x31F', '\x314', '\x3', '\x2', 
		'\x2', '\x2', '\x31F', '\x319', '\x3', '\x2', '\x2', '\x2', '\x320', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x321', '\x322', '\a', '\x140', '\x2', '\x2', 
		'\x322', '\x323', '\a', '\x163', '\x2', '\x2', '\x323', '\x324', '\x5', 
		'^', '\x30', '\x2', '\x324', '\x325', '\a', '\x164', '\x2', '\x2', '\x325', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x326', '\x32D', '\x5', '*', '\x16', 
		'\x2', '\x327', '\x328', '\a', '\x163', '\x2', '\x2', '\x328', '\x329', 
		'\x5', '\x110', '\x89', '\x2', '\x329', '\x32A', '\a', '\x164', '\x2', 
		'\x2', '\x32A', '\x32B', '\x5', '>', ' ', '\x2', '\x32B', '\x32D', '\x3', 
		'\x2', '\x2', '\x2', '\x32C', '\x326', '\x3', '\x2', '\x2', '\x2', '\x32C', 
		'\x327', '\x3', '\x2', '\x2', '\x2', '\x32D', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x32E', '\x32F', '\b', '!', '\x1', '\x2', '\x32F', '\x330', '\x5', 
		'>', ' ', '\x2', '\x330', '\x339', '\x3', '\x2', '\x2', '\x2', '\x331', 
		'\x332', '\f', '\x4', '\x2', '\x2', '\x332', '\x333', '\a', '\x192', '\x2', 
		'\x2', '\x333', '\x338', '\x5', '>', ' ', '\x2', '\x334', '\x335', '\f', 
		'\x3', '\x2', '\x2', '\x335', '\x336', '\a', '\x18B', '\x2', '\x2', '\x336', 
		'\x338', '\x5', '>', ' ', '\x2', '\x337', '\x331', '\x3', '\x2', '\x2', 
		'\x2', '\x337', '\x334', '\x3', '\x2', '\x2', '\x2', '\x338', '\x33B', 
		'\x3', '\x2', '\x2', '\x2', '\x339', '\x337', '\x3', '\x2', '\x2', '\x2', 
		'\x339', '\x33A', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x33B', '\x339', '\x3', '\x2', '\x2', '\x2', '\x33C', 
		'\x33D', '\b', '\"', '\x1', '\x2', '\x33D', '\x33E', '\x5', '@', '!', 
		'\x2', '\x33E', '\x34A', '\x3', '\x2', '\x2', '\x2', '\x33F', '\x340', 
		'\f', '\x5', '\x2', '\x2', '\x340', '\x341', '\a', '\x16B', '\x2', '\x2', 
		'\x341', '\x349', '\x5', '@', '!', '\x2', '\x342', '\x343', '\f', '\x4', 
		'\x2', '\x2', '\x343', '\x344', '\a', '\x16C', '\x2', '\x2', '\x344', 
		'\x349', '\x5', '@', '!', '\x2', '\x345', '\x346', '\f', '\x3', '\x2', 
		'\x2', '\x346', '\x347', '\a', '\x16D', '\x2', '\x2', '\x347', '\x349', 
		'\x5', '@', '!', '\x2', '\x348', '\x33F', '\x3', '\x2', '\x2', '\x2', 
		'\x348', '\x342', '\x3', '\x2', '\x2', '\x2', '\x348', '\x345', '\x3', 
		'\x2', '\x2', '\x2', '\x349', '\x34C', '\x3', '\x2', '\x2', '\x2', '\x34A', 
		'\x348', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x34B', '\x3', '\x2', '\x2', 
		'\x2', '\x34B', '\x43', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x34A', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x34E', '\b', '#', '\x1', '\x2', 
		'\x34E', '\x34F', '\x5', '\x42', '\"', '\x2', '\x34F', '\x358', '\x3', 
		'\x2', '\x2', '\x2', '\x350', '\x351', '\f', '\x4', '\x2', '\x2', '\x351', 
		'\x352', '\a', '\x169', '\x2', '\x2', '\x352', '\x357', '\x5', '\x42', 
		'\"', '\x2', '\x353', '\x354', '\f', '\x3', '\x2', '\x2', '\x354', '\x355', 
		'\a', '\x16A', '\x2', '\x2', '\x355', '\x357', '\x5', '\x42', '\"', '\x2', 
		'\x356', '\x350', '\x3', '\x2', '\x2', '\x2', '\x356', '\x353', '\x3', 
		'\x2', '\x2', '\x2', '\x357', '\x35A', '\x3', '\x2', '\x2', '\x2', '\x358', 
		'\x356', '\x3', '\x2', '\x2', '\x2', '\x358', '\x359', '\x3', '\x2', '\x2', 
		'\x2', '\x359', '\x45', '\x3', '\x2', '\x2', '\x2', '\x35A', '\x358', 
		'\x3', '\x2', '\x2', '\x2', '\x35B', '\x35C', '\b', '$', '\x1', '\x2', 
		'\x35C', '\x35D', '\x5', '\x44', '#', '\x2', '\x35D', '\x364', '\x3', 
		'\x2', '\x2', '\x2', '\x35E', '\x35F', '\f', '\x3', '\x2', '\x2', '\x35F', 
		'\x360', '\x5', 'H', '%', '\x2', '\x360', '\x361', '\x5', '\x44', '#', 
		'\x2', '\x361', '\x363', '\x3', '\x2', '\x2', '\x2', '\x362', '\x35E', 
		'\x3', '\x2', '\x2', '\x2', '\x363', '\x366', '\x3', '\x2', '\x2', '\x2', 
		'\x364', '\x362', '\x3', '\x2', '\x2', '\x2', '\x364', '\x365', '\x3', 
		'\x2', '\x2', '\x2', '\x365', 'G', '\x3', '\x2', '\x2', '\x2', '\x366', 
		'\x364', '\x3', '\x2', '\x2', '\x2', '\x367', '\x368', '\t', '\x4', '\x2', 
		'\x2', '\x368', 'I', '\x3', '\x2', '\x2', '\x2', '\x369', '\x36A', '\b', 
		'&', '\x1', '\x2', '\x36A', '\x36B', '\x5', '\x46', '$', '\x2', '\x36B', 
		'\x37A', '\x3', '\x2', '\x2', '\x2', '\x36C', '\x36D', '\f', '\x6', '\x2', 
		'\x2', '\x36D', '\x36E', '\a', '\x174', '\x2', '\x2', '\x36E', '\x379', 
		'\x5', '\x46', '$', '\x2', '\x36F', '\x370', '\f', '\x5', '\x2', '\x2', 
		'\x370', '\x371', '\a', '\x175', '\x2', '\x2', '\x371', '\x379', '\x5', 
		'\x46', '$', '\x2', '\x372', '\x373', '\f', '\x4', '\x2', '\x2', '\x373', 
		'\x374', '\a', '\x184', '\x2', '\x2', '\x374', '\x379', '\x5', '\x46', 
		'$', '\x2', '\x375', '\x376', '\f', '\x3', '\x2', '\x2', '\x376', '\x377', 
		'\a', '\x185', '\x2', '\x2', '\x377', '\x379', '\x5', '\x46', '$', '\x2', 
		'\x378', '\x36C', '\x3', '\x2', '\x2', '\x2', '\x378', '\x36F', '\x3', 
		'\x2', '\x2', '\x2', '\x378', '\x372', '\x3', '\x2', '\x2', '\x2', '\x378', 
		'\x375', '\x3', '\x2', '\x2', '\x2', '\x379', '\x37C', '\x3', '\x2', '\x2', 
		'\x2', '\x37A', '\x378', '\x3', '\x2', '\x2', '\x2', '\x37A', '\x37B', 
		'\x3', '\x2', '\x2', '\x2', '\x37B', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x37C', '\x37A', '\x3', '\x2', '\x2', '\x2', '\x37D', '\x37E', '\b', 
		'\'', '\x1', '\x2', '\x37E', '\x37F', '\x5', 'J', '&', '\x2', '\x37F', 
		'\x388', '\x3', '\x2', '\x2', '\x2', '\x380', '\x381', '\f', '\x4', '\x2', 
		'\x2', '\x381', '\x382', '\a', '\x182', '\x2', '\x2', '\x382', '\x387', 
		'\x5', 'J', '&', '\x2', '\x383', '\x384', '\f', '\x3', '\x2', '\x2', '\x384', 
		'\x385', '\a', '\x183', '\x2', '\x2', '\x385', '\x387', '\x5', 'J', '&', 
		'\x2', '\x386', '\x380', '\x3', '\x2', '\x2', '\x2', '\x386', '\x383', 
		'\x3', '\x2', '\x2', '\x2', '\x387', '\x38A', '\x3', '\x2', '\x2', '\x2', 
		'\x388', '\x386', '\x3', '\x2', '\x2', '\x2', '\x388', '\x389', '\x3', 
		'\x2', '\x2', '\x2', '\x389', 'M', '\x3', '\x2', '\x2', '\x2', '\x38A', 
		'\x388', '\x3', '\x2', '\x2', '\x2', '\x38B', '\x38C', '\b', '(', '\x1', 
		'\x2', '\x38C', '\x38D', '\x5', 'L', '\'', '\x2', '\x38D', '\x393', '\x3', 
		'\x2', '\x2', '\x2', '\x38E', '\x38F', '\f', '\x3', '\x2', '\x2', '\x38F', 
		'\x390', '\a', '\x16F', '\x2', '\x2', '\x390', '\x392', '\x5', 'L', '\'', 
		'\x2', '\x391', '\x38E', '\x3', '\x2', '\x2', '\x2', '\x392', '\x395', 
		'\x3', '\x2', '\x2', '\x2', '\x393', '\x391', '\x3', '\x2', '\x2', '\x2', 
		'\x393', '\x394', '\x3', '\x2', '\x2', '\x2', '\x394', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x395', '\x393', '\x3', '\x2', '\x2', '\x2', '\x396', '\x397', 
		'\b', ')', '\x1', '\x2', '\x397', '\x398', '\x5', 'N', '(', '\x2', '\x398', 
		'\x39E', '\x3', '\x2', '\x2', '\x2', '\x399', '\x39A', '\f', '\x3', '\x2', 
		'\x2', '\x39A', '\x39B', '\a', '\x16E', '\x2', '\x2', '\x39B', '\x39D', 
		'\x5', 'N', '(', '\x2', '\x39C', '\x399', '\x3', '\x2', '\x2', '\x2', 
		'\x39D', '\x3A0', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x39C', '\x3', 
		'\x2', '\x2', '\x2', '\x39E', '\x39F', '\x3', '\x2', '\x2', '\x2', '\x39F', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x3A0', '\x39E', '\x3', '\x2', '\x2', 
		'\x2', '\x3A1', '\x3A2', '\b', '*', '\x1', '\x2', '\x3A2', '\x3A3', '\x5', 
		'P', ')', '\x2', '\x3A3', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\x3A4', 
		'\x3A5', '\f', '\x3', '\x2', '\x2', '\x3A5', '\x3A6', '\a', '\x170', '\x2', 
		'\x2', '\x3A6', '\x3A8', '\x5', 'P', ')', '\x2', '\x3A7', '\x3A4', '\x3', 
		'\x2', '\x2', '\x2', '\x3A8', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3A9', 
		'\x3A7', '\x3', '\x2', '\x2', '\x2', '\x3A9', '\x3AA', '\x3', '\x2', '\x2', 
		'\x2', '\x3AA', 'S', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3A9', '\x3', 
		'\x2', '\x2', '\x2', '\x3AC', '\x3AD', '\b', '+', '\x1', '\x2', '\x3AD', 
		'\x3AE', '\x5', 'R', '*', '\x2', '\x3AE', '\x3B7', '\x3', '\x2', '\x2', 
		'\x2', '\x3AF', '\x3B0', '\f', '\x4', '\x2', '\x2', '\x3B0', '\x3B1', 
		'\a', '\x5', '\x2', '\x2', '\x3B1', '\x3B6', '\x5', 'R', '*', '\x2', '\x3B2', 
		'\x3B3', '\f', '\x3', '\x2', '\x2', '\x3B3', '\x3B4', '\a', '\x6', '\x2', 
		'\x2', '\x3B4', '\x3B6', '\x5', 'R', '*', '\x2', '\x3B5', '\x3AF', '\x3', 
		'\x2', '\x2', '\x2', '\x3B5', '\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3B6', 
		'\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3B7', '\x3B5', '\x3', '\x2', '\x2', 
		'\x2', '\x3B7', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3B8', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x3B9', '\x3B7', '\x3', '\x2', '\x2', '\x2', '\x3BA', 
		'\x3BB', '\b', ',', '\x1', '\x2', '\x3BB', '\x3BC', '\x5', 'T', '+', '\x2', 
		'\x3BC', '\x3C5', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3BE', '\f', 
		'\x4', '\x2', '\x2', '\x3BE', '\x3BF', '\a', '\a', '\x2', '\x2', '\x3BF', 
		'\x3C4', '\x5', 'T', '+', '\x2', '\x3C0', '\x3C1', '\f', '\x3', '\x2', 
		'\x2', '\x3C1', '\x3C2', '\a', '\b', '\x2', '\x2', '\x3C2', '\x3C4', '\x5', 
		'T', '+', '\x2', '\x3C3', '\x3BD', '\x3', '\x2', '\x2', '\x2', '\x3C3', 
		'\x3C0', '\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C7', '\x3', '\x2', '\x2', 
		'\x2', '\x3C5', '\x3C3', '\x3', '\x2', '\x2', '\x2', '\x3C5', '\x3C6', 
		'\x3', '\x2', '\x2', '\x2', '\x3C6', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x3C7', '\x3C5', '\x3', '\x2', '\x2', '\x2', '\x3C8', '\x3D0', '\x5', 
		'V', ',', '\x2', '\x3C9', '\x3CA', '\x5', 'V', ',', '\x2', '\x3CA', '\x3CB', 
		'\a', '\x18D', '\x2', '\x2', '\x3CB', '\x3CC', '\x5', '^', '\x30', '\x2', 
		'\x3CC', '\x3CD', '\a', '\x18E', '\x2', '\x2', '\x3CD', '\x3CE', '\x5', 
		'Z', '.', '\x2', '\x3CE', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3CF', 
		'\x3C8', '\x3', '\x2', '\x2', '\x2', '\x3CF', '\x3C9', '\x3', '\x2', '\x2', 
		'\x2', '\x3D0', 'Y', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3D8', '\x5', 
		'X', '-', '\x2', '\x3D2', '\x3D3', '\x5', 'V', ',', '\x2', '\x3D3', '\x3D4', 
		'\x5', '\\', '/', '\x2', '\x3D4', '\x3D5', '\x5', '\x12A', '\x96', '\x2', 
		'\x3D5', '\x3D8', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D8', '\x5', 
		'\x18A', '\xC6', '\x2', '\x3D7', '\x3D1', '\x3', '\x2', '\x2', '\x2', 
		'\x3D7', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3D6', '\x3', 
		'\x2', '\x2', '\x2', '\x3D8', '[', '\x3', '\x2', '\x2', '\x2', '\x3D9', 
		'\x3DA', '\t', '\x5', '\x2', '\x2', '\x3DA', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x3DB', '\x3DC', '\b', '\x30', '\x1', '\x2', '\x3DC', '\x3DD', 
		'\x5', 'Z', '.', '\x2', '\x3DD', '\x3E3', '\x3', '\x2', '\x2', '\x2', 
		'\x3DE', '\x3DF', '\f', '\x3', '\x2', '\x2', '\x3DF', '\x3E0', '\a', '\x18A', 
		'\x2', '\x2', '\x3E0', '\x3E2', '\x5', 'Z', '.', '\x2', '\x3E1', '\x3DE', 
		'\x3', '\x2', '\x2', '\x2', '\x3E2', '\x3E5', '\x3', '\x2', '\x2', '\x2', 
		'\x3E3', '\x3E1', '\x3', '\x2', '\x2', '\x2', '\x3E3', '\x3E4', '\x3', 
		'\x2', '\x2', '\x2', '\x3E4', '_', '\x3', '\x2', '\x2', '\x2', '\x3E5', 
		'\x3E3', '\x3', '\x2', '\x2', '\x2', '\x3E6', '\x3E7', '\x5', 'X', '-', 
		'\x2', '\x3E7', '\x61', '\x3', '\x2', '\x2', '\x2', '\x3E8', '\x403', 
		'\x5', '\x64', '\x33', '\x2', '\x3E9', '\x3EB', '\x5', '\xE2', 'r', '\x2', 
		'\x3EA', '\x3E9', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3EB', '\x3', 
		'\x2', '\x2', '\x2', '\x3EB', '\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EC', 
		'\x403', '\x5', '\x66', '\x34', '\x2', '\x3ED', '\x3EF', '\x5', '\xE2', 
		'r', '\x2', '\x3EE', '\x3ED', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EF', 
		'\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3F0', '\x3', '\x2', '\x2', '\x2', 
		'\x3F0', '\x403', '\x5', 'h', '\x35', '\x2', '\x3F1', '\x3F3', '\x5', 
		'\xE2', 'r', '\x2', '\x3F2', '\x3F1', '\x3', '\x2', '\x2', '\x2', '\x3F2', 
		'\x3F3', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F4', '\x3', '\x2', '\x2', 
		'\x2', '\x3F4', '\x403', '\x5', 'l', '\x37', '\x2', '\x3F5', '\x3F7', 
		'\x5', '\xE2', 'r', '\x2', '\x3F6', '\x3F5', '\x3', '\x2', '\x2', '\x2', 
		'\x3F6', '\x3F7', '\x3', '\x2', '\x2', '\x2', '\x3F7', '\x3F8', '\x3', 
		'\x2', '\x2', '\x2', '\x3F8', '\x403', '\x5', 'p', '\x39', '\x2', '\x3F9', 
		'\x3FB', '\x5', '\xE2', 'r', '\x2', '\x3FA', '\x3F9', '\x3', '\x2', '\x2', 
		'\x2', '\x3FA', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3FB', '\x3FC', 
		'\x3', '\x2', '\x2', '\x2', '\x3FC', '\x403', '\x5', 'x', '=', '\x2', 
		'\x3FD', '\x403', '\x5', 'z', '>', '\x2', '\x3FE', '\x400', '\x5', '\xE2', 
		'r', '\x2', '\x3FF', '\x3FE', '\x3', '\x2', '\x2', '\x2', '\x3FF', '\x400', 
		'\x3', '\x2', '\x2', '\x2', '\x400', '\x401', '\x3', '\x2', '\x2', '\x2', 
		'\x401', '\x403', '\x5', '\x180', '\xC1', '\x2', '\x402', '\x3E8', '\x3', 
		'\x2', '\x2', '\x2', '\x402', '\x3EA', '\x3', '\x2', '\x2', '\x2', '\x402', 
		'\x3EE', '\x3', '\x2', '\x2', '\x2', '\x402', '\x3F2', '\x3', '\x2', '\x2', 
		'\x2', '\x402', '\x3F6', '\x3', '\x2', '\x2', '\x2', '\x402', '\x3FA', 
		'\x3', '\x2', '\x2', '\x2', '\x402', '\x3FD', '\x3', '\x2', '\x2', '\x2', 
		'\x402', '\x3FF', '\x3', '\x2', '\x2', '\x2', '\x403', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x404', '\x406', '\x5', '\xE2', 'r', '\x2', '\x405', 
		'\x404', '\x3', '\x2', '\x2', '\x2', '\x405', '\x406', '\x3', '\x2', '\x2', 
		'\x2', '\x406', '\x407', '\x3', '\x2', '\x2', '\x2', '\x407', '\x408', 
		'\a', '\x195', '\x2', '\x2', '\x408', '\x409', '\a', '\x18E', '\x2', '\x2', 
		'\x409', '\x419', '\x5', '\x62', '\x32', '\x2', '\x40A', '\x40C', '\x5', 
		'\xE2', 'r', '\x2', '\x40B', '\x40A', '\x3', '\x2', '\x2', '\x2', '\x40B', 
		'\x40C', '\x3', '\x2', '\x2', '\x2', '\x40C', '\x40D', '\x3', '\x2', '\x2', 
		'\x2', '\x40D', '\x40E', '\a', '\x11E', '\x2', '\x2', '\x40E', '\x40F', 
		'\x5', '`', '\x31', '\x2', '\x40F', '\x410', '\a', '\x18E', '\x2', '\x2', 
		'\x410', '\x411', '\x5', '\x62', '\x32', '\x2', '\x411', '\x419', '\x3', 
		'\x2', '\x2', '\x2', '\x412', '\x414', '\x5', '\xE2', 'r', '\x2', '\x413', 
		'\x412', '\x3', '\x2', '\x2', '\x2', '\x413', '\x414', '\x3', '\x2', '\x2', 
		'\x2', '\x414', '\x415', '\x3', '\x2', '\x2', '\x2', '\x415', '\x416', 
		'\a', '\x129', '\x2', '\x2', '\x416', '\x417', '\a', '\x18E', '\x2', '\x2', 
		'\x417', '\x419', '\x5', '\x62', '\x32', '\x2', '\x418', '\x405', '\x3', 
		'\x2', '\x2', '\x2', '\x418', '\x40B', '\x3', '\x2', '\x2', '\x2', '\x418', 
		'\x413', '\x3', '\x2', '\x2', '\x2', '\x419', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x41A', '\x41C', '\x5', '^', '\x30', '\x2', '\x41B', '\x41A', 
		'\x3', '\x2', '\x2', '\x2', '\x41B', '\x41C', '\x3', '\x2', '\x2', '\x2', 
		'\x41C', '\x41D', '\x3', '\x2', '\x2', '\x2', '\x41D', '\x41E', '\a', 
		'\x190', '\x2', '\x2', '\x41E', 'g', '\x3', '\x2', '\x2', '\x2', '\x41F', 
		'\x421', '\a', '\x167', '\x2', '\x2', '\x420', '\x422', '\x5', 'j', '\x36', 
		'\x2', '\x421', '\x420', '\x3', '\x2', '\x2', '\x2', '\x421', '\x422', 
		'\x3', '\x2', '\x2', '\x2', '\x422', '\x423', '\x3', '\x2', '\x2', '\x2', 
		'\x423', '\x424', '\a', '\x168', '\x2', '\x2', '\x424', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x425', '\x426', '\b', '\x36', '\x1', '\x2', '\x426', '\x427', 
		'\x5', '\x62', '\x32', '\x2', '\x427', '\x42C', '\x3', '\x2', '\x2', '\x2', 
		'\x428', '\x429', '\f', '\x3', '\x2', '\x2', '\x429', '\x42B', '\x5', 
		'\x62', '\x32', '\x2', '\x42A', '\x428', '\x3', '\x2', '\x2', '\x2', '\x42B', 
		'\x42E', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x42A', '\x3', '\x2', '\x2', 
		'\x2', '\x42C', '\x42D', '\x3', '\x2', '\x2', '\x2', '\x42D', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x42E', '\x42C', '\x3', '\x2', '\x2', '\x2', '\x42F', 
		'\x430', '\a', '\x139', '\x2', '\x2', '\x430', '\x431', '\a', '\x163', 
		'\x2', '\x2', '\x431', '\x432', '\x5', 'n', '\x38', '\x2', '\x432', '\x433', 
		'\a', '\x164', '\x2', '\x2', '\x433', '\x434', '\x5', '\x62', '\x32', 
		'\x2', '\x434', '\x444', '\x3', '\x2', '\x2', '\x2', '\x435', '\x436', 
		'\a', '\x139', '\x2', '\x2', '\x436', '\x437', '\a', '\x163', '\x2', '\x2', 
		'\x437', '\x438', '\x5', 'n', '\x38', '\x2', '\x438', '\x439', '\a', '\x164', 
		'\x2', '\x2', '\x439', '\x43A', '\x5', '\x62', '\x32', '\x2', '\x43A', 
		'\x43B', '\a', '\x12E', '\x2', '\x2', '\x43B', '\x43C', '\x5', '\x62', 
		'\x32', '\x2', '\x43C', '\x444', '\x3', '\x2', '\x2', '\x2', '\x43D', 
		'\x43E', '\a', '\x151', '\x2', '\x2', '\x43E', '\x43F', '\a', '\x163', 
		'\x2', '\x2', '\x43F', '\x440', '\x5', 'n', '\x38', '\x2', '\x440', '\x441', 
		'\a', '\x164', '\x2', '\x2', '\x441', '\x442', '\x5', '\x62', '\x32', 
		'\x2', '\x442', '\x444', '\x3', '\x2', '\x2', '\x2', '\x443', '\x42F', 
		'\x3', '\x2', '\x2', '\x2', '\x443', '\x435', '\x3', '\x2', '\x2', '\x2', 
		'\x443', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x444', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x445', '\x456', '\x5', '^', '\x30', '\x2', '\x446', '\x448', 
		'\x5', '\xE2', 'r', '\x2', '\x447', '\x446', '\x3', '\x2', '\x2', '\x2', 
		'\x447', '\x448', '\x3', '\x2', '\x2', '\x2', '\x448', '\x449', '\x3', 
		'\x2', '\x2', '\x2', '\x449', '\x44A', '\x5', '\x90', 'I', '\x2', '\x44A', 
		'\x44B', '\x5', '\xFC', '\x7F', '\x2', '\x44B', '\x44C', '\a', '\x173', 
		'\x2', '\x2', '\x44C', '\x44D', '\x5', '\x12A', '\x96', '\x2', '\x44D', 
		'\x456', '\x3', '\x2', '\x2', '\x2', '\x44E', '\x450', '\x5', '\xE2', 
		'r', '\x2', '\x44F', '\x44E', '\x3', '\x2', '\x2', '\x2', '\x44F', '\x450', 
		'\x3', '\x2', '\x2', '\x2', '\x450', '\x451', '\x3', '\x2', '\x2', '\x2', 
		'\x451', '\x452', '\x5', '\x90', 'I', '\x2', '\x452', '\x453', '\x5', 
		'\xFC', '\x7F', '\x2', '\x453', '\x454', '\x5', '\x12E', '\x98', '\x2', 
		'\x454', '\x456', '\x3', '\x2', '\x2', '\x2', '\x455', '\x445', '\x3', 
		'\x2', '\x2', '\x2', '\x455', '\x447', '\x3', '\x2', '\x2', '\x2', '\x455', 
		'\x44F', '\x3', '\x2', '\x2', '\x2', '\x456', 'o', '\x3', '\x2', '\x2', 
		'\x2', '\x457', '\x458', '\a', '\x162', '\x2', '\x2', '\x458', '\x459', 
		'\a', '\x163', '\x2', '\x2', '\x459', '\x45A', '\x5', 'n', '\x38', '\x2', 
		'\x45A', '\x45B', '\a', '\x164', '\x2', '\x2', '\x45B', '\x45C', '\x5', 
		'\x62', '\x32', '\x2', '\x45C', '\x47B', '\x3', '\x2', '\x2', '\x2', '\x45D', 
		'\x45E', '\a', '\x12B', '\x2', '\x2', '\x45E', '\x45F', '\x5', '\x62', 
		'\x32', '\x2', '\x45F', '\x460', '\a', '\x162', '\x2', '\x2', '\x460', 
		'\x461', '\a', '\x163', '\x2', '\x2', '\x461', '\x462', '\x5', '^', '\x30', 
		'\x2', '\x462', '\x463', '\a', '\x164', '\x2', '\x2', '\x463', '\x464', 
		'\a', '\x190', '\x2', '\x2', '\x464', '\x47B', '\x3', '\x2', '\x2', '\x2', 
		'\x465', '\x466', '\a', '\x136', '\x2', '\x2', '\x466', '\x467', '\a', 
		'\x163', '\x2', '\x2', '\x467', '\x469', '\x5', 'r', ':', '\x2', '\x468', 
		'\x46A', '\x5', 'n', '\x38', '\x2', '\x469', '\x468', '\x3', '\x2', '\x2', 
		'\x2', '\x469', '\x46A', '\x3', '\x2', '\x2', '\x2', '\x46A', '\x46B', 
		'\x3', '\x2', '\x2', '\x2', '\x46B', '\x46D', '\a', '\x190', '\x2', '\x2', 
		'\x46C', '\x46E', '\x5', '^', '\x30', '\x2', '\x46D', '\x46C', '\x3', 
		'\x2', '\x2', '\x2', '\x46D', '\x46E', '\x3', '\x2', '\x2', '\x2', '\x46E', 
		'\x46F', '\x3', '\x2', '\x2', '\x2', '\x46F', '\x470', '\a', '\x164', 
		'\x2', '\x2', '\x470', '\x471', '\x5', '\x62', '\x32', '\x2', '\x471', 
		'\x47B', '\x3', '\x2', '\x2', '\x2', '\x472', '\x473', '\a', '\x136', 
		'\x2', '\x2', '\x473', '\x474', '\a', '\x163', '\x2', '\x2', '\x474', 
		'\x475', '\x5', 't', ';', '\x2', '\x475', '\x476', '\a', '\x18E', '\x2', 
		'\x2', '\x476', '\x477', '\x5', 'v', '<', '\x2', '\x477', '\x478', '\a', 
		'\x164', '\x2', '\x2', '\x478', '\x479', '\x5', '\x62', '\x32', '\x2', 
		'\x479', '\x47B', '\x3', '\x2', '\x2', '\x2', '\x47A', '\x457', '\x3', 
		'\x2', '\x2', '\x2', '\x47A', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x47A', 
		'\x465', '\x3', '\x2', '\x2', '\x2', '\x47A', '\x472', '\x3', '\x2', '\x2', 
		'\x2', '\x47B', 'q', '\x3', '\x2', '\x2', '\x2', '\x47C', '\x47F', '\x5', 
		'\x66', '\x34', '\x2', '\x47D', '\x47F', '\x5', '\x84', '\x43', '\x2', 
		'\x47E', '\x47C', '\x3', '\x2', '\x2', '\x2', '\x47E', '\x47D', '\x3', 
		'\x2', '\x2', '\x2', '\x47F', 's', '\x3', '\x2', '\x2', '\x2', '\x480', 
		'\x482', '\x5', '\xE2', 'r', '\x2', '\x481', '\x480', '\x3', '\x2', '\x2', 
		'\x2', '\x481', '\x482', '\x3', '\x2', '\x2', '\x2', '\x482', '\x483', 
		'\x3', '\x2', '\x2', '\x2', '\x483', '\x484', '\x5', '\x90', 'I', '\x2', 
		'\x484', '\x485', '\x5', '\xFC', '\x7F', '\x2', '\x485', 'u', '\x3', '\x2', 
		'\x2', '\x2', '\x486', '\x489', '\x5', '^', '\x30', '\x2', '\x487', '\x489', 
		'\x5', '\x12E', '\x98', '\x2', '\x488', '\x486', '\x3', '\x2', '\x2', 
		'\x2', '\x488', '\x487', '\x3', '\x2', '\x2', '\x2', '\x489', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x48A', '\x48B', '\a', '\x11D', '\x2', '\x2', '\x48B', 
		'\x49B', '\a', '\x190', '\x2', '\x2', '\x48C', '\x48D', '\a', '\x127', 
		'\x2', '\x2', '\x48D', '\x49B', '\a', '\x190', '\x2', '\x2', '\x48E', 
		'\x490', '\a', '\x149', '\x2', '\x2', '\x48F', '\x491', '\x5', '^', '\x30', 
		'\x2', '\x490', '\x48F', '\x3', '\x2', '\x2', '\x2', '\x490', '\x491', 
		'\x3', '\x2', '\x2', '\x2', '\x491', '\x492', '\x3', '\x2', '\x2', '\x2', 
		'\x492', '\x49B', '\a', '\x190', '\x2', '\x2', '\x493', '\x494', '\a', 
		'\x149', '\x2', '\x2', '\x494', '\x495', '\x5', '\x12E', '\x98', '\x2', 
		'\x495', '\x496', '\a', '\x190', '\x2', '\x2', '\x496', '\x49B', '\x3', 
		'\x2', '\x2', '\x2', '\x497', '\x498', '\a', '\x138', '\x2', '\x2', '\x498', 
		'\x499', '\a', '\x195', '\x2', '\x2', '\x499', '\x49B', '\a', '\x190', 
		'\x2', '\x2', '\x49A', '\x48A', '\x3', '\x2', '\x2', '\x2', '\x49A', '\x48C', 
		'\x3', '\x2', '\x2', '\x2', '\x49A', '\x48E', '\x3', '\x2', '\x2', '\x2', 
		'\x49A', '\x493', '\x3', '\x2', '\x2', '\x2', '\x49A', '\x497', '\x3', 
		'\x2', '\x2', '\x2', '\x49B', 'y', '\x3', '\x2', '\x2', '\x2', '\x49C', 
		'\x49D', '\x5', '\x80', '\x41', '\x2', '\x49D', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x49E', '\x49F', '\b', '?', '\x1', '\x2', '\x49F', '\x4A0', '\x5', 
		'~', '@', '\x2', '\x4A0', '\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4A1', 
		'\x4A2', '\f', '\x3', '\x2', '\x2', '\x4A2', '\x4A4', '\x5', '~', '@', 
		'\x2', '\x4A3', '\x4A1', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x4A7', 
		'\x3', '\x2', '\x2', '\x2', '\x4A5', '\x4A3', '\x3', '\x2', '\x2', '\x2', 
		'\x4A5', '\x4A6', '\x3', '\x2', '\x2', '\x2', '\x4A6', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x4A7', '\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x4B2', 
		'\x5', '\x80', '\x41', '\x2', '\x4A9', '\x4B2', '\x5', '\x122', '\x92', 
		'\x2', '\x4AA', '\x4B2', '\x5', '\x168', '\xB5', '\x2', '\x4AB', '\x4B2', 
		'\x5', '\x17C', '\xBF', '\x2', '\x4AC', '\x4B2', '\x5', '\x17E', '\xC0', 
		'\x2', '\x4AD', '\x4B2', '\x5', '\xE0', 'q', '\x2', '\x4AE', '\x4B2', 
		'\x5', '\xC8', '\x65', '\x2', '\x4AF', '\x4B2', '\x5', '\x88', '\x45', 
		'\x2', '\x4B0', '\x4B2', '\x5', '\x8A', '\x46', '\x2', '\x4B1', '\x4A8', 
		'\x3', '\x2', '\x2', '\x2', '\x4B1', '\x4A9', '\x3', '\x2', '\x2', '\x2', 
		'\x4B1', '\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4B1', '\x4AB', '\x3', 
		'\x2', '\x2', '\x2', '\x4B1', '\x4AC', '\x3', '\x2', '\x2', '\x2', '\x4B1', 
		'\x4AD', '\x3', '\x2', '\x2', '\x2', '\x4B1', '\x4AE', '\x3', '\x2', '\x2', 
		'\x2', '\x4B1', '\x4AF', '\x3', '\x2', '\x2', '\x2', '\x4B1', '\x4B0', 
		'\x3', '\x2', '\x2', '\x2', '\x4B2', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x4B3', '\x4BC', '\x5', '\x84', '\x43', '\x2', '\x4B4', '\x4BC', '\x5', 
		'\xDE', 'p', '\x2', '\x4B5', '\x4BC', '\x5', '\xD6', 'l', '\x2', '\x4B6', 
		'\x4BC', '\x5', '\xDA', 'n', '\x2', '\x4B7', '\x4BC', '\x5', '\xDC', 'o', 
		'\x2', '\x4B8', '\x4BC', '\x5', '\x86', '\x44', '\x2', '\x4B9', '\x4BC', 
		'\x5', '\x82', '\x42', '\x2', '\x4BA', '\x4BC', '\x5', '\xB8', ']', '\x2', 
		'\x4BB', '\x4B3', '\x3', '\x2', '\x2', '\x2', '\x4BB', '\x4B4', '\x3', 
		'\x2', '\x2', '\x2', '\x4BB', '\x4B5', '\x3', '\x2', '\x2', '\x2', '\x4BB', 
		'\x4B6', '\x3', '\x2', '\x2', '\x2', '\x4BB', '\x4B7', '\x3', '\x2', '\x2', 
		'\x2', '\x4BB', '\x4B8', '\x3', '\x2', '\x2', '\x2', '\x4BB', '\x4B9', 
		'\x3', '\x2', '\x2', '\x2', '\x4BB', '\x4BA', '\x3', '\x2', '\x2', '\x2', 
		'\x4BC', '\x81', '\x3', '\x2', '\x2', '\x2', '\x4BD', '\x4BE', '\a', '\x15D', 
		'\x2', '\x2', '\x4BE', '\x4C0', '\a', '\x195', '\x2', '\x2', '\x4BF', 
		'\x4C1', '\x5', '\xE2', 'r', '\x2', '\x4C0', '\x4BF', '\x3', '\x2', '\x2', 
		'\x2', '\x4C0', '\x4C1', '\x3', '\x2', '\x2', '\x2', '\x4C1', '\x4C2', 
		'\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C3', '\a', '\x173', '\x2', '\x2', 
		'\x4C3', '\x4C4', '\x5', '\x110', '\x89', '\x2', '\x4C4', '\x4C5', '\a', 
		'\x190', '\x2', '\x2', '\x4C5', '\x83', '\x3', '\x2', '\x2', '\x2', '\x4C6', 
		'\x4C8', '\x5', '\x90', 'I', '\x2', '\x4C7', '\x4C6', '\x3', '\x2', '\x2', 
		'\x2', '\x4C7', '\x4C8', '\x3', '\x2', '\x2', '\x2', '\x4C8', '\x4CA', 
		'\x3', '\x2', '\x2', '\x2', '\x4C9', '\x4CB', '\x5', '\xF8', '}', '\x2', 
		'\x4CA', '\x4C9', '\x3', '\x2', '\x2', '\x2', '\x4CA', '\x4CB', '\x3', 
		'\x2', '\x2', '\x2', '\x4CB', '\x4CC', '\x3', '\x2', '\x2', '\x2', '\x4CC', 
		'\x4D5', '\a', '\x190', '\x2', '\x2', '\x4CD', '\x4CF', '\x5', '\xE2', 
		'r', '\x2', '\x4CE', '\x4D0', '\x5', '\x90', 'I', '\x2', '\x4CF', '\x4CE', 
		'\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4D0', '\x3', '\x2', '\x2', '\x2', 
		'\x4D0', '\x4D1', '\x3', '\x2', '\x2', '\x2', '\x4D1', '\x4D2', '\x5', 
		'\xF8', '}', '\x2', '\x4D2', '\x4D3', '\a', '\x190', '\x2', '\x2', '\x4D3', 
		'\x4D5', '\x3', '\x2', '\x2', '\x2', '\x4D4', '\x4C7', '\x3', '\x2', '\x2', 
		'\x2', '\x4D4', '\x4CD', '\x3', '\x2', '\x2', '\x2', '\x4D5', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x4D6', '\x4D7', '\a', '\x14E', '\x2', '\x2', 
		'\x4D7', '\x4D8', '\a', '\x163', '\x2', '\x2', '\x4D8', '\x4D9', '\x5', 
		'`', '\x31', '\x2', '\x4D9', '\x4DA', '\a', '\x18A', '\x2', '\x2', '\x4DA', 
		'\x4DB', '\a', '\x19E', '\x2', '\x2', '\x4DB', '\x4DC', '\a', '\x164', 
		'\x2', '\x2', '\x4DC', '\x4DD', '\a', '\x190', '\x2', '\x2', '\x4DD', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x4DE', '\x4DF', '\a', '\x190', '\x2', 
		'\x2', '\x4DF', '\x89', '\x3', '\x2', '\x2', '\x2', '\x4E0', '\x4E1', 
		'\x5', '\xE2', 'r', '\x2', '\x4E1', '\x4E2', '\a', '\x190', '\x2', '\x2', 
		'\x4E2', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x4E3', '\x4EC', '\x5', 
		'\x94', 'K', '\x2', '\x4E4', '\x4EC', '\x5', '\x8E', 'H', '\x2', '\x4E5', 
		'\x4EC', '\x5', '\x92', 'J', '\x2', '\x4E6', '\x4EC', '\x5', '\xA0', 'Q', 
		'\x2', '\x4E7', '\x4EC', '\x5', '\x9C', 'O', '\x2', '\x4E8', '\x4EC', 
		'\a', '\x137', '\x2', '\x2', '\x4E9', '\x4EC', '\a', '\x158', '\x2', '\x2', 
		'\x4EA', '\x4EC', '\a', '\x125', '\x2', '\x2', '\x4EB', '\x4E3', '\x3', 
		'\x2', '\x2', '\x2', '\x4EB', '\x4E4', '\x3', '\x2', '\x2', '\x2', '\x4EB', 
		'\x4E5', '\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4E6', '\x3', '\x2', '\x2', 
		'\x2', '\x4EB', '\x4E7', '\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4E8', 
		'\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4E9', '\x3', '\x2', '\x2', '\x2', 
		'\x4EB', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x4EC', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x4ED', '\x4F1', '\a', '\t', '\x2', '\x2', '\x4EE', 
		'\x4F1', '\x5', '\x9A', 'N', '\x2', '\x4EF', '\x4F1', '\a', '\n', '\x2', 
		'\x2', '\x4F0', '\x4ED', '\x3', '\x2', '\x2', '\x2', '\x4F0', '\x4EE', 
		'\x3', '\x2', '\x2', '\x2', '\x4F0', '\x4EF', '\x3', '\x2', '\x2', '\x2', 
		'\x4F1', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4F4', '\x5', 
		'\x8C', 'G', '\x2', '\x4F3', '\x4F5', '\x5', '\xE2', 'r', '\x2', '\x4F4', 
		'\x4F3', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F5', '\x3', '\x2', '\x2', 
		'\x2', '\x4F5', '\x4FA', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4F7', 
		'\x5', '\x8C', 'G', '\x2', '\x4F7', '\x4F8', '\x5', '\x90', 'I', '\x2', 
		'\x4F8', '\x4FA', '\x3', '\x2', '\x2', '\x2', '\x4F9', '\x4F2', '\x3', 
		'\x2', '\x2', '\x2', '\x4F9', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x4FA', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x502', '\a', '\x147', '\x2', 
		'\x2', '\x4FC', '\x502', '\a', '\x14D', '\x2', '\x2', '\x4FD', '\x502', 
		'\a', '\x154', '\x2', '\x2', '\x4FE', '\x502', '\a', '\x132', '\x2', '\x2', 
		'\x4FF', '\x502', '\a', '\x13D', '\x2', '\x2', '\x500', '\x502', '\x5', 
		'\x98', 'M', '\x2', '\x501', '\x4FB', '\x3', '\x2', '\x2', '\x2', '\x501', 
		'\x4FC', '\x3', '\x2', '\x2', '\x2', '\x501', '\x4FD', '\x3', '\x2', '\x2', 
		'\x2', '\x501', '\x4FE', '\x3', '\x2', '\x2', '\x2', '\x501', '\x4FF', 
		'\x3', '\x2', '\x2', '\x2', '\x501', '\x500', '\x3', '\x2', '\x2', '\x2', 
		'\x502', '\x93', '\x3', '\x2', '\x2', '\x2', '\x503', '\x505', '\a', '\x194', 
		'\x2', '\x2', '\x504', '\x506', '\x5', '\x96', 'L', '\x2', '\x505', '\x504', 
		'\x3', '\x2', '\x2', '\x2', '\x505', '\x506', '\x3', '\x2', '\x2', '\x2', 
		'\x506', '\x514', '\x3', '\x2', '\x2', '\x2', '\x507', '\x514', '\a', 
		'\v', '\x2', '\x2', '\x508', '\x514', '\a', '\f', '\x2', '\x2', '\x509', 
		'\x50B', '\a', '\r', '\x2', '\x2', '\x50A', '\x50C', '\x5', '\x96', 'L', 
		'\x2', '\x50B', '\x50A', '\x3', '\x2', '\x2', '\x2', '\x50B', '\x50C', 
		'\x3', '\x2', '\x2', '\x2', '\x50C', '\x514', '\x3', '\x2', '\x2', '\x2', 
		'\x50D', '\x50F', '\a', '\xE', '\x2', '\x2', '\x50E', '\x510', '\x5', 
		'\x96', 'L', '\x2', '\x50F', '\x50E', '\x3', '\x2', '\x2', '\x2', '\x50F', 
		'\x510', '\x3', '\x2', '\x2', '\x2', '\x510', '\x514', '\x3', '\x2', '\x2', 
		'\x2', '\x511', '\x514', '\a', '\xF', '\x2', '\x2', '\x512', '\x514', 
		'\a', '\x10', '\x2', '\x2', '\x513', '\x503', '\x3', '\x2', '\x2', '\x2', 
		'\x513', '\x507', '\x3', '\x2', '\x2', '\x2', '\x513', '\x508', '\x3', 
		'\x2', '\x2', '\x2', '\x513', '\x509', '\x3', '\x2', '\x2', '\x2', '\x513', 
		'\x50D', '\x3', '\x2', '\x2', '\x2', '\x513', '\x511', '\x3', '\x2', '\x2', 
		'\x2', '\x513', '\x512', '\x3', '\x2', '\x2', '\x2', '\x514', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x515', '\x51A', '\a', '\x163', '\x2', '\x2', 
		'\x516', '\x519', '\n', '\x6', '\x2', '\x2', '\x517', '\x519', '\x5', 
		'\x96', 'L', '\x2', '\x518', '\x516', '\x3', '\x2', '\x2', '\x2', '\x518', 
		'\x517', '\x3', '\x2', '\x2', '\x2', '\x519', '\x51C', '\x3', '\x2', '\x2', 
		'\x2', '\x51A', '\x518', '\x3', '\x2', '\x2', '\x2', '\x51A', '\x51B', 
		'\x3', '\x2', '\x2', '\x2', '\x51B', '\x51D', '\x3', '\x2', '\x2', '\x2', 
		'\x51C', '\x51A', '\x3', '\x2', '\x2', '\x2', '\x51D', '\x51E', '\a', 
		'\x164', '\x2', '\x2', '\x51E', '\x97', '\x3', '\x2', '\x2', '\x2', '\x51F', 
		'\x520', '\t', '\a', '\x2', '\x2', '\x520', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x521', '\x522', '\a', '\x31', '\x2', '\x2', '\x522', '\x523', 
		'\a', '\x163', '\x2', '\x2', '\x523', '\x524', '\a', '\x195', '\x2', '\x2', 
		'\x524', '\x525', '\a', '\x164', '\x2', '\x2', '\x525', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x526', '\x527', '\t', '\b', '\x2', '\x2', '\x527', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x528', '\x529', '\a', '\x195', '\x2', 
		'\x2', '\x529', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x52A', '\x52E', 
		'\x5', '\xA4', 'S', '\x2', '\x52B', '\x52E', '\x5', '\x132', '\x9A', '\x2', 
		'\x52C', '\x52E', '\x5', '\xB4', '[', '\x2', '\x52D', '\x52A', '\x3', 
		'\x2', '\x2', '\x2', '\x52D', '\x52B', '\x3', '\x2', '\x2', '\x2', '\x52D', 
		'\x52C', '\x3', '\x2', '\x2', '\x2', '\x52E', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\x52F', '\x530', '\t', '\t', '\x2', '\x2', '\x530', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x531', '\x536', '\x5', '\xAA', 'V', '\x2', '\x532', 
		'\x536', '\x5', '\xB0', 'Y', '\x2', '\x533', '\x536', '\x5', '\x17A', 
		'\xBE', '\x2', '\x534', '\x536', '\x5', '\x10A', '\x86', '\x2', '\x535', 
		'\x531', '\x3', '\x2', '\x2', '\x2', '\x535', '\x532', '\x3', '\x2', '\x2', 
		'\x2', '\x535', '\x533', '\x3', '\x2', '\x2', '\x2', '\x535', '\x534', 
		'\x3', '\x2', '\x2', '\x2', '\x536', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\x537', '\x539', '\x5', '\xA0', 'Q', '\x2', '\x538', '\x53A', '\x5', 
		'\xE2', 'r', '\x2', '\x539', '\x538', '\x3', '\x2', '\x2', '\x2', '\x539', 
		'\x53A', '\x3', '\x2', '\x2', '\x2', '\x53A', '\x53F', '\x3', '\x2', '\x2', 
		'\x2', '\x53B', '\x53C', '\x5', '\xA0', 'Q', '\x2', '\x53C', '\x53D', 
		'\x5', '\xA6', 'T', '\x2', '\x53D', '\x53F', '\x3', '\x2', '\x2', '\x2', 
		'\x53E', '\x537', '\x3', '\x2', '\x2', '\x2', '\x53E', '\x53B', '\x3', 
		'\x2', '\x2', '\x2', '\x53F', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x540', 
		'\x542', '\x5', '\xA4', 'S', '\x2', '\x541', '\x543', '\x5', '\xE2', 'r', 
		'\x2', '\x542', '\x541', '\x3', '\x2', '\x2', '\x2', '\x542', '\x543', 
		'\x3', '\x2', '\x2', '\x2', '\x543', '\x548', '\x3', '\x2', '\x2', '\x2', 
		'\x544', '\x545', '\x5', '\xA4', 'S', '\x2', '\x545', '\x546', '\x5', 
		'\xA8', 'U', '\x2', '\x546', '\x548', '\x3', '\x2', '\x2', '\x2', '\x547', 
		'\x540', '\x3', '\x2', '\x2', '\x2', '\x547', '\x544', '\x3', '\x2', '\x2', 
		'\x2', '\x548', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x549', '\x54B', 
		'\x5', '\f', '\a', '\x2', '\x54A', '\x549', '\x3', '\x2', '\x2', '\x2', 
		'\x54A', '\x54B', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x54C', '\x3', 
		'\x2', '\x2', '\x2', '\x54C', '\x562', '\x5', '\xAC', 'W', '\x2', '\x54D', 
		'\x54E', '\x5', '\f', '\a', '\x2', '\x54E', '\x54F', '\a', '\x152', '\x2', 
		'\x2', '\x54F', '\x550', '\x5', '\x170', '\xB9', '\x2', '\x550', '\x562', 
		'\x3', '\x2', '\x2', '\x2', '\x551', '\x562', '\x5', '\xA2', 'R', '\x2', 
		'\x552', '\x562', '\a', '\x120', '\x2', '\x2', '\x553', '\x562', '\a', 
		'\x121', '\x2', '\x2', '\x554', '\x562', '\a', '\x122', '\x2', '\x2', 
		'\x555', '\x562', '\a', '\x161', '\x2', '\x2', '\x556', '\x562', '\a', 
		'\x11C', '\x2', '\x2', '\x557', '\x562', '\a', '\x14A', '\x2', '\x2', 
		'\x558', '\x562', '\a', '\x13B', '\x2', '\x2', '\x559', '\x562', '\a', 
		'\x13C', '\x2', '\x2', '\x55A', '\x562', '\a', '\x14B', '\x2', '\x2', 
		'\x55B', '\x562', '\a', '\x15C', '\x2', '\x2', '\x55C', '\x562', '\a', 
		'\x135', '\x2', '\x2', '\x55D', '\x562', '\a', '\x12C', '\x2', '\x2', 
		'\x55E', '\x562', '\a', '\x15F', '\x2', '\x2', '\x55F', '\x562', '\a', 
		'\x11B', '\x2', '\x2', '\x560', '\x562', '\x5', '\xAE', 'X', '\x2', '\x561', 
		'\x54A', '\x3', '\x2', '\x2', '\x2', '\x561', '\x54D', '\x3', '\x2', '\x2', 
		'\x2', '\x561', '\x551', '\x3', '\x2', '\x2', '\x2', '\x561', '\x552', 
		'\x3', '\x2', '\x2', '\x2', '\x561', '\x553', '\x3', '\x2', '\x2', '\x2', 
		'\x561', '\x554', '\x3', '\x2', '\x2', '\x2', '\x561', '\x555', '\x3', 
		'\x2', '\x2', '\x2', '\x561', '\x556', '\x3', '\x2', '\x2', '\x2', '\x561', 
		'\x557', '\x3', '\x2', '\x2', '\x2', '\x561', '\x558', '\x3', '\x2', '\x2', 
		'\x2', '\x561', '\x559', '\x3', '\x2', '\x2', '\x2', '\x561', '\x55A', 
		'\x3', '\x2', '\x2', '\x2', '\x561', '\x55B', '\x3', '\x2', '\x2', '\x2', 
		'\x561', '\x55C', '\x3', '\x2', '\x2', '\x2', '\x561', '\x55D', '\x3', 
		'\x2', '\x2', '\x2', '\x561', '\x55E', '\x3', '\x2', '\x2', '\x2', '\x561', 
		'\x55F', '\x3', '\x2', '\x2', '\x2', '\x561', '\x560', '\x3', '\x2', '\x2', 
		'\x2', '\x562', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x563', '\x568', 
		'\x5', '\x130', '\x99', '\x2', '\x564', '\x568', '\x5', '\xB2', 'Z', '\x2', 
		'\x565', '\x568', '\x5', '\x9E', 'P', '\x2', '\x566', '\x568', '\x5', 
		'\x170', '\xB9', '\x2', '\x567', '\x563', '\x3', '\x2', '\x2', '\x2', 
		'\x567', '\x564', '\x3', '\x2', '\x2', '\x2', '\x567', '\x565', '\x3', 
		'\x2', '\x2', '\x2', '\x567', '\x566', '\x3', '\x2', '\x2', '\x2', '\x568', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\x569', '\x56A', '\a', '\x128', '\x2', 
		'\x2', '\x56A', '\x56B', '\a', '\x163', '\x2', '\x2', '\x56B', '\x56C', 
		'\x5', '^', '\x30', '\x2', '\x56C', '\x56D', '\a', '\x164', '\x2', '\x2', 
		'\x56D', '\x573', '\x3', '\x2', '\x2', '\x2', '\x56E', '\x56F', '\a', 
		'\x128', '\x2', '\x2', '\x56F', '\x570', '\a', '\x163', '\x2', '\x2', 
		'\x570', '\x571', '\a', '\x11B', '\x2', '\x2', '\x571', '\x573', '\a', 
		'\x164', '\x2', '\x2', '\x572', '\x569', '\x3', '\x2', '\x2', '\x2', '\x572', 
		'\x56E', '\x3', '\x2', '\x2', '\x2', '\x573', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x574', '\x576', '\x5', '\x13A', '\x9E', '\x2', '\x575', '\x577', 
		'\x5', '\xE2', 'r', '\x2', '\x576', '\x575', '\x3', '\x2', '\x2', '\x2', 
		'\x576', '\x577', '\x3', '\x2', '\x2', '\x2', '\x577', '\x579', '\x3', 
		'\x2', '\x2', '\x2', '\x578', '\x57A', '\x5', '\f', '\a', '\x2', '\x579', 
		'\x578', '\x3', '\x2', '\x2', '\x2', '\x579', '\x57A', '\x3', '\x2', '\x2', 
		'\x2', '\x57A', '\x57B', '\x3', '\x2', '\x2', '\x2', '\x57B', '\x57C', 
		'\a', '\x195', '\x2', '\x2', '\x57C', '\x58D', '\x3', '\x2', '\x2', '\x2', 
		'\x57D', '\x57E', '\x5', '\x13A', '\x9E', '\x2', '\x57E', '\x57F', '\x5', 
		'\x170', '\xB9', '\x2', '\x57F', '\x58D', '\x3', '\x2', '\x2', '\x2', 
		'\x580', '\x581', '\x5', '\x13A', '\x9E', '\x2', '\x581', '\x583', '\x5', 
		'\f', '\a', '\x2', '\x582', '\x584', '\a', '\x152', '\x2', '\x2', '\x583', 
		'\x582', '\x3', '\x2', '\x2', '\x2', '\x583', '\x584', '\x3', '\x2', '\x2', 
		'\x2', '\x584', '\x585', '\x3', '\x2', '\x2', '\x2', '\x585', '\x586', 
		'\x5', '\x170', '\xB9', '\x2', '\x586', '\x58D', '\x3', '\x2', '\x2', 
		'\x2', '\x587', '\x589', '\a', '\x12F', '\x2', '\x2', '\x588', '\x58A', 
		'\x5', '\f', '\a', '\x2', '\x589', '\x588', '\x3', '\x2', '\x2', '\x2', 
		'\x589', '\x58A', '\x3', '\x2', '\x2', '\x2', '\x58A', '\x58B', '\x3', 
		'\x2', '\x2', '\x2', '\x58B', '\x58D', '\a', '\x195', '\x2', '\x2', '\x58C', 
		'\x574', '\x3', '\x2', '\x2', '\x2', '\x58C', '\x57D', '\x3', '\x2', '\x2', 
		'\x2', '\x58C', '\x580', '\x3', '\x2', '\x2', '\x2', '\x58C', '\x587', 
		'\x3', '\x2', '\x2', '\x2', '\x58D', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\x58E', '\x58F', '\a', '\x195', '\x2', '\x2', '\x58F', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\x590', '\x591', '\x5', '\xB6', '\\', '\x2', '\x591', 
		'\x593', '\a', '\x167', '\x2', '\x2', '\x592', '\x594', '\x5', '\xBE', 
		'`', '\x2', '\x593', '\x592', '\x3', '\x2', '\x2', '\x2', '\x593', '\x594', 
		'\x3', '\x2', '\x2', '\x2', '\x594', '\x595', '\x3', '\x2', '\x2', '\x2', 
		'\x595', '\x596', '\a', '\x168', '\x2', '\x2', '\x596', '\x59E', '\x3', 
		'\x2', '\x2', '\x2', '\x597', '\x598', '\x5', '\xB6', '\\', '\x2', '\x598', 
		'\x599', '\a', '\x167', '\x2', '\x2', '\x599', '\x59A', '\x5', '\xBE', 
		'`', '\x2', '\x59A', '\x59B', '\a', '\x18A', '\x2', '\x2', '\x59B', '\x59C', 
		'\a', '\x168', '\x2', '\x2', '\x59C', '\x59E', '\x3', '\x2', '\x2', '\x2', 
		'\x59D', '\x590', '\x3', '\x2', '\x2', '\x2', '\x59D', '\x597', '\x3', 
		'\x2', '\x2', '\x2', '\x59E', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x59F', 
		'\x5A1', '\x5', '\xBA', '^', '\x2', '\x5A0', '\x5A2', '\x5', '\xE2', 'r', 
		'\x2', '\x5A1', '\x5A0', '\x3', '\x2', '\x2', '\x2', '\x5A1', '\x5A2', 
		'\x3', '\x2', '\x2', '\x2', '\x5A2', '\x5A4', '\x3', '\x2', '\x2', '\x2', 
		'\x5A3', '\x5A5', '\a', '\x195', '\x2', '\x2', '\x5A4', '\x5A3', '\x3', 
		'\x2', '\x2', '\x2', '\x5A4', '\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5A5', 
		'\x5A7', '\x3', '\x2', '\x2', '\x2', '\x5A6', '\x5A8', '\x5', '\xBC', 
		'_', '\x2', '\x5A7', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\x5A7', '\x5A8', 
		'\x3', '\x2', '\x2', '\x2', '\x5A8', '\x5B3', '\x3', '\x2', '\x2', '\x2', 
		'\x5A9', '\x5AB', '\x5', '\xBA', '^', '\x2', '\x5AA', '\x5AC', '\x5', 
		'\xE2', 'r', '\x2', '\x5AB', '\x5AA', '\x3', '\x2', '\x2', '\x2', '\x5AB', 
		'\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5AC', '\x5AD', '\x3', '\x2', '\x2', 
		'\x2', '\x5AD', '\x5AE', '\x5', '\f', '\a', '\x2', '\x5AE', '\x5B0', '\a', 
		'\x195', '\x2', '\x2', '\x5AF', '\x5B1', '\x5', '\xBC', '_', '\x2', '\x5B0', 
		'\x5AF', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x5B1', '\x3', '\x2', '\x2', 
		'\x2', '\x5B1', '\x5B3', '\x3', '\x2', '\x2', '\x2', '\x5B2', '\x59F', 
		'\x3', '\x2', '\x2', '\x2', '\x5B2', '\x5A9', '\x3', '\x2', '\x2', '\x2', 
		'\x5B3', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x5B4', '\x5B6', '\x5', 
		'\xBA', '^', '\x2', '\x5B5', '\x5B7', '\x5', '\xE2', 'r', '\x2', '\x5B6', 
		'\x5B5', '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x5B7', '\x3', '\x2', '\x2', 
		'\x2', '\x5B7', '\x5B8', '\x3', '\x2', '\x2', '\x2', '\x5B8', '\x5BA', 
		'\a', '\x195', '\x2', '\x2', '\x5B9', '\x5BB', '\x5', '\xBC', '_', '\x2', 
		'\x5BA', '\x5B9', '\x3', '\x2', '\x2', '\x2', '\x5BA', '\x5BB', '\x3', 
		'\x2', '\x2', '\x2', '\x5BB', '\x5BC', '\x3', '\x2', '\x2', '\x2', '\x5BC', 
		'\x5BD', '\a', '\x190', '\x2', '\x2', '\x5BD', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\x5BE', '\x5C4', '\a', '\x12F', '\x2', '\x2', '\x5BF', '\x5C0', 
		'\a', '\x12F', '\x2', '\x2', '\x5C0', '\x5C4', '\a', '\x123', '\x2', '\x2', 
		'\x5C1', '\x5C2', '\a', '\x12F', '\x2', '\x2', '\x5C2', '\x5C4', '\a', 
		'\x150', '\x2', '\x2', '\x5C3', '\x5BE', '\x3', '\x2', '\x2', '\x2', '\x5C3', 
		'\x5BF', '\x3', '\x2', '\x2', '\x2', '\x5C3', '\x5C1', '\x3', '\x2', '\x2', 
		'\x2', '\x5C4', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x5C5', '\x5C6', 
		'\a', '\x18E', '\x2', '\x2', '\x5C6', '\x5C7', '\x5', '\xA6', 'T', '\x2', 
		'\x5C7', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x5C8', '\x5C9', '\b', '`', 
		'\x1', '\x2', '\x5C9', '\x5CA', '\x5', '\xC0', '\x61', '\x2', '\x5CA', 
		'\x5D0', '\x3', '\x2', '\x2', '\x2', '\x5CB', '\x5CC', '\f', '\x3', '\x2', 
		'\x2', '\x5CC', '\x5CD', '\a', '\x18A', '\x2', '\x2', '\x5CD', '\x5CF', 
		'\x5', '\xC0', '\x61', '\x2', '\x5CE', '\x5CB', '\x3', '\x2', '\x2', '\x2', 
		'\x5CF', '\x5D2', '\x3', '\x2', '\x2', '\x2', '\x5D0', '\x5CE', '\x3', 
		'\x2', '\x2', '\x2', '\x5D0', '\x5D1', '\x3', '\x2', '\x2', '\x2', '\x5D1', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\x5D2', '\x5D0', '\x3', '\x2', '\x2', 
		'\x2', '\x5D3', '\x5D9', '\x5', '\xC2', '\x62', '\x2', '\x5D4', '\x5D5', 
		'\x5', '\xC2', '\x62', '\x2', '\x5D5', '\x5D6', '\a', '\x173', '\x2', 
		'\x2', '\x5D6', '\x5D7', '\x5', '`', '\x31', '\x2', '\x5D7', '\x5D9', 
		'\x3', '\x2', '\x2', '\x2', '\x5D8', '\x5D3', '\x3', '\x2', '\x2', '\x2', 
		'\x5D8', '\x5D4', '\x3', '\x2', '\x2', '\x2', '\x5D9', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\x5DA', '\x5DB', '\a', '\x195', '\x2', '\x2', '\x5DB', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\x5DC', '\x5DF', '\x5', '\xC6', '\x64', 
		'\x2', '\x5DD', '\x5DF', '\x5', '\xD4', 'k', '\x2', '\x5DE', '\x5DC', 
		'\x3', '\x2', '\x2', '\x2', '\x5DE', '\x5DD', '\x3', '\x2', '\x2', '\x2', 
		'\x5DF', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x5E0', '\x5E1', '\a', '\x195', 
		'\x2', '\x2', '\x5E1', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x5E2', '\x5E5', 
		'\x5', '\xCA', '\x66', '\x2', '\x5E3', '\x5E5', '\x5', '\xD0', 'i', '\x2', 
		'\x5E4', '\x5E2', '\x3', '\x2', '\x2', '\x2', '\x5E4', '\x5E3', '\x3', 
		'\x2', '\x2', '\x2', '\x5E5', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x5E6', 
		'\x5E9', '\x5', '\xCC', 'g', '\x2', '\x5E7', '\x5E9', '\x5', '\xCE', 'h', 
		'\x2', '\x5E8', '\x5E6', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5E7', 
		'\x3', '\x2', '\x2', '\x2', '\x5E9', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\x5EA', '\x5EC', '\a', '\x13A', '\x2', '\x2', '\x5EB', '\x5EA', '\x3', 
		'\x2', '\x2', '\x2', '\x5EB', '\x5EC', '\x3', '\x2', '\x2', '\x2', '\x5EC', 
		'\x5ED', '\x3', '\x2', '\x2', '\x2', '\x5ED', '\x5EE', '\a', '\x13E', 
		'\x2', '\x2', '\x5EE', '\x5EF', '\a', '\x195', '\x2', '\x2', '\x5EF', 
		'\x5F0', '\a', '\x167', '\x2', '\x2', '\x5F0', '\x5F1', '\x5', '\xD2', 
		'j', '\x2', '\x5F1', '\x5F2', '\a', '\x168', '\x2', '\x2', '\x5F2', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\x5F3', '\x5F5', '\a', '\x13A', '\x2', '\x2', 
		'\x5F4', '\x5F3', '\x3', '\x2', '\x2', '\x2', '\x5F4', '\x5F5', '\x3', 
		'\x2', '\x2', '\x2', '\x5F5', '\x5F6', '\x3', '\x2', '\x2', '\x2', '\x5F6', 
		'\x5F7', '\a', '\x13E', '\x2', '\x2', '\x5F7', '\x5F8', '\x5', '\xC6', 
		'\x64', '\x2', '\x5F8', '\x5F9', '\a', '\x167', '\x2', '\x2', '\x5F9', 
		'\x5FA', '\x5', '\xD2', 'j', '\x2', '\x5FA', '\x5FB', '\a', '\x168', '\x2', 
		'\x2', '\x5FB', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x5FC', '\x5FE', 
		'\a', '\x13A', '\x2', '\x2', '\x5FD', '\x5FC', '\x3', '\x2', '\x2', '\x2', 
		'\x5FD', '\x5FE', '\x3', '\x2', '\x2', '\x2', '\x5FE', '\x5FF', '\x3', 
		'\x2', '\x2', '\x2', '\x5FF', '\x600', '\a', '\x13E', '\x2', '\x2', '\x600', 
		'\x601', '\a', '\x167', '\x2', '\x2', '\x601', '\x602', '\x5', '\xD2', 
		'j', '\x2', '\x602', '\x603', '\a', '\x168', '\x2', '\x2', '\x603', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\x604', '\x606', '\x5', '|', '?', '\x2', 
		'\x605', '\x604', '\x3', '\x2', '\x2', '\x2', '\x605', '\x606', '\x3', 
		'\x2', '\x2', '\x2', '\x606', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x607', 
		'\x608', '\a', '\x195', '\x2', '\x2', '\x608', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\x609', '\x60A', '\a', '\x13E', '\x2', '\x2', '\x60A', '\x60B', 
		'\a', '\x195', '\x2', '\x2', '\x60B', '\x60C', '\a', '\x173', '\x2', '\x2', 
		'\x60C', '\x60D', '\x5', '\xD8', 'm', '\x2', '\x60D', '\x60E', '\a', '\x190', 
		'\x2', '\x2', '\x60E', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x60F', '\x611', 
		'\x5', '\f', '\a', '\x2', '\x610', '\x60F', '\x3', '\x2', '\x2', '\x2', 
		'\x610', '\x611', '\x3', '\x2', '\x2', '\x2', '\x611', '\x612', '\x3', 
		'\x2', '\x2', '\x2', '\x612', '\x613', '\x5', '\xC4', '\x63', '\x2', '\x613', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\x614', '\x616', '\a', '\x15D', '\x2', 
		'\x2', '\x615', '\x617', '\a', '\x15A', '\x2', '\x2', '\x616', '\x615', 
		'\x3', '\x2', '\x2', '\x2', '\x616', '\x617', '\x3', '\x2', '\x2', '\x2', 
		'\x617', '\x618', '\x3', '\x2', '\x2', '\x2', '\x618', '\x619', '\x5', 
		'\f', '\a', '\x2', '\x619', '\x61A', '\x5', '\b', '\x5', '\x2', '\x61A', 
		'\x61B', '\a', '\x190', '\x2', '\x2', '\x61B', '\x622', '\x3', '\x2', 
		'\x2', '\x2', '\x61C', '\x61D', '\a', '\x15D', '\x2', '\x2', '\x61D', 
		'\x61E', '\a', '\x18F', '\x2', '\x2', '\x61E', '\x61F', '\x5', '\b', '\x5', 
		'\x2', '\x61F', '\x620', '\a', '\x190', '\x2', '\x2', '\x620', '\x622', 
		'\x3', '\x2', '\x2', '\x2', '\x621', '\x614', '\x3', '\x2', '\x2', '\x2', 
		'\x621', '\x61C', '\x3', '\x2', '\x2', '\x2', '\x622', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\x623', '\x625', '\x5', '\xE2', 'r', '\x2', '\x624', 
		'\x623', '\x3', '\x2', '\x2', '\x2', '\x624', '\x625', '\x3', '\x2', '\x2', 
		'\x2', '\x625', '\x626', '\x3', '\x2', '\x2', '\x2', '\x626', '\x627', 
		'\a', '\x15D', '\x2', '\x2', '\x627', '\x629', '\a', '\x13E', '\x2', '\x2', 
		'\x628', '\x62A', '\x5', '\f', '\a', '\x2', '\x629', '\x628', '\x3', '\x2', 
		'\x2', '\x2', '\x629', '\x62A', '\x3', '\x2', '\x2', '\x2', '\x62A', '\x62B', 
		'\x3', '\x2', '\x2', '\x2', '\x62B', '\x62C', '\x5', '\xC4', '\x63', '\x2', 
		'\x62C', '\x62D', '\a', '\x190', '\x2', '\x2', '\x62D', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\x62E', '\x62F', '\a', '\x11A', '\x2', '\x2', '\x62F', 
		'\x630', '\a', '\x163', '\x2', '\x2', '\x630', '\x631', '\a', '\x19E', 
		'\x2', '\x2', '\x631', '\x632', '\a', '\x164', '\x2', '\x2', '\x632', 
		'\x633', '\a', '\x190', '\x2', '\x2', '\x633', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\x634', '\x635', '\a', '\x132', '\x2', '\x2', '\x635', '\x636', 
		'\a', '\x19E', '\x2', '\x2', '\x636', '\x638', '\a', '\x167', '\x2', '\x2', 
		'\x637', '\x639', '\x5', '|', '?', '\x2', '\x638', '\x637', '\x3', '\x2', 
		'\x2', '\x2', '\x638', '\x639', '\x3', '\x2', '\x2', '\x2', '\x639', '\x63A', 
		'\x3', '\x2', '\x2', '\x2', '\x63A', '\x63F', '\a', '\x168', '\x2', '\x2', 
		'\x63B', '\x63C', '\a', '\x132', '\x2', '\x2', '\x63C', '\x63D', '\a', 
		'\x19E', '\x2', '\x2', '\x63D', '\x63F', '\x5', '~', '@', '\x2', '\x63E', 
		'\x634', '\x3', '\x2', '\x2', '\x2', '\x63E', '\x63B', '\x3', '\x2', '\x2', 
		'\x2', '\x63F', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x640', '\x641', 
		'\b', 'r', '\x1', '\x2', '\x641', '\x642', '\x5', '\xE4', 's', '\x2', 
		'\x642', '\x647', '\x3', '\x2', '\x2', '\x2', '\x643', '\x644', '\f', 
		'\x3', '\x2', '\x2', '\x644', '\x646', '\x5', '\xE4', 's', '\x2', '\x645', 
		'\x643', '\x3', '\x2', '\x2', '\x2', '\x646', '\x649', '\x3', '\x2', '\x2', 
		'\x2', '\x647', '\x645', '\x3', '\x2', '\x2', '\x2', '\x647', '\x648', 
		'\x3', '\x2', '\x2', '\x2', '\x648', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\x649', '\x647', '\x3', '\x2', '\x2', '\x2', '\x64A', '\x64B', '\a', 
		'\x165', '\x2', '\x2', '\x64B', '\x64C', '\a', '\x165', '\x2', '\x2', 
		'\x64C', '\x64D', '\x5', '\xE8', 'u', '\x2', '\x64D', '\x64E', '\a', '\x166', 
		'\x2', '\x2', '\x64E', '\x64F', '\a', '\x166', '\x2', '\x2', '\x64F', 
		'\x652', '\x3', '\x2', '\x2', '\x2', '\x650', '\x652', '\x5', '\xE6', 
		't', '\x2', '\x651', '\x64A', '\x3', '\x2', '\x2', '\x2', '\x651', '\x650', 
		'\x3', '\x2', '\x2', '\x2', '\x652', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\x653', '\x654', '\a', '\x118', '\x2', '\x2', '\x654', '\x655', '\a', 
		'\x163', '\x2', '\x2', '\x655', '\x657', '\x5', '\x110', '\x89', '\x2', 
		'\x656', '\x658', '\a', '\x193', '\x2', '\x2', '\x657', '\x656', '\x3', 
		'\x2', '\x2', '\x2', '\x657', '\x658', '\x3', '\x2', '\x2', '\x2', '\x658', 
		'\x659', '\x3', '\x2', '\x2', '\x2', '\x659', '\x65A', '\a', '\x164', 
		'\x2', '\x2', '\x65A', '\x664', '\x3', '\x2', '\x2', '\x2', '\x65B', '\x65C', 
		'\a', '\x118', '\x2', '\x2', '\x65C', '\x65D', '\a', '\x163', '\x2', '\x2', 
		'\x65D', '\x65F', '\x5', '`', '\x31', '\x2', '\x65E', '\x660', '\a', '\x193', 
		'\x2', '\x2', '\x65F', '\x65E', '\x3', '\x2', '\x2', '\x2', '\x65F', '\x660', 
		'\x3', '\x2', '\x2', '\x2', '\x660', '\x661', '\x3', '\x2', '\x2', '\x2', 
		'\x661', '\x662', '\a', '\x164', '\x2', '\x2', '\x662', '\x664', '\x3', 
		'\x2', '\x2', '\x2', '\x663', '\x653', '\x3', '\x2', '\x2', '\x2', '\x663', 
		'\x65B', '\x3', '\x2', '\x2', '\x2', '\x664', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\x665', '\x667', '\b', 'u', '\x1', '\x2', '\x666', '\x668', '\x5', 
		'\xEA', 'v', '\x2', '\x667', '\x666', '\x3', '\x2', '\x2', '\x2', '\x667', 
		'\x668', '\x3', '\x2', '\x2', '\x2', '\x668', '\x66D', '\x3', '\x2', '\x2', 
		'\x2', '\x669', '\x66A', '\x5', '\xEA', 'v', '\x2', '\x66A', '\x66B', 
		'\a', '\x193', '\x2', '\x2', '\x66B', '\x66D', '\x3', '\x2', '\x2', '\x2', 
		'\x66C', '\x665', '\x3', '\x2', '\x2', '\x2', '\x66C', '\x669', '\x3', 
		'\x2', '\x2', '\x2', '\x66D', '\x67A', '\x3', '\x2', '\x2', '\x2', '\x66E', 
		'\x66F', '\f', '\x5', '\x2', '\x2', '\x66F', '\x671', '\a', '\x18A', '\x2', 
		'\x2', '\x670', '\x672', '\x5', '\xEA', 'v', '\x2', '\x671', '\x670', 
		'\x3', '\x2', '\x2', '\x2', '\x671', '\x672', '\x3', '\x2', '\x2', '\x2', 
		'\x672', '\x679', '\x3', '\x2', '\x2', '\x2', '\x673', '\x674', '\f', 
		'\x3', '\x2', '\x2', '\x674', '\x675', '\a', '\x18A', '\x2', '\x2', '\x675', 
		'\x676', '\x5', '\xEA', 'v', '\x2', '\x676', '\x677', '\a', '\x193', '\x2', 
		'\x2', '\x677', '\x679', '\x3', '\x2', '\x2', '\x2', '\x678', '\x66E', 
		'\x3', '\x2', '\x2', '\x2', '\x678', '\x673', '\x3', '\x2', '\x2', '\x2', 
		'\x679', '\x67C', '\x3', '\x2', '\x2', '\x2', '\x67A', '\x678', '\x3', 
		'\x2', '\x2', '\x2', '\x67A', '\x67B', '\x3', '\x2', '\x2', '\x2', '\x67B', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\x67C', '\x67A', '\x3', '\x2', '\x2', 
		'\x2', '\x67D', '\x67F', '\x5', '\xEC', 'w', '\x2', '\x67E', '\x680', 
		'\x5', '\xF2', 'z', '\x2', '\x67F', '\x67E', '\x3', '\x2', '\x2', '\x2', 
		'\x67F', '\x680', '\x3', '\x2', '\x2', '\x2', '\x680', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\x681', '\x684', '\a', '\x195', '\x2', '\x2', '\x682', 
		'\x684', '\x5', '\xEE', 'x', '\x2', '\x683', '\x681', '\x3', '\x2', '\x2', 
		'\x2', '\x683', '\x682', '\x3', '\x2', '\x2', '\x2', '\x684', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\x685', '\x686', '\x5', '\xF0', 'y', '\x2', 
		'\x686', '\x687', '\a', '\x18F', '\x2', '\x2', '\x687', '\x688', '\a', 
		'\x195', '\x2', '\x2', '\x688', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x689', 
		'\x68A', '\a', '\x195', '\x2', '\x2', '\x68A', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\x68B', '\x68C', '\a', '\x163', '\x2', '\x2', '\x68C', '\x68D', 
		'\x5', '\xF4', '{', '\x2', '\x68D', '\x68E', '\a', '\x164', '\x2', '\x2', 
		'\x68E', '\xF3', '\x3', '\x2', '\x2', '\x2', '\x68F', '\x691', '\b', '{', 
		'\x1', '\x2', '\x690', '\x692', '\x5', '\xF6', '|', '\x2', '\x691', '\x690', 
		'\x3', '\x2', '\x2', '\x2', '\x691', '\x692', '\x3', '\x2', '\x2', '\x2', 
		'\x692', '\x697', '\x3', '\x2', '\x2', '\x2', '\x693', '\x694', '\f', 
		'\x3', '\x2', '\x2', '\x694', '\x696', '\x5', '\xF6', '|', '\x2', '\x695', 
		'\x693', '\x3', '\x2', '\x2', '\x2', '\x696', '\x699', '\x3', '\x2', '\x2', 
		'\x2', '\x697', '\x695', '\x3', '\x2', '\x2', '\x2', '\x697', '\x698', 
		'\x3', '\x2', '\x2', '\x2', '\x698', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\x699', '\x697', '\x3', '\x2', '\x2', '\x2', '\x69A', '\x69B', '\a', 
		'\x163', '\x2', '\x2', '\x69B', '\x69C', '\x5', '\xF4', '{', '\x2', '\x69C', 
		'\x69D', '\a', '\x164', '\x2', '\x2', '\x69D', '\x6AC', '\x3', '\x2', 
		'\x2', '\x2', '\x69E', '\x69F', '\a', '\x165', '\x2', '\x2', '\x69F', 
		'\x6A0', '\x5', '\xF4', '{', '\x2', '\x6A0', '\x6A1', '\a', '\x166', '\x2', 
		'\x2', '\x6A1', '\x6AC', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x6A3', 
		'\a', '\x167', '\x2', '\x2', '\x6A3', '\x6A4', '\x5', '\xF4', '{', '\x2', 
		'\x6A4', '\x6A5', '\a', '\x168', '\x2', '\x2', '\x6A5', '\x6AC', '\x3', 
		'\x2', '\x2', '\x2', '\x6A6', '\x6A8', '\n', '\n', '\x2', '\x2', '\x6A7', 
		'\x6A6', '\x3', '\x2', '\x2', '\x2', '\x6A8', '\x6A9', '\x3', '\x2', '\x2', 
		'\x2', '\x6A9', '\x6A7', '\x3', '\x2', '\x2', '\x2', '\x6A9', '\x6AA', 
		'\x3', '\x2', '\x2', '\x2', '\x6AA', '\x6AC', '\x3', '\x2', '\x2', '\x2', 
		'\x6AB', '\x69A', '\x3', '\x2', '\x2', '\x2', '\x6AB', '\x69E', '\x3', 
		'\x2', '\x2', '\x2', '\x6AB', '\x6A2', '\x3', '\x2', '\x2', '\x2', '\x6AB', 
		'\x6A7', '\x3', '\x2', '\x2', '\x2', '\x6AC', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\x6AD', '\x6AE', '\b', '}', '\x1', '\x2', '\x6AE', '\x6AF', '\x5', 
		'\xFA', '~', '\x2', '\x6AF', '\x6B5', '\x3', '\x2', '\x2', '\x2', '\x6B0', 
		'\x6B1', '\f', '\x3', '\x2', '\x2', '\x6B1', '\x6B2', '\a', '\x18A', '\x2', 
		'\x2', '\x6B2', '\x6B4', '\x5', '\xFA', '~', '\x2', '\x6B3', '\x6B0', 
		'\x3', '\x2', '\x2', '\x2', '\x6B4', '\x6B7', '\x3', '\x2', '\x2', '\x2', 
		'\x6B5', '\x6B3', '\x3', '\x2', '\x2', '\x2', '\x6B5', '\x6B6', '\x3', 
		'\x2', '\x2', '\x2', '\x6B6', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x6B7', 
		'\x6B5', '\x3', '\x2', '\x2', '\x2', '\x6B8', '\x6BA', '\x5', '\xFC', 
		'\x7F', '\x2', '\x6B9', '\x6BB', '\x5', '\x126', '\x94', '\x2', '\x6BA', 
		'\x6B9', '\x3', '\x2', '\x2', '\x2', '\x6BA', '\x6BB', '\x3', '\x2', '\x2', 
		'\x2', '\x6BB', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x6BC', '\x6C2', 
		'\x5', '\xFE', '\x80', '\x2', '\x6BD', '\x6BE', '\x5', '\x100', '\x81', 
		'\x2', '\x6BE', '\x6BF', '\x5', '\x102', '\x82', '\x2', '\x6BF', '\x6C0', 
		'\x5', '\x104', '\x83', '\x2', '\x6C0', '\x6C2', '\x3', '\x2', '\x2', 
		'\x2', '\x6C1', '\x6BC', '\x3', '\x2', '\x2', '\x2', '\x6C1', '\x6BD', 
		'\x3', '\x2', '\x2', '\x2', '\x6C2', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\x6C3', '\x6C8', '\x5', '\x100', '\x81', '\x2', '\x6C4', '\x6C5', '\x5', 
		'\x106', '\x84', '\x2', '\x6C5', '\x6C6', '\x5', '\xFE', '\x80', '\x2', 
		'\x6C6', '\x6C8', '\x3', '\x2', '\x2', '\x2', '\x6C7', '\x6C3', '\x3', 
		'\x2', '\x2', '\x2', '\x6C7', '\x6C4', '\x3', '\x2', '\x2', '\x2', '\x6C8', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x6C9', '\x6CA', '\b', '\x81', '\x1', 
		'\x2', '\x6CA', '\x6CC', '\x5', '\x10E', '\x88', '\x2', '\x6CB', '\x6CD', 
		'\x5', '\xE2', 'r', '\x2', '\x6CC', '\x6CB', '\x3', '\x2', '\x2', '\x2', 
		'\x6CC', '\x6CD', '\x3', '\x2', '\x2', '\x2', '\x6CD', '\x6D3', '\x3', 
		'\x2', '\x2', '\x2', '\x6CE', '\x6CF', '\a', '\x163', '\x2', '\x2', '\x6CF', 
		'\x6D0', '\x5', '\xFE', '\x80', '\x2', '\x6D0', '\x6D1', '\a', '\x164', 
		'\x2', '\x2', '\x6D1', '\x6D3', '\x3', '\x2', '\x2', '\x2', '\x6D2', '\x6C9', 
		'\x3', '\x2', '\x2', '\x2', '\x6D2', '\x6CE', '\x3', '\x2', '\x2', '\x2', 
		'\x6D3', '\x6E1', '\x3', '\x2', '\x2', '\x2', '\x6D4', '\x6D5', '\f', 
		'\x5', '\x2', '\x2', '\x6D5', '\x6E0', '\x5', '\x102', '\x82', '\x2', 
		'\x6D6', '\x6D7', '\f', '\x4', '\x2', '\x2', '\x6D7', '\x6D9', '\a', '\x165', 
		'\x2', '\x2', '\x6D8', '\x6DA', '\x5', '`', '\x31', '\x2', '\x6D9', '\x6D8', 
		'\x3', '\x2', '\x2', '\x2', '\x6D9', '\x6DA', '\x3', '\x2', '\x2', '\x2', 
		'\x6DA', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6DD', '\a', 
		'\x166', '\x2', '\x2', '\x6DC', '\x6DE', '\x5', '\xE2', 'r', '\x2', '\x6DD', 
		'\x6DC', '\x3', '\x2', '\x2', '\x2', '\x6DD', '\x6DE', '\x3', '\x2', '\x2', 
		'\x2', '\x6DE', '\x6E0', '\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6D4', 
		'\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6D6', '\x3', '\x2', '\x2', '\x2', 
		'\x6E0', '\x6E3', '\x3', '\x2', '\x2', '\x2', '\x6E1', '\x6DF', '\x3', 
		'\x2', '\x2', '\x2', '\x6E1', '\x6E2', '\x3', '\x2', '\x2', '\x2', '\x6E2', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x6E3', '\x6E1', '\x3', '\x2', '\x2', 
		'\x2', '\x6E4', '\x6E5', '\a', '\x163', '\x2', '\x2', '\x6E5', '\x6E6', 
		'\x5', '\x11C', '\x8F', '\x2', '\x6E6', '\x6E8', '\a', '\x164', '\x2', 
		'\x2', '\x6E7', '\x6E9', '\x5', '\x108', '\x85', '\x2', '\x6E8', '\x6E7', 
		'\x3', '\x2', '\x2', '\x2', '\x6E8', '\x6E9', '\x3', '\x2', '\x2', '\x2', 
		'\x6E9', '\x6EB', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6EC', '\x5', 
		'\x10C', '\x87', '\x2', '\x6EB', '\x6EA', '\x3', '\x2', '\x2', '\x2', 
		'\x6EB', '\x6EC', '\x3', '\x2', '\x2', '\x2', '\x6EC', '\x6EE', '\x3', 
		'\x2', '\x2', '\x2', '\x6ED', '\x6EF', '\x5', '\x18C', '\xC7', '\x2', 
		'\x6EE', '\x6ED', '\x3', '\x2', '\x2', '\x2', '\x6EE', '\x6EF', '\x3', 
		'\x2', '\x2', '\x2', '\x6EF', '\x6F1', '\x3', '\x2', '\x2', '\x2', '\x6F0', 
		'\x6F2', '\x5', '\xE2', 'r', '\x2', '\x6F1', '\x6F0', '\x3', '\x2', '\x2', 
		'\x2', '\x6F1', '\x6F2', '\x3', '\x2', '\x2', '\x2', '\x6F2', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x6F3', '\x6F4', '\a', '\x18C', '\x2', '\x2', 
		'\x6F4', '\x6F6', '\x5', '\xA8', 'U', '\x2', '\x6F5', '\x6F7', '\x5', 
		'\x112', '\x8A', '\x2', '\x6F6', '\x6F5', '\x3', '\x2', '\x2', '\x2', 
		'\x6F6', '\x6F7', '\x3', '\x2', '\x2', '\x2', '\x6F7', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x6F8', '\x6FA', '\a', '\x16B', '\x2', '\x2', '\x6F9', 
		'\x6FB', '\x5', '\xE2', 'r', '\x2', '\x6FA', '\x6F9', '\x3', '\x2', '\x2', 
		'\x2', '\x6FA', '\x6FB', '\x3', '\x2', '\x2', '\x2', '\x6FB', '\x6FD', 
		'\x3', '\x2', '\x2', '\x2', '\x6FC', '\x6FE', '\x5', '\x108', '\x85', 
		'\x2', '\x6FD', '\x6FC', '\x3', '\x2', '\x2', '\x2', '\x6FD', '\x6FE', 
		'\x3', '\x2', '\x2', '\x2', '\x6FE', '\x710', '\x3', '\x2', '\x2', '\x2', 
		'\x6FF', '\x701', '\a', '\x16F', '\x2', '\x2', '\x700', '\x702', '\x5', 
		'\xE2', 'r', '\x2', '\x701', '\x700', '\x3', '\x2', '\x2', '\x2', '\x701', 
		'\x702', '\x3', '\x2', '\x2', '\x2', '\x702', '\x710', '\x3', '\x2', '\x2', 
		'\x2', '\x703', '\x705', '\a', '\x5', '\x2', '\x2', '\x704', '\x706', 
		'\x5', '\xE2', 'r', '\x2', '\x705', '\x704', '\x3', '\x2', '\x2', '\x2', 
		'\x705', '\x706', '\x3', '\x2', '\x2', '\x2', '\x706', '\x710', '\x3', 
		'\x2', '\x2', '\x2', '\x707', '\x708', '\x5', '\f', '\a', '\x2', '\x708', 
		'\x70A', '\a', '\x16B', '\x2', '\x2', '\x709', '\x70B', '\x5', '\xE2', 
		'r', '\x2', '\x70A', '\x709', '\x3', '\x2', '\x2', '\x2', '\x70A', '\x70B', 
		'\x3', '\x2', '\x2', '\x2', '\x70B', '\x70D', '\x3', '\x2', '\x2', '\x2', 
		'\x70C', '\x70E', '\x5', '\x108', '\x85', '\x2', '\x70D', '\x70C', '\x3', 
		'\x2', '\x2', '\x2', '\x70D', '\x70E', '\x3', '\x2', '\x2', '\x2', '\x70E', 
		'\x710', '\x3', '\x2', '\x2', '\x2', '\x70F', '\x6F8', '\x3', '\x2', '\x2', 
		'\x2', '\x70F', '\x6FF', '\x3', '\x2', '\x2', '\x2', '\x70F', '\x703', 
		'\x3', '\x2', '\x2', '\x2', '\x70F', '\x707', '\x3', '\x2', '\x2', '\x2', 
		'\x710', '\x107', '\x3', '\x2', '\x2', '\x2', '\x711', '\x713', '\x5', 
		'\x10A', '\x86', '\x2', '\x712', '\x714', '\x5', '\x108', '\x85', '\x2', 
		'\x713', '\x712', '\x3', '\x2', '\x2', '\x2', '\x713', '\x714', '\x3', 
		'\x2', '\x2', '\x2', '\x714', '\x109', '\x3', '\x2', '\x2', '\x2', '\x715', 
		'\x716', '\t', '\v', '\x2', '\x2', '\x716', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x717', '\x718', '\t', '\f', '\x2', '\x2', '\x718', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x719', '\x71B', '\a', '\x193', '\x2', '\x2', '\x71A', 
		'\x719', '\x3', '\x2', '\x2', '\x2', '\x71A', '\x71B', '\x3', '\x2', '\x2', 
		'\x2', '\x71B', '\x71C', '\x3', '\x2', '\x2', '\x2', '\x71C', '\x71D', 
		'\x5', '\x6', '\x4', '\x2', '\x71D', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x71E', '\x720', '\x5', '\xA6', 'T', '\x2', '\x71F', '\x721', '\x5', 
		'\x112', '\x8A', '\x2', '\x720', '\x71F', '\x3', '\x2', '\x2', '\x2', 
		'\x720', '\x721', '\x3', '\x2', '\x2', '\x2', '\x721', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x722', '\x72B', '\x5', '\x114', '\x8B', '\x2', 
		'\x723', '\x725', '\x5', '\x116', '\x8C', '\x2', '\x724', '\x723', '\x3', 
		'\x2', '\x2', '\x2', '\x724', '\x725', '\x3', '\x2', '\x2', '\x2', '\x725', 
		'\x726', '\x3', '\x2', '\x2', '\x2', '\x726', '\x727', '\x5', '\x102', 
		'\x82', '\x2', '\x727', '\x728', '\x5', '\x104', '\x83', '\x2', '\x728', 
		'\x72B', '\x3', '\x2', '\x2', '\x2', '\x729', '\x72B', '\x5', '\x118', 
		'\x8D', '\x2', '\x72A', '\x722', '\x3', '\x2', '\x2', '\x2', '\x72A', 
		'\x724', '\x3', '\x2', '\x2', '\x2', '\x72A', '\x729', '\x3', '\x2', '\x2', 
		'\x2', '\x72B', '\x113', '\x3', '\x2', '\x2', '\x2', '\x72C', '\x732', 
		'\x5', '\x116', '\x8C', '\x2', '\x72D', '\x72F', '\x5', '\x106', '\x84', 
		'\x2', '\x72E', '\x730', '\x5', '\x114', '\x8B', '\x2', '\x72F', '\x72E', 
		'\x3', '\x2', '\x2', '\x2', '\x72F', '\x730', '\x3', '\x2', '\x2', '\x2', 
		'\x730', '\x732', '\x3', '\x2', '\x2', '\x2', '\x731', '\x72C', '\x3', 
		'\x2', '\x2', '\x2', '\x731', '\x72D', '\x3', '\x2', '\x2', '\x2', '\x732', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x733', '\x734', '\b', '\x8C', '\x1', 
		'\x2', '\x734', '\x742', '\x5', '\x102', '\x82', '\x2', '\x735', '\x737', 
		'\a', '\x165', '\x2', '\x2', '\x736', '\x738', '\x5', '`', '\x31', '\x2', 
		'\x737', '\x736', '\x3', '\x2', '\x2', '\x2', '\x737', '\x738', '\x3', 
		'\x2', '\x2', '\x2', '\x738', '\x739', '\x3', '\x2', '\x2', '\x2', '\x739', 
		'\x73B', '\a', '\x166', '\x2', '\x2', '\x73A', '\x73C', '\x5', '\xE2', 
		'r', '\x2', '\x73B', '\x73A', '\x3', '\x2', '\x2', '\x2', '\x73B', '\x73C', 
		'\x3', '\x2', '\x2', '\x2', '\x73C', '\x742', '\x3', '\x2', '\x2', '\x2', 
		'\x73D', '\x73E', '\a', '\x163', '\x2', '\x2', '\x73E', '\x73F', '\x5', 
		'\x114', '\x8B', '\x2', '\x73F', '\x740', '\a', '\x164', '\x2', '\x2', 
		'\x740', '\x742', '\x3', '\x2', '\x2', '\x2', '\x741', '\x733', '\x3', 
		'\x2', '\x2', '\x2', '\x741', '\x735', '\x3', '\x2', '\x2', '\x2', '\x741', 
		'\x73D', '\x3', '\x2', '\x2', '\x2', '\x742', '\x750', '\x3', '\x2', '\x2', 
		'\x2', '\x743', '\x744', '\f', '\a', '\x2', '\x2', '\x744', '\x74F', '\x5', 
		'\x102', '\x82', '\x2', '\x745', '\x746', '\f', '\x5', '\x2', '\x2', '\x746', 
		'\x748', '\a', '\x165', '\x2', '\x2', '\x747', '\x749', '\x5', '`', '\x31', 
		'\x2', '\x748', '\x747', '\x3', '\x2', '\x2', '\x2', '\x748', '\x749', 
		'\x3', '\x2', '\x2', '\x2', '\x749', '\x74A', '\x3', '\x2', '\x2', '\x2', 
		'\x74A', '\x74C', '\a', '\x166', '\x2', '\x2', '\x74B', '\x74D', '\x5', 
		'\xE2', 'r', '\x2', '\x74C', '\x74B', '\x3', '\x2', '\x2', '\x2', '\x74C', 
		'\x74D', '\x3', '\x2', '\x2', '\x2', '\x74D', '\x74F', '\x3', '\x2', '\x2', 
		'\x2', '\x74E', '\x743', '\x3', '\x2', '\x2', '\x2', '\x74E', '\x745', 
		'\x3', '\x2', '\x2', '\x2', '\x74F', '\x752', '\x3', '\x2', '\x2', '\x2', 
		'\x750', '\x74E', '\x3', '\x2', '\x2', '\x2', '\x750', '\x751', '\x3', 
		'\x2', '\x2', '\x2', '\x751', '\x117', '\x3', '\x2', '\x2', '\x2', '\x752', 
		'\x750', '\x3', '\x2', '\x2', '\x2', '\x753', '\x758', '\x5', '\x11A', 
		'\x8E', '\x2', '\x754', '\x755', '\x5', '\x106', '\x84', '\x2', '\x755', 
		'\x756', '\x5', '\x118', '\x8D', '\x2', '\x756', '\x758', '\x3', '\x2', 
		'\x2', '\x2', '\x757', '\x753', '\x3', '\x2', '\x2', '\x2', '\x757', '\x754', 
		'\x3', '\x2', '\x2', '\x2', '\x758', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x759', '\x75A', '\b', '\x8E', '\x1', '\x2', '\x75A', '\x75B', '\a', 
		'\x193', '\x2', '\x2', '\x75B', '\x769', '\x3', '\x2', '\x2', '\x2', '\x75C', 
		'\x75D', '\f', '\x5', '\x2', '\x2', '\x75D', '\x768', '\x5', '\x102', 
		'\x82', '\x2', '\x75E', '\x75F', '\f', '\x4', '\x2', '\x2', '\x75F', '\x761', 
		'\a', '\x165', '\x2', '\x2', '\x760', '\x762', '\x5', '`', '\x31', '\x2', 
		'\x761', '\x760', '\x3', '\x2', '\x2', '\x2', '\x761', '\x762', '\x3', 
		'\x2', '\x2', '\x2', '\x762', '\x763', '\x3', '\x2', '\x2', '\x2', '\x763', 
		'\x765', '\a', '\x166', '\x2', '\x2', '\x764', '\x766', '\x5', '\xE2', 
		'r', '\x2', '\x765', '\x764', '\x3', '\x2', '\x2', '\x2', '\x765', '\x766', 
		'\x3', '\x2', '\x2', '\x2', '\x766', '\x768', '\x3', '\x2', '\x2', '\x2', 
		'\x767', '\x75C', '\x3', '\x2', '\x2', '\x2', '\x767', '\x75E', '\x3', 
		'\x2', '\x2', '\x2', '\x768', '\x76B', '\x3', '\x2', '\x2', '\x2', '\x769', 
		'\x767', '\x3', '\x2', '\x2', '\x2', '\x769', '\x76A', '\x3', '\x2', '\x2', 
		'\x2', '\x76A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x76B', '\x769', 
		'\x3', '\x2', '\x2', '\x2', '\x76C', '\x76E', '\x5', '\x11E', '\x90', 
		'\x2', '\x76D', '\x76C', '\x3', '\x2', '\x2', '\x2', '\x76D', '\x76E', 
		'\x3', '\x2', '\x2', '\x2', '\x76E', '\x770', '\x3', '\x2', '\x2', '\x2', 
		'\x76F', '\x771', '\a', '\x193', '\x2', '\x2', '\x770', '\x76F', '\x3', 
		'\x2', '\x2', '\x2', '\x770', '\x771', '\x3', '\x2', '\x2', '\x2', '\x771', 
		'\x777', '\x3', '\x2', '\x2', '\x2', '\x772', '\x773', '\x5', '\x11E', 
		'\x90', '\x2', '\x773', '\x774', '\a', '\x18A', '\x2', '\x2', '\x774', 
		'\x775', '\a', '\x193', '\x2', '\x2', '\x775', '\x777', '\x3', '\x2', 
		'\x2', '\x2', '\x776', '\x76D', '\x3', '\x2', '\x2', '\x2', '\x776', '\x772', 
		'\x3', '\x2', '\x2', '\x2', '\x777', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x778', '\x779', '\b', '\x90', '\x1', '\x2', '\x779', '\x77A', '\x5', 
		'\x120', '\x91', '\x2', '\x77A', '\x780', '\x3', '\x2', '\x2', '\x2', 
		'\x77B', '\x77C', '\f', '\x3', '\x2', '\x2', '\x77C', '\x77D', '\a', '\x18A', 
		'\x2', '\x2', '\x77D', '\x77F', '\x5', '\x120', '\x91', '\x2', '\x77E', 
		'\x77B', '\x3', '\x2', '\x2', '\x2', '\x77F', '\x782', '\x3', '\x2', '\x2', 
		'\x2', '\x780', '\x77E', '\x3', '\x2', '\x2', '\x2', '\x780', '\x781', 
		'\x3', '\x2', '\x2', '\x2', '\x781', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\x782', '\x780', '\x3', '\x2', '\x2', '\x2', '\x783', '\x785', '\x5', 
		'\xE2', 'r', '\x2', '\x784', '\x783', '\x3', '\x2', '\x2', '\x2', '\x784', 
		'\x785', '\x3', '\x2', '\x2', '\x2', '\x785', '\x786', '\x3', '\x2', '\x2', 
		'\x2', '\x786', '\x787', '\x5', '\x90', 'I', '\x2', '\x787', '\x788', 
		'\x5', '\xFC', '\x7F', '\x2', '\x788', '\x7A3', '\x3', '\x2', '\x2', '\x2', 
		'\x789', '\x78B', '\x5', '\xE2', 'r', '\x2', '\x78A', '\x789', '\x3', 
		'\x2', '\x2', '\x2', '\x78A', '\x78B', '\x3', '\x2', '\x2', '\x2', '\x78B', 
		'\x78C', '\x3', '\x2', '\x2', '\x2', '\x78C', '\x78D', '\x5', '\x90', 
		'I', '\x2', '\x78D', '\x78E', '\x5', '\xFC', '\x7F', '\x2', '\x78E', '\x78F', 
		'\a', '\x173', '\x2', '\x2', '\x78F', '\x790', '\x5', '\x12A', '\x96', 
		'\x2', '\x790', '\x7A3', '\x3', '\x2', '\x2', '\x2', '\x791', '\x793', 
		'\x5', '\xE2', 'r', '\x2', '\x792', '\x791', '\x3', '\x2', '\x2', '\x2', 
		'\x792', '\x793', '\x3', '\x2', '\x2', '\x2', '\x793', '\x794', '\x3', 
		'\x2', '\x2', '\x2', '\x794', '\x796', '\x5', '\x90', 'I', '\x2', '\x795', 
		'\x797', '\x5', '\x112', '\x8A', '\x2', '\x796', '\x795', '\x3', '\x2', 
		'\x2', '\x2', '\x796', '\x797', '\x3', '\x2', '\x2', '\x2', '\x797', '\x7A3', 
		'\x3', '\x2', '\x2', '\x2', '\x798', '\x79A', '\x5', '\xE2', 'r', '\x2', 
		'\x799', '\x798', '\x3', '\x2', '\x2', '\x2', '\x799', '\x79A', '\x3', 
		'\x2', '\x2', '\x2', '\x79A', '\x79B', '\x3', '\x2', '\x2', '\x2', '\x79B', 
		'\x79D', '\x5', '\x90', 'I', '\x2', '\x79C', '\x79E', '\x5', '\x112', 
		'\x8A', '\x2', '\x79D', '\x79C', '\x3', '\x2', '\x2', '\x2', '\x79D', 
		'\x79E', '\x3', '\x2', '\x2', '\x2', '\x79E', '\x79F', '\x3', '\x2', '\x2', 
		'\x2', '\x79F', '\x7A0', '\a', '\x173', '\x2', '\x2', '\x7A0', '\x7A1', 
		'\x5', '\x12A', '\x96', '\x2', '\x7A1', '\x7A3', '\x3', '\x2', '\x2', 
		'\x2', '\x7A2', '\x784', '\x3', '\x2', '\x2', '\x2', '\x7A2', '\x78A', 
		'\x3', '\x2', '\x2', '\x2', '\x7A2', '\x792', '\x3', '\x2', '\x2', '\x2', 
		'\x7A2', '\x799', '\x3', '\x2', '\x2', '\x2', '\x7A3', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x7A4', '\x7A6', '\x5', '\xE2', 'r', '\x2', '\x7A5', 
		'\x7A4', '\x3', '\x2', '\x2', '\x2', '\x7A5', '\x7A6', '\x3', '\x2', '\x2', 
		'\x2', '\x7A6', '\x7A8', '\x3', '\x2', '\x2', '\x2', '\x7A7', '\x7A9', 
		'\x5', '\x90', 'I', '\x2', '\x7A8', '\x7A7', '\x3', '\x2', '\x2', '\x2', 
		'\x7A8', '\x7A9', '\x3', '\x2', '\x2', '\x2', '\x7A9', '\x7AA', '\x3', 
		'\x2', '\x2', '\x2', '\x7AA', '\x7AC', '\x5', '\xFC', '\x7F', '\x2', '\x7AB', 
		'\x7AD', '\x5', '\x144', '\xA3', '\x2', '\x7AC', '\x7AB', '\x3', '\x2', 
		'\x2', '\x2', '\x7AC', '\x7AD', '\x3', '\x2', '\x2', '\x2', '\x7AD', '\x7AE', 
		'\x3', '\x2', '\x2', '\x2', '\x7AE', '\x7AF', '\x5', '\x124', '\x93', 
		'\x2', '\x7AF', '\x123', '\x3', '\x2', '\x2', '\x2', '\x7B0', '\x7B2', 
		'\x5', '\x15C', '\xAF', '\x2', '\x7B1', '\x7B0', '\x3', '\x2', '\x2', 
		'\x2', '\x7B1', '\x7B2', '\x3', '\x2', '\x2', '\x2', '\x7B2', '\x7B3', 
		'\x3', '\x2', '\x2', '\x2', '\x7B3', '\x7BC', '\x5', 'h', '\x35', '\x2', 
		'\x7B4', '\x7BC', '\x5', '\x182', '\xC2', '\x2', '\x7B5', '\x7B6', '\a', 
		'\x173', '\x2', '\x2', '\x7B6', '\x7B7', '\a', '\x129', '\x2', '\x2', 
		'\x7B7', '\x7BC', '\a', '\x190', '\x2', '\x2', '\x7B8', '\x7B9', '\a', 
		'\x173', '\x2', '\x2', '\x7B9', '\x7BA', '\a', '\x12A', '\x2', '\x2', 
		'\x7BA', '\x7BC', '\a', '\x190', '\x2', '\x2', '\x7BB', '\x7B1', '\x3', 
		'\x2', '\x2', '\x2', '\x7BB', '\x7B4', '\x3', '\x2', '\x2', '\x2', '\x7BB', 
		'\x7B5', '\x3', '\x2', '\x2', '\x2', '\x7BB', '\x7B8', '\x3', '\x2', '\x2', 
		'\x2', '\x7BC', '\x125', '\x3', '\x2', '\x2', '\x2', '\x7BD', '\x7C3', 
		'\x5', '\x128', '\x95', '\x2', '\x7BE', '\x7BF', '\a', '\x163', '\x2', 
		'\x2', '\x7BF', '\x7C0', '\x5', '&', '\x14', '\x2', '\x7C0', '\x7C1', 
		'\a', '\x164', '\x2', '\x2', '\x7C1', '\x7C3', '\x3', '\x2', '\x2', '\x2', 
		'\x7C2', '\x7BD', '\x3', '\x2', '\x2', '\x2', '\x7C2', '\x7BE', '\x3', 
		'\x2', '\x2', '\x2', '\x7C3', '\x127', '\x3', '\x2', '\x2', '\x2', '\x7C4', 
		'\x7C5', '\a', '\x173', '\x2', '\x2', '\x7C5', '\x7C8', '\x5', '\x12A', 
		'\x96', '\x2', '\x7C6', '\x7C8', '\x5', '\x12E', '\x98', '\x2', '\x7C7', 
		'\x7C4', '\x3', '\x2', '\x2', '\x2', '\x7C7', '\x7C6', '\x3', '\x2', '\x2', 
		'\x2', '\x7C8', '\x129', '\x3', '\x2', '\x2', '\x2', '\x7C9', '\x7CC', 
		'\x5', 'Z', '.', '\x2', '\x7CA', '\x7CC', '\x5', '\x12E', '\x98', '\x2', 
		'\x7CB', '\x7C9', '\x3', '\x2', '\x2', '\x2', '\x7CB', '\x7CA', '\x3', 
		'\x2', '\x2', '\x2', '\x7CC', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x7CD', 
		'\x7CE', '\b', '\x97', '\x1', '\x2', '\x7CE', '\x7D0', '\x5', '\x12A', 
		'\x96', '\x2', '\x7CF', '\x7D1', '\a', '\x193', '\x2', '\x2', '\x7D0', 
		'\x7CF', '\x3', '\x2', '\x2', '\x2', '\x7D0', '\x7D1', '\x3', '\x2', '\x2', 
		'\x2', '\x7D1', '\x7DA', '\x3', '\x2', '\x2', '\x2', '\x7D2', '\x7D3', 
		'\f', '\x3', '\x2', '\x2', '\x7D3', '\x7D4', '\a', '\x18A', '\x2', '\x2', 
		'\x7D4', '\x7D6', '\x5', '\x12A', '\x96', '\x2', '\x7D5', '\x7D7', '\a', 
		'\x193', '\x2', '\x2', '\x7D6', '\x7D5', '\x3', '\x2', '\x2', '\x2', '\x7D6', 
		'\x7D7', '\x3', '\x2', '\x2', '\x2', '\x7D7', '\x7D9', '\x3', '\x2', '\x2', 
		'\x2', '\x7D8', '\x7D2', '\x3', '\x2', '\x2', '\x2', '\x7D9', '\x7DC', 
		'\x3', '\x2', '\x2', '\x2', '\x7DA', '\x7D8', '\x3', '\x2', '\x2', '\x2', 
		'\x7DA', '\x7DB', '\x3', '\x2', '\x2', '\x2', '\x7DB', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x7DC', '\x7DA', '\x3', '\x2', '\x2', '\x2', '\x7DD', 
		'\x7DE', '\a', '\x167', '\x2', '\x2', '\x7DE', '\x7E0', '\x5', '\x12C', 
		'\x97', '\x2', '\x7DF', '\x7E1', '\a', '\x18A', '\x2', '\x2', '\x7E0', 
		'\x7DF', '\x3', '\x2', '\x2', '\x2', '\x7E0', '\x7E1', '\x3', '\x2', '\x2', 
		'\x2', '\x7E1', '\x7E2', '\x3', '\x2', '\x2', '\x2', '\x7E2', '\x7E3', 
		'\a', '\x168', '\x2', '\x2', '\x7E3', '\x7E7', '\x3', '\x2', '\x2', '\x2', 
		'\x7E4', '\x7E5', '\a', '\x167', '\x2', '\x2', '\x7E5', '\x7E7', '\a', 
		'\x168', '\x2', '\x2', '\x7E6', '\x7DD', '\x3', '\x2', '\x2', '\x2', '\x7E6', 
		'\x7E4', '\x3', '\x2', '\x2', '\x2', '\x7E7', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x7E8', '\x7EB', '\a', '\x195', '\x2', '\x2', '\x7E9', '\x7EB', 
		'\x5', '\x170', '\xB9', '\x2', '\x7EA', '\x7E8', '\x3', '\x2', '\x2', 
		'\x2', '\x7EA', '\x7E9', '\x3', '\x2', '\x2', '\x2', '\x7EB', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x7EC', '\x7ED', '\x5', '\x134', '\x9B', 
		'\x2', '\x7ED', '\x7EF', '\a', '\x167', '\x2', '\x2', '\x7EE', '\x7F0', 
		'\x5', '\x13C', '\x9F', '\x2', '\x7EF', '\x7EE', '\x3', '\x2', '\x2', 
		'\x2', '\x7EF', '\x7F0', '\x3', '\x2', '\x2', '\x2', '\x7F0', '\x7F1', 
		'\x3', '\x2', '\x2', '\x2', '\x7F1', '\x7F2', '\a', '\x168', '\x2', '\x2', 
		'\x7F2', '\x133', '\x3', '\x2', '\x2', '\x2', '\x7F3', '\x7F5', '\x5', 
		'\x13A', '\x9E', '\x2', '\x7F4', '\x7F6', '\x5', '\xE2', 'r', '\x2', '\x7F5', 
		'\x7F4', '\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7F6', '\x3', '\x2', '\x2', 
		'\x2', '\x7F6', '\x7F7', '\x3', '\x2', '\x2', '\x2', '\x7F7', '\x7F9', 
		'\x5', '\x136', '\x9C', '\x2', '\x7F8', '\x7FA', '\x5', '\x138', '\x9D', 
		'\x2', '\x7F9', '\x7F8', '\x3', '\x2', '\x2', '\x2', '\x7F9', '\x7FA', 
		'\x3', '\x2', '\x2', '\x2', '\x7FA', '\x7FC', '\x3', '\x2', '\x2', '\x2', 
		'\x7FB', '\x7FD', '\x5', '\x14A', '\xA6', '\x2', '\x7FC', '\x7FB', '\x3', 
		'\x2', '\x2', '\x2', '\x7FC', '\x7FD', '\x3', '\x2', '\x2', '\x2', '\x7FD', 
		'\x806', '\x3', '\x2', '\x2', '\x2', '\x7FE', '\x800', '\x5', '\x13A', 
		'\x9E', '\x2', '\x7FF', '\x801', '\x5', '\xE2', 'r', '\x2', '\x800', '\x7FF', 
		'\x3', '\x2', '\x2', '\x2', '\x800', '\x801', '\x3', '\x2', '\x2', '\x2', 
		'\x801', '\x803', '\x3', '\x2', '\x2', '\x2', '\x802', '\x804', '\x5', 
		'\x14A', '\xA6', '\x2', '\x803', '\x802', '\x3', '\x2', '\x2', '\x2', 
		'\x803', '\x804', '\x3', '\x2', '\x2', '\x2', '\x804', '\x806', '\x3', 
		'\x2', '\x2', '\x2', '\x805', '\x7F3', '\x3', '\x2', '\x2', '\x2', '\x805', 
		'\x7FE', '\x3', '\x2', '\x2', '\x2', '\x806', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '\x807', '\x809', '\x5', '\f', '\a', '\x2', '\x808', '\x807', '\x3', 
		'\x2', '\x2', '\x2', '\x808', '\x809', '\x3', '\x2', '\x2', '\x2', '\x809', 
		'\x80A', '\x3', '\x2', '\x2', '\x2', '\x80A', '\x80B', '\x5', '\x130', 
		'\x99', '\x2', '\x80B', '\x137', '\x3', '\x2', '\x2', '\x2', '\x80C', 
		'\x80D', '\a', '\x134', '\x2', '\x2', '\x80D', '\x139', '\x3', '\x2', 
		'\x2', '\x2', '\x80E', '\x80F', '\t', '\r', '\x2', '\x2', '\x80F', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '\x810', '\x812', '\x5', '\x13E', '\xA0', 
		'\x2', '\x811', '\x813', '\x5', '\x13C', '\x9F', '\x2', '\x812', '\x811', 
		'\x3', '\x2', '\x2', '\x2', '\x812', '\x813', '\x3', '\x2', '\x2', '\x2', 
		'\x813', '\x81A', '\x3', '\x2', '\x2', '\x2', '\x814', '\x815', '\x5', 
		'\x154', '\xAB', '\x2', '\x815', '\x817', '\a', '\x18E', '\x2', '\x2', 
		'\x816', '\x818', '\x5', '\x13C', '\x9F', '\x2', '\x817', '\x816', '\x3', 
		'\x2', '\x2', '\x2', '\x817', '\x818', '\x3', '\x2', '\x2', '\x2', '\x818', 
		'\x81A', '\x3', '\x2', '\x2', '\x2', '\x819', '\x810', '\x3', '\x2', '\x2', 
		'\x2', '\x819', '\x814', '\x3', '\x2', '\x2', '\x2', '\x81A', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x81B', '\x81D', '\x5', '\xE2', 'r', '\x2', 
		'\x81C', '\x81B', '\x3', '\x2', '\x2', '\x2', '\x81C', '\x81D', '\x3', 
		'\x2', '\x2', '\x2', '\x81D', '\x81F', '\x3', '\x2', '\x2', '\x2', '\x81E', 
		'\x820', '\x5', '\x90', 'I', '\x2', '\x81F', '\x81E', '\x3', '\x2', '\x2', 
		'\x2', '\x81F', '\x820', '\x3', '\x2', '\x2', '\x2', '\x820', '\x822', 
		'\x3', '\x2', '\x2', '\x2', '\x821', '\x823', '\x5', '\x140', '\xA1', 
		'\x2', '\x822', '\x821', '\x3', '\x2', '\x2', '\x2', '\x822', '\x823', 
		'\x3', '\x2', '\x2', '\x2', '\x823', '\x824', '\x3', '\x2', '\x2', '\x2', 
		'\x824', '\x82C', '\a', '\x190', '\x2', '\x2', '\x825', '\x82C', '\x5', 
		'\x122', '\x92', '\x2', '\x826', '\x82C', '\x5', '\xDA', 'n', '\x2', '\x827', 
		'\x82C', '\x5', '\x86', '\x44', '\x2', '\x828', '\x82C', '\x5', '\x168', 
		'\xB5', '\x2', '\x829', '\x82C', '\x5', '\x82', '\x42', '\x2', '\x82A', 
		'\x82C', '\x5', '\x88', '\x45', '\x2', '\x82B', '\x81C', '\x3', '\x2', 
		'\x2', '\x2', '\x82B', '\x825', '\x3', '\x2', '\x2', '\x2', '\x82B', '\x826', 
		'\x3', '\x2', '\x2', '\x2', '\x82B', '\x827', '\x3', '\x2', '\x2', '\x2', 
		'\x82B', '\x828', '\x3', '\x2', '\x2', '\x2', '\x82B', '\x829', '\x3', 
		'\x2', '\x2', '\x2', '\x82B', '\x82A', '\x3', '\x2', '\x2', '\x2', '\x82C', 
		'\x13F', '\x3', '\x2', '\x2', '\x2', '\x82D', '\x82E', '\b', '\xA1', '\x1', 
		'\x2', '\x82E', '\x82F', '\x5', '\x142', '\xA2', '\x2', '\x82F', '\x835', 
		'\x3', '\x2', '\x2', '\x2', '\x830', '\x831', '\f', '\x3', '\x2', '\x2', 
		'\x831', '\x832', '\a', '\x18A', '\x2', '\x2', '\x832', '\x834', '\x5', 
		'\x142', '\xA2', '\x2', '\x833', '\x830', '\x3', '\x2', '\x2', '\x2', 
		'\x834', '\x837', '\x3', '\x2', '\x2', '\x2', '\x835', '\x833', '\x3', 
		'\x2', '\x2', '\x2', '\x835', '\x836', '\x3', '\x2', '\x2', '\x2', '\x836', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x837', '\x835', '\x3', '\x2', '\x2', 
		'\x2', '\x838', '\x83A', '\x5', '\xFC', '\x7F', '\x2', '\x839', '\x83B', 
		'\x5', '\x144', '\xA3', '\x2', '\x83A', '\x839', '\x3', '\x2', '\x2', 
		'\x2', '\x83A', '\x83B', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x83D', 
		'\x3', '\x2', '\x2', '\x2', '\x83C', '\x83E', '\x5', '\x148', '\xA5', 
		'\x2', '\x83D', '\x83C', '\x3', '\x2', '\x2', '\x2', '\x83D', '\x83E', 
		'\x3', '\x2', '\x2', '\x2', '\x83E', '\x84C', '\x3', '\x2', '\x2', '\x2', 
		'\x83F', '\x841', '\x5', '\xFC', '\x7F', '\x2', '\x840', '\x842', '\x5', 
		'\x128', '\x95', '\x2', '\x841', '\x840', '\x3', '\x2', '\x2', '\x2', 
		'\x841', '\x842', '\x3', '\x2', '\x2', '\x2', '\x842', '\x84C', '\x3', 
		'\x2', '\x2', '\x2', '\x843', '\x845', '\a', '\x195', '\x2', '\x2', '\x844', 
		'\x843', '\x3', '\x2', '\x2', '\x2', '\x844', '\x845', '\x3', '\x2', '\x2', 
		'\x2', '\x845', '\x847', '\x3', '\x2', '\x2', '\x2', '\x846', '\x848', 
		'\x5', '\xE2', 'r', '\x2', '\x847', '\x846', '\x3', '\x2', '\x2', '\x2', 
		'\x847', '\x848', '\x3', '\x2', '\x2', '\x2', '\x848', '\x849', '\x3', 
		'\x2', '\x2', '\x2', '\x849', '\x84A', '\a', '\x18E', '\x2', '\x2', '\x84A', 
		'\x84C', '\x5', '`', '\x31', '\x2', '\x84B', '\x838', '\x3', '\x2', '\x2', 
		'\x2', '\x84B', '\x83F', '\x3', '\x2', '\x2', '\x2', '\x84B', '\x844', 
		'\x3', '\x2', '\x2', '\x2', '\x84C', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x84D', '\x84E', '\b', '\xA3', '\x1', '\x2', '\x84E', '\x84F', '\x5', 
		'\x146', '\xA4', '\x2', '\x84F', '\x854', '\x3', '\x2', '\x2', '\x2', 
		'\x850', '\x851', '\f', '\x3', '\x2', '\x2', '\x851', '\x853', '\x5', 
		'\x146', '\xA4', '\x2', '\x852', '\x850', '\x3', '\x2', '\x2', '\x2', 
		'\x853', '\x856', '\x3', '\x2', '\x2', '\x2', '\x854', '\x852', '\x3', 
		'\x2', '\x2', '\x2', '\x854', '\x855', '\x3', '\x2', '\x2', '\x2', '\x855', 
		'\x145', '\x3', '\x2', '\x2', '\x2', '\x856', '\x854', '\x3', '\x2', '\x2', 
		'\x2', '\x857', '\x858', '\t', '\xE', '\x2', '\x2', '\x858', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\x859', '\x85A', '\a', '\x173', '\x2', '\x2', 
		'\x85A', '\x85B', '\a', '\x198', '\x2', '\x2', '\x85B', '\x85C', '\b', 
		'\xA5', '\x1', '\x2', '\x85C', '\x149', '\x3', '\x2', '\x2', '\x2', '\x85D', 
		'\x85E', '\a', '\x18E', '\x2', '\x2', '\x85E', '\x85F', '\x5', '\x14C', 
		'\xA7', '\x2', '\x85F', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x860', 
		'\x861', '\b', '\xA7', '\x1', '\x2', '\x861', '\x863', '\x5', '\x14E', 
		'\xA8', '\x2', '\x862', '\x864', '\a', '\x193', '\x2', '\x2', '\x863', 
		'\x862', '\x3', '\x2', '\x2', '\x2', '\x863', '\x864', '\x3', '\x2', '\x2', 
		'\x2', '\x864', '\x86D', '\x3', '\x2', '\x2', '\x2', '\x865', '\x866', 
		'\f', '\x3', '\x2', '\x2', '\x866', '\x867', '\a', '\x18A', '\x2', '\x2', 
		'\x867', '\x869', '\x5', '\x14E', '\xA8', '\x2', '\x868', '\x86A', '\a', 
		'\x193', '\x2', '\x2', '\x869', '\x868', '\x3', '\x2', '\x2', '\x2', '\x869', 
		'\x86A', '\x3', '\x2', '\x2', '\x2', '\x86A', '\x86C', '\x3', '\x2', '\x2', 
		'\x2', '\x86B', '\x865', '\x3', '\x2', '\x2', '\x2', '\x86C', '\x86F', 
		'\x3', '\x2', '\x2', '\x2', '\x86D', '\x86B', '\x3', '\x2', '\x2', '\x2', 
		'\x86D', '\x86E', '\x3', '\x2', '\x2', '\x2', '\x86E', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x86F', '\x86D', '\x3', '\x2', '\x2', '\x2', '\x870', 
		'\x872', '\x5', '\xE2', 'r', '\x2', '\x871', '\x870', '\x3', '\x2', '\x2', 
		'\x2', '\x871', '\x872', '\x3', '\x2', '\x2', '\x2', '\x872', '\x873', 
		'\x3', '\x2', '\x2', '\x2', '\x873', '\x886', '\x5', '\x152', '\xAA', 
		'\x2', '\x874', '\x876', '\x5', '\xE2', 'r', '\x2', '\x875', '\x874', 
		'\x3', '\x2', '\x2', '\x2', '\x875', '\x876', '\x3', '\x2', '\x2', '\x2', 
		'\x876', '\x877', '\x3', '\x2', '\x2', '\x2', '\x877', '\x879', '\a', 
		'\x15E', '\x2', '\x2', '\x878', '\x87A', '\x5', '\x154', '\xAB', '\x2', 
		'\x879', '\x878', '\x3', '\x2', '\x2', '\x2', '\x879', '\x87A', '\x3', 
		'\x2', '\x2', '\x2', '\x87A', '\x87B', '\x3', '\x2', '\x2', '\x2', '\x87B', 
		'\x886', '\x5', '\x152', '\xAA', '\x2', '\x87C', '\x87E', '\x5', '\xE2', 
		'r', '\x2', '\x87D', '\x87C', '\x3', '\x2', '\x2', '\x2', '\x87D', '\x87E', 
		'\x3', '\x2', '\x2', '\x2', '\x87E', '\x87F', '\x3', '\x2', '\x2', '\x2', 
		'\x87F', '\x881', '\x5', '\x154', '\xAB', '\x2', '\x880', '\x882', '\a', 
		'\x15E', '\x2', '\x2', '\x881', '\x880', '\x3', '\x2', '\x2', '\x2', '\x881', 
		'\x882', '\x3', '\x2', '\x2', '\x2', '\x882', '\x883', '\x3', '\x2', '\x2', 
		'\x2', '\x883', '\x884', '\x5', '\x152', '\xAA', '\x2', '\x884', '\x886', 
		'\x3', '\x2', '\x2', '\x2', '\x885', '\x871', '\x3', '\x2', '\x2', '\x2', 
		'\x885', '\x875', '\x3', '\x2', '\x2', '\x2', '\x885', '\x87D', '\x3', 
		'\x2', '\x2', '\x2', '\x886', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x887', 
		'\x889', '\x5', '\f', '\a', '\x2', '\x888', '\x887', '\x3', '\x2', '\x2', 
		'\x2', '\x888', '\x889', '\x3', '\x2', '\x2', '\x2', '\x889', '\x88A', 
		'\x3', '\x2', '\x2', '\x2', '\x88A', '\x88D', '\x5', '\x130', '\x99', 
		'\x2', '\x88B', '\x88D', '\x5', '\xAE', 'X', '\x2', '\x88C', '\x888', 
		'\x3', '\x2', '\x2', '\x2', '\x88C', '\x88B', '\x3', '\x2', '\x2', '\x2', 
		'\x88D', '\x151', '\x3', '\x2', '\x2', '\x2', '\x88E', '\x88F', '\x5', 
		'\x150', '\xA9', '\x2', '\x88F', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x890', '\x891', '\t', '\xF', '\x2', '\x2', '\x891', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x892', '\x893', '\a', '\x142', '\x2', '\x2', '\x893', 
		'\x894', '\x5', '\x158', '\xAD', '\x2', '\x894', '\x157', '\x3', '\x2', 
		'\x2', '\x2', '\x895', '\x897', '\x5', '\xA6', 'T', '\x2', '\x896', '\x898', 
		'\x5', '\x15A', '\xAE', '\x2', '\x897', '\x896', '\x3', '\x2', '\x2', 
		'\x2', '\x897', '\x898', '\x3', '\x2', '\x2', '\x2', '\x898', '\x159', 
		'\x3', '\x2', '\x2', '\x2', '\x899', '\x89B', '\x5', '\x106', '\x84', 
		'\x2', '\x89A', '\x89C', '\x5', '\x15A', '\xAE', '\x2', '\x89B', '\x89A', 
		'\x3', '\x2', '\x2', '\x2', '\x89B', '\x89C', '\x3', '\x2', '\x2', '\x2', 
		'\x89C', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x89D', '\x89E', '\a', 
		'\x18E', '\x2', '\x2', '\x89E', '\x89F', '\x5', '\x15E', '\xB0', '\x2', 
		'\x89F', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x8A0', '\x8A2', '\x5', 
		'\x160', '\xB1', '\x2', '\x8A1', '\x8A3', '\a', '\x193', '\x2', '\x2', 
		'\x8A2', '\x8A1', '\x3', '\x2', '\x2', '\x2', '\x8A2', '\x8A3', '\x3', 
		'\x2', '\x2', '\x2', '\x8A3', '\x8AC', '\x3', '\x2', '\x2', '\x2', '\x8A4', 
		'\x8A6', '\x5', '\x160', '\xB1', '\x2', '\x8A5', '\x8A7', '\a', '\x193', 
		'\x2', '\x2', '\x8A6', '\x8A5', '\x3', '\x2', '\x2', '\x2', '\x8A6', '\x8A7', 
		'\x3', '\x2', '\x2', '\x2', '\x8A7', '\x8A8', '\x3', '\x2', '\x2', '\x2', 
		'\x8A8', '\x8A9', '\a', '\x18A', '\x2', '\x2', '\x8A9', '\x8AA', '\x5', 
		'\x15E', '\xB0', '\x2', '\x8AA', '\x8AC', '\x3', '\x2', '\x2', '\x2', 
		'\x8AB', '\x8A0', '\x3', '\x2', '\x2', '\x2', '\x8AB', '\x8A4', '\x3', 
		'\x2', '\x2', '\x2', '\x8AC', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x8AD', 
		'\x8AE', '\x5', '\x162', '\xB2', '\x2', '\x8AE', '\x8B0', '\a', '\x163', 
		'\x2', '\x2', '\x8AF', '\x8B1', '\x5', '&', '\x14', '\x2', '\x8B0', '\x8AF', 
		'\x3', '\x2', '\x2', '\x2', '\x8B0', '\x8B1', '\x3', '\x2', '\x2', '\x2', 
		'\x8B1', '\x8B2', '\x3', '\x2', '\x2', '\x2', '\x8B2', '\x8B3', '\a', 
		'\x164', '\x2', '\x2', '\x8B3', '\x8B8', '\x3', '\x2', '\x2', '\x2', '\x8B4', 
		'\x8B5', '\x5', '\x162', '\xB2', '\x2', '\x8B5', '\x8B6', '\x5', '\x12E', 
		'\x98', '\x2', '\x8B6', '\x8B8', '\x3', '\x2', '\x2', '\x2', '\x8B7', 
		'\x8AD', '\x3', '\x2', '\x2', '\x2', '\x8B7', '\x8B4', '\x3', '\x2', '\x2', 
		'\x2', '\x8B8', '\x161', '\x3', '\x2', '\x2', '\x2', '\x8B9', '\x8BC', 
		'\x5', '\x150', '\xA9', '\x2', '\x8BA', '\x8BC', '\a', '\x195', '\x2', 
		'\x2', '\x8BB', '\x8B9', '\x3', '\x2', '\x2', '\x2', '\x8BB', '\x8BA', 
		'\x3', '\x2', '\x2', '\x2', '\x8BC', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x8BD', '\x8BE', '\a', '\x142', '\x2', '\x2', '\x8BE', '\x8BF', '\x5', 
		'\x194', '\xCB', '\x2', '\x8BF', '\x165', '\x3', '\x2', '\x2', '\x2', 
		'\x8C0', '\x8C1', '\a', '\x142', '\x2', '\x2', '\x8C1', '\x8C2', '\a', 
		'\x19E', '\x2', '\x2', '\x8C2', '\x8C6', '\a', '\x195', '\x2', '\x2', 
		'\x8C3', '\x8C4', '\a', '\x142', '\x2', '\x2', '\x8C4', '\x8C6', '\a', 
		'\x1A1', '\x2', '\x2', '\x8C5', '\x8C0', '\x3', '\x2', '\x2', '\x2', '\x8C5', 
		'\x8C3', '\x3', '\x2', '\x2', '\x2', '\x8C6', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x8C7', '\x8C8', '\a', '\x152', '\x2', '\x2', '\x8C8', '\x8C9', 
		'\a', '\x174', '\x2', '\x2', '\x8C9', '\x8CA', '\x5', '\x16A', '\xB6', 
		'\x2', '\x8CA', '\x8CB', '\a', '\x175', '\x2', '\x2', '\x8CB', '\x8CC', 
		'\x5', '~', '@', '\x2', '\x8CC', '\x169', '\x3', '\x2', '\x2', '\x2', 
		'\x8CD', '\x8CE', '\b', '\xB6', '\x1', '\x2', '\x8CE', '\x8CF', '\x5', 
		'\x16C', '\xB7', '\x2', '\x8CF', '\x8D5', '\x3', '\x2', '\x2', '\x2', 
		'\x8D0', '\x8D1', '\f', '\x3', '\x2', '\x2', '\x8D1', '\x8D2', '\a', '\x18A', 
		'\x2', '\x2', '\x8D2', '\x8D4', '\x5', '\x16C', '\xB7', '\x2', '\x8D3', 
		'\x8D0', '\x3', '\x2', '\x2', '\x2', '\x8D4', '\x8D7', '\x3', '\x2', '\x2', 
		'\x2', '\x8D5', '\x8D3', '\x3', '\x2', '\x2', '\x2', '\x8D5', '\x8D6', 
		'\x3', '\x2', '\x2', '\x2', '\x8D6', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x8D7', '\x8D5', '\x3', '\x2', '\x2', '\x2', '\x8D8', '\x8DB', '\x5', 
		'\x16E', '\xB8', '\x2', '\x8D9', '\x8DB', '\x5', '\x120', '\x91', '\x2', 
		'\x8DA', '\x8D8', '\x3', '\x2', '\x2', '\x2', '\x8DA', '\x8D9', '\x3', 
		'\x2', '\x2', '\x2', '\x8DB', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x8DC', 
		'\x8DE', '\a', '\x123', '\x2', '\x2', '\x8DD', '\x8DF', '\a', '\x193', 
		'\x2', '\x2', '\x8DE', '\x8DD', '\x3', '\x2', '\x2', '\x2', '\x8DE', '\x8DF', 
		'\x3', '\x2', '\x2', '\x2', '\x8DF', '\x8E1', '\x3', '\x2', '\x2', '\x2', 
		'\x8E0', '\x8E2', '\a', '\x195', '\x2', '\x2', '\x8E1', '\x8E0', '\x3', 
		'\x2', '\x2', '\x2', '\x8E1', '\x8E2', '\x3', '\x2', '\x2', '\x2', '\x8E2', 
		'\x90D', '\x3', '\x2', '\x2', '\x2', '\x8E3', '\x8E5', '\a', '\x123', 
		'\x2', '\x2', '\x8E4', '\x8E6', '\a', '\x195', '\x2', '\x2', '\x8E5', 
		'\x8E4', '\x3', '\x2', '\x2', '\x2', '\x8E5', '\x8E6', '\x3', '\x2', '\x2', 
		'\x2', '\x8E6', '\x8E7', '\x3', '\x2', '\x2', '\x2', '\x8E7', '\x8E8', 
		'\a', '\x173', '\x2', '\x2', '\x8E8', '\x90D', '\x5', '\x110', '\x89', 
		'\x2', '\x8E9', '\x8EB', '\a', '\x15A', '\x2', '\x2', '\x8EA', '\x8EC', 
		'\a', '\x193', '\x2', '\x2', '\x8EB', '\x8EA', '\x3', '\x2', '\x2', '\x2', 
		'\x8EB', '\x8EC', '\x3', '\x2', '\x2', '\x2', '\x8EC', '\x8EE', '\x3', 
		'\x2', '\x2', '\x2', '\x8ED', '\x8EF', '\a', '\x195', '\x2', '\x2', '\x8EE', 
		'\x8ED', '\x3', '\x2', '\x2', '\x2', '\x8EE', '\x8EF', '\x3', '\x2', '\x2', 
		'\x2', '\x8EF', '\x90D', '\x3', '\x2', '\x2', '\x2', '\x8F0', '\x8F2', 
		'\a', '\x15A', '\x2', '\x2', '\x8F1', '\x8F3', '\a', '\x195', '\x2', '\x2', 
		'\x8F2', '\x8F1', '\x3', '\x2', '\x2', '\x2', '\x8F2', '\x8F3', '\x3', 
		'\x2', '\x2', '\x2', '\x8F3', '\x8F4', '\x3', '\x2', '\x2', '\x2', '\x8F4', 
		'\x8F5', '\a', '\x173', '\x2', '\x2', '\x8F5', '\x90D', '\x5', '\x110', 
		'\x89', '\x2', '\x8F6', '\x8F7', '\a', '\x152', '\x2', '\x2', '\x8F7', 
		'\x8F8', '\a', '\x174', '\x2', '\x2', '\x8F8', '\x8F9', '\x5', '\x16A', 
		'\xB6', '\x2', '\x8F9', '\x8FA', '\a', '\x175', '\x2', '\x2', '\x8FA', 
		'\x8FC', '\a', '\x123', '\x2', '\x2', '\x8FB', '\x8FD', '\a', '\x193', 
		'\x2', '\x2', '\x8FC', '\x8FB', '\x3', '\x2', '\x2', '\x2', '\x8FC', '\x8FD', 
		'\x3', '\x2', '\x2', '\x2', '\x8FD', '\x8FF', '\x3', '\x2', '\x2', '\x2', 
		'\x8FE', '\x900', '\a', '\x195', '\x2', '\x2', '\x8FF', '\x8FE', '\x3', 
		'\x2', '\x2', '\x2', '\x8FF', '\x900', '\x3', '\x2', '\x2', '\x2', '\x900', 
		'\x90D', '\x3', '\x2', '\x2', '\x2', '\x901', '\x902', '\a', '\x152', 
		'\x2', '\x2', '\x902', '\x903', '\a', '\x174', '\x2', '\x2', '\x903', 
		'\x904', '\x5', '\x16A', '\xB6', '\x2', '\x904', '\x905', '\a', '\x175', 
		'\x2', '\x2', '\x905', '\x907', '\a', '\x123', '\x2', '\x2', '\x906', 
		'\x908', '\a', '\x195', '\x2', '\x2', '\x907', '\x906', '\x3', '\x2', 
		'\x2', '\x2', '\x907', '\x908', '\x3', '\x2', '\x2', '\x2', '\x908', '\x909', 
		'\x3', '\x2', '\x2', '\x2', '\x909', '\x90A', '\a', '\x173', '\x2', '\x2', 
		'\x90A', '\x90B', '\x5', '\x6', '\x4', '\x2', '\x90B', '\x90D', '\x3', 
		'\x2', '\x2', '\x2', '\x90C', '\x8DC', '\x3', '\x2', '\x2', '\x2', '\x90C', 
		'\x8E3', '\x3', '\x2', '\x2', '\x2', '\x90C', '\x8E9', '\x3', '\x2', '\x2', 
		'\x2', '\x90C', '\x8F0', '\x3', '\x2', '\x2', '\x2', '\x90C', '\x8F6', 
		'\x3', '\x2', '\x2', '\x2', '\x90C', '\x901', '\x3', '\x2', '\x2', '\x2', 
		'\x90D', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x90E', '\x90F', '\x5', 
		'\x174', '\xBB', '\x2', '\x90F', '\x911', '\a', '\x174', '\x2', '\x2', 
		'\x910', '\x912', '\x5', '\x176', '\xBC', '\x2', '\x911', '\x910', '\x3', 
		'\x2', '\x2', '\x2', '\x911', '\x912', '\x3', '\x2', '\x2', '\x2', '\x912', 
		'\x913', '\x3', '\x2', '\x2', '\x2', '\x913', '\x914', '\a', '\x175', 
		'\x2', '\x2', '\x914', '\x171', '\x3', '\x2', '\x2', '\x2', '\x915', '\x925', 
		'\x5', '\x170', '\xB9', '\x2', '\x916', '\x917', '\x5', '\x164', '\xB3', 
		'\x2', '\x917', '\x919', '\a', '\x174', '\x2', '\x2', '\x918', '\x91A', 
		'\x5', '\x176', '\xBC', '\x2', '\x919', '\x918', '\x3', '\x2', '\x2', 
		'\x2', '\x919', '\x91A', '\x3', '\x2', '\x2', '\x2', '\x91A', '\x91B', 
		'\x3', '\x2', '\x2', '\x2', '\x91B', '\x91C', '\a', '\x175', '\x2', '\x2', 
		'\x91C', '\x925', '\x3', '\x2', '\x2', '\x2', '\x91D', '\x91E', '\x5', 
		'\x166', '\xB4', '\x2', '\x91E', '\x920', '\a', '\x174', '\x2', '\x2', 
		'\x91F', '\x921', '\x5', '\x176', '\xBC', '\x2', '\x920', '\x91F', '\x3', 
		'\x2', '\x2', '\x2', '\x920', '\x921', '\x3', '\x2', '\x2', '\x2', '\x921', 
		'\x922', '\x3', '\x2', '\x2', '\x2', '\x922', '\x923', '\a', '\x175', 
		'\x2', '\x2', '\x923', '\x925', '\x3', '\x2', '\x2', '\x2', '\x924', '\x915', 
		'\x3', '\x2', '\x2', '\x2', '\x924', '\x916', '\x3', '\x2', '\x2', '\x2', 
		'\x924', '\x91D', '\x3', '\x2', '\x2', '\x2', '\x925', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x926', '\x927', '\a', '\x195', '\x2', '\x2', '\x927', 
		'\x175', '\x3', '\x2', '\x2', '\x2', '\x928', '\x929', '\b', '\xBC', '\x1', 
		'\x2', '\x929', '\x92B', '\x5', '\x178', '\xBD', '\x2', '\x92A', '\x92C', 
		'\a', '\x193', '\x2', '\x2', '\x92B', '\x92A', '\x3', '\x2', '\x2', '\x2', 
		'\x92B', '\x92C', '\x3', '\x2', '\x2', '\x2', '\x92C', '\x935', '\x3', 
		'\x2', '\x2', '\x2', '\x92D', '\x92E', '\f', '\x3', '\x2', '\x2', '\x92E', 
		'\x92F', '\a', '\x18A', '\x2', '\x2', '\x92F', '\x931', '\x5', '\x178', 
		'\xBD', '\x2', '\x930', '\x932', '\a', '\x193', '\x2', '\x2', '\x931', 
		'\x930', '\x3', '\x2', '\x2', '\x2', '\x931', '\x932', '\x3', '\x2', '\x2', 
		'\x2', '\x932', '\x934', '\x3', '\x2', '\x2', '\x2', '\x933', '\x92D', 
		'\x3', '\x2', '\x2', '\x2', '\x934', '\x937', '\x3', '\x2', '\x2', '\x2', 
		'\x935', '\x933', '\x3', '\x2', '\x2', '\x2', '\x935', '\x936', '\x3', 
		'\x2', '\x2', '\x2', '\x936', '\x177', '\x3', '\x2', '\x2', '\x2', '\x937', 
		'\x935', '\x3', '\x2', '\x2', '\x2', '\x938', '\x93C', '\x5', '\x110', 
		'\x89', '\x2', '\x939', '\x93C', '\x5', '`', '\x31', '\x2', '\x93A', '\x93C', 
		'\x5', '\x6', '\x4', '\x2', '\x93B', '\x938', '\x3', '\x2', '\x2', '\x2', 
		'\x93B', '\x939', '\x3', '\x2', '\x2', '\x2', '\x93B', '\x93A', '\x3', 
		'\x2', '\x2', '\x2', '\x93C', '\x179', '\x3', '\x2', '\x2', '\x2', '\x93D', 
		'\x93E', '\a', '\x15A', '\x2', '\x2', '\x93E', '\x93F', '\x5', '\f', '\a', 
		'\x2', '\x93F', '\x940', '\a', '\x195', '\x2', '\x2', '\x940', '\x949', 
		'\x3', '\x2', '\x2', '\x2', '\x941', '\x942', '\a', '\x15A', '\x2', '\x2', 
		'\x942', '\x944', '\x5', '\f', '\a', '\x2', '\x943', '\x945', '\a', '\x152', 
		'\x2', '\x2', '\x944', '\x943', '\x3', '\x2', '\x2', '\x2', '\x944', '\x945', 
		'\x3', '\x2', '\x2', '\x2', '\x945', '\x946', '\x3', '\x2', '\x2', '\x2', 
		'\x946', '\x947', '\x5', '\x170', '\xB9', '\x2', '\x947', '\x949', '\x3', 
		'\x2', '\x2', '\x2', '\x948', '\x93D', '\x3', '\x2', '\x2', '\x2', '\x948', 
		'\x941', '\x3', '\x2', '\x2', '\x2', '\x949', '\x17B', '\x3', '\x2', '\x2', 
		'\x2', '\x94A', '\x94C', '\a', '\x132', '\x2', '\x2', '\x94B', '\x94A', 
		'\x3', '\x2', '\x2', '\x2', '\x94B', '\x94C', '\x3', '\x2', '\x2', '\x2', 
		'\x94C', '\x94D', '\x3', '\x2', '\x2', '\x2', '\x94D', '\x94E', '\a', 
		'\x152', '\x2', '\x2', '\x94E', '\x94F', '\x5', '~', '@', '\x2', '\x94F', 
		'\x17D', '\x3', '\x2', '\x2', '\x2', '\x950', '\x951', '\a', '\x152', 
		'\x2', '\x2', '\x951', '\x952', '\a', '\x174', '\x2', '\x2', '\x952', 
		'\x953', '\a', '\x175', '\x2', '\x2', '\x953', '\x954', '\x5', '~', '@', 
		'\x2', '\x954', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x955', '\x956', 
		'\a', '\x157', '\x2', '\x2', '\x956', '\x957', '\x5', 'h', '\x35', '\x2', 
		'\x957', '\x958', '\x5', '\x184', '\xC3', '\x2', '\x958', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x959', '\x95B', '\a', '\x157', '\x2', '\x2', '\x95A', 
		'\x95C', '\x5', '\x15C', '\xAF', '\x2', '\x95B', '\x95A', '\x3', '\x2', 
		'\x2', '\x2', '\x95B', '\x95C', '\x3', '\x2', '\x2', '\x2', '\x95C', '\x95D', 
		'\x3', '\x2', '\x2', '\x2', '\x95D', '\x95E', '\x5', 'h', '\x35', '\x2', 
		'\x95E', '\x95F', '\x5', '\x184', '\xC3', '\x2', '\x95F', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x960', '\x962', '\x5', '\x186', '\xC4', '\x2', 
		'\x961', '\x963', '\x5', '\x184', '\xC3', '\x2', '\x962', '\x961', '\x3', 
		'\x2', '\x2', '\x2', '\x962', '\x963', '\x3', '\x2', '\x2', '\x2', '\x963', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x964', '\x965', '\a', '\x11F', 
		'\x2', '\x2', '\x965', '\x966', '\a', '\x163', '\x2', '\x2', '\x966', 
		'\x967', '\x5', '\x188', '\xC5', '\x2', '\x967', '\x968', '\a', '\x164', 
		'\x2', '\x2', '\x968', '\x969', '\x5', 'h', '\x35', '\x2', '\x969', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x96A', '\x96C', '\x5', '\xE2', 'r', '\x2', 
		'\x96B', '\x96A', '\x3', '\x2', '\x2', '\x2', '\x96B', '\x96C', '\x3', 
		'\x2', '\x2', '\x2', '\x96C', '\x96D', '\x3', '\x2', '\x2', '\x2', '\x96D', 
		'\x96E', '\x5', '\xA6', 'T', '\x2', '\x96E', '\x96F', '\x5', '\xFC', '\x7F', 
		'\x2', '\x96F', '\x979', '\x3', '\x2', '\x2', '\x2', '\x970', '\x972', 
		'\x5', '\xE2', 'r', '\x2', '\x971', '\x970', '\x3', '\x2', '\x2', '\x2', 
		'\x971', '\x972', '\x3', '\x2', '\x2', '\x2', '\x972', '\x973', '\x3', 
		'\x2', '\x2', '\x2', '\x973', '\x975', '\x5', '\xA6', 'T', '\x2', '\x974', 
		'\x976', '\x5', '\x112', '\x8A', '\x2', '\x975', '\x974', '\x3', '\x2', 
		'\x2', '\x2', '\x975', '\x976', '\x3', '\x2', '\x2', '\x2', '\x976', '\x979', 
		'\x3', '\x2', '\x2', '\x2', '\x977', '\x979', '\a', '\x193', '\x2', '\x2', 
		'\x978', '\x96B', '\x3', '\x2', '\x2', '\x2', '\x978', '\x971', '\x3', 
		'\x2', '\x2', '\x2', '\x978', '\x977', '\x3', '\x2', '\x2', '\x2', '\x979', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x97A', '\x97C', '\a', '\x155', 
		'\x2', '\x2', '\x97B', '\x97D', '\x5', 'Z', '.', '\x2', '\x97C', '\x97B', 
		'\x3', '\x2', '\x2', '\x2', '\x97C', '\x97D', '\x3', '\x2', '\x2', '\x2', 
		'\x97D', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x97E', '\x981', '\x5', 
		'\x18E', '\xC8', '\x2', '\x97F', '\x981', '\x5', '\x192', '\xCA', '\x2', 
		'\x980', '\x97E', '\x3', '\x2', '\x2', '\x2', '\x980', '\x97F', '\x3', 
		'\x2', '\x2', '\x2', '\x981', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x982', 
		'\x983', '\a', '\x155', '\x2', '\x2', '\x983', '\x985', '\a', '\x163', 
		'\x2', '\x2', '\x984', '\x986', '\x5', '\x190', '\xC9', '\x2', '\x985', 
		'\x984', '\x3', '\x2', '\x2', '\x2', '\x985', '\x986', '\x3', '\x2', '\x2', 
		'\x2', '\x986', '\x987', '\x3', '\x2', '\x2', '\x2', '\x987', '\x988', 
		'\a', '\x164', '\x2', '\x2', '\x988', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x989', '\x98A', '\b', '\xC9', '\x1', '\x2', '\x98A', '\x98C', '\x5', 
		'\x110', '\x89', '\x2', '\x98B', '\x98D', '\a', '\x193', '\x2', '\x2', 
		'\x98C', '\x98B', '\x3', '\x2', '\x2', '\x2', '\x98C', '\x98D', '\x3', 
		'\x2', '\x2', '\x2', '\x98D', '\x996', '\x3', '\x2', '\x2', '\x2', '\x98E', 
		'\x98F', '\f', '\x3', '\x2', '\x2', '\x98F', '\x990', '\a', '\x18A', '\x2', 
		'\x2', '\x990', '\x992', '\x5', '\x110', '\x89', '\x2', '\x991', '\x993', 
		'\a', '\x193', '\x2', '\x2', '\x992', '\x991', '\x3', '\x2', '\x2', '\x2', 
		'\x992', '\x993', '\x3', '\x2', '\x2', '\x2', '\x993', '\x995', '\x3', 
		'\x2', '\x2', '\x2', '\x994', '\x98E', '\x3', '\x2', '\x2', '\x2', '\x995', 
		'\x998', '\x3', '\x2', '\x2', '\x2', '\x996', '\x994', '\x3', '\x2', '\x2', 
		'\x2', '\x996', '\x997', '\x3', '\x2', '\x2', '\x2', '\x997', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x998', '\x996', '\x3', '\x2', '\x2', '\x2', 
		'\x999', '\x99A', '\a', '\x140', '\x2', '\x2', '\x99A', '\x99B', '\a', 
		'\x163', '\x2', '\x2', '\x99B', '\x99C', '\x5', '`', '\x31', '\x2', '\x99C', 
		'\x99D', '\a', '\x164', '\x2', '\x2', '\x99D', '\x9A0', '\x3', '\x2', 
		'\x2', '\x2', '\x99E', '\x9A0', '\a', '\x140', '\x2', '\x2', '\x99F', 
		'\x999', '\x3', '\x2', '\x2', '\x2', '\x99F', '\x99E', '\x3', '\x2', '\x2', 
		'\x2', '\x9A0', '\x193', '\x3', '\x2', '\x2', '\x2', '\x9A1', '\x9D5', 
		'\a', '\x13F', '\x2', '\x2', '\x9A2', '\x9D5', '\a', '\x12A', '\x2', '\x2', 
		'\x9A3', '\x9A4', '\a', '\x13F', '\x2', '\x2', '\x9A4', '\x9A5', '\a', 
		'\x165', '\x2', '\x2', '\x9A5', '\x9D5', '\a', '\x166', '\x2', '\x2', 
		'\x9A6', '\x9A7', '\a', '\x12A', '\x2', '\x2', '\x9A7', '\x9A8', '\a', 
		'\x165', '\x2', '\x2', '\x9A8', '\x9D5', '\a', '\x166', '\x2', '\x2', 
		'\x9A9', '\x9D5', '\a', '\x169', '\x2', '\x2', '\x9AA', '\x9D5', '\a', 
		'\x16A', '\x2', '\x2', '\x9AB', '\x9D5', '\a', '\x16B', '\x2', '\x2', 
		'\x9AC', '\x9D5', '\a', '\x16C', '\x2', '\x2', '\x9AD', '\x9D5', '\a', 
		'\x16D', '\x2', '\x2', '\x9AE', '\x9D5', '\a', '\x16E', '\x2', '\x2', 
		'\x9AF', '\x9D5', '\a', '\x16F', '\x2', '\x2', '\x9B0', '\x9D5', '\a', 
		'\x170', '\x2', '\x2', '\x9B1', '\x9D5', '\a', '\x171', '\x2', '\x2', 
		'\x9B2', '\x9D5', '\a', '\x3', '\x2', '\x2', '\x9B3', '\x9D5', '\a', '\x4', 
		'\x2', '\x2', '\x9B4', '\x9D5', '\a', '\x173', '\x2', '\x2', '\x9B5', 
		'\x9D5', '\a', '\x174', '\x2', '\x2', '\x9B6', '\x9D5', '\a', '\x175', 
		'\x2', '\x2', '\x9B7', '\x9D5', '\a', '\x176', '\x2', '\x2', '\x9B8', 
		'\x9D5', '\a', '\x177', '\x2', '\x2', '\x9B9', '\x9D5', '\a', '\x178', 
		'\x2', '\x2', '\x9BA', '\x9D5', '\a', '\x179', '\x2', '\x2', '\x9BB', 
		'\x9D5', '\a', '\x17A', '\x2', '\x2', '\x9BC', '\x9D5', '\a', '\x17B', 
		'\x2', '\x2', '\x9BD', '\x9D5', '\a', '\x17C', '\x2', '\x2', '\x9BE', 
		'\x9D5', '\a', '\x17D', '\x2', '\x2', '\x9BF', '\x9D5', '\a', '\x17E', 
		'\x2', '\x2', '\x9C0', '\x9D5', '\a', '\x17F', '\x2', '\x2', '\x9C1', 
		'\x9D5', '\a', '\x181', '\x2', '\x2', '\x9C2', '\x9D5', '\a', '\x180', 
		'\x2', '\x2', '\x9C3', '\x9D5', '\a', '\x182', '\x2', '\x2', '\x9C4', 
		'\x9D5', '\a', '\x183', '\x2', '\x2', '\x9C5', '\x9D5', '\a', '\x184', 
		'\x2', '\x2', '\x9C6', '\x9D5', '\a', '\x185', '\x2', '\x2', '\x9C7', 
		'\x9D5', '\a', '\x5', '\x2', '\x2', '\x9C8', '\x9D5', '\a', '\x6', '\x2', 
		'\x2', '\x9C9', '\x9D5', '\a', '\a', '\x2', '\x2', '\x9CA', '\x9D5', '\a', 
		'\b', '\x2', '\x2', '\x9CB', '\x9D5', '\a', '\x188', '\x2', '\x2', '\x9CC', 
		'\x9D5', '\a', '\x189', '\x2', '\x2', '\x9CD', '\x9D5', '\a', '\x18A', 
		'\x2', '\x2', '\x9CE', '\x9D5', '\a', '\x18B', '\x2', '\x2', '\x9CF', 
		'\x9D5', '\a', '\x18C', '\x2', '\x2', '\x9D0', '\x9D1', '\a', '\x163', 
		'\x2', '\x2', '\x9D1', '\x9D5', '\a', '\x164', '\x2', '\x2', '\x9D2', 
		'\x9D3', '\a', '\x165', '\x2', '\x2', '\x9D3', '\x9D5', '\a', '\x166', 
		'\x2', '\x2', '\x9D4', '\x9A1', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9A2', 
		'\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9A3', '\x3', '\x2', '\x2', '\x2', 
		'\x9D4', '\x9A6', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9A9', '\x3', 
		'\x2', '\x2', '\x2', '\x9D4', '\x9AA', '\x3', '\x2', '\x2', '\x2', '\x9D4', 
		'\x9AB', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9AC', '\x3', '\x2', '\x2', 
		'\x2', '\x9D4', '\x9AD', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9AE', 
		'\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9AF', '\x3', '\x2', '\x2', '\x2', 
		'\x9D4', '\x9B0', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9B1', '\x3', 
		'\x2', '\x2', '\x2', '\x9D4', '\x9B2', '\x3', '\x2', '\x2', '\x2', '\x9D4', 
		'\x9B3', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9B4', '\x3', '\x2', '\x2', 
		'\x2', '\x9D4', '\x9B5', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9B6', 
		'\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9B7', '\x3', '\x2', '\x2', '\x2', 
		'\x9D4', '\x9B8', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9B9', '\x3', 
		'\x2', '\x2', '\x2', '\x9D4', '\x9BA', '\x3', '\x2', '\x2', '\x2', '\x9D4', 
		'\x9BB', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9BC', '\x3', '\x2', '\x2', 
		'\x2', '\x9D4', '\x9BD', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9BE', 
		'\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9BF', '\x3', '\x2', '\x2', '\x2', 
		'\x9D4', '\x9C0', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9C1', '\x3', 
		'\x2', '\x2', '\x2', '\x9D4', '\x9C2', '\x3', '\x2', '\x2', '\x2', '\x9D4', 
		'\x9C3', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9C4', '\x3', '\x2', '\x2', 
		'\x2', '\x9D4', '\x9C5', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9C6', 
		'\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9C7', '\x3', '\x2', '\x2', '\x2', 
		'\x9D4', '\x9C8', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9C9', '\x3', 
		'\x2', '\x2', '\x2', '\x9D4', '\x9CA', '\x3', '\x2', '\x2', '\x2', '\x9D4', 
		'\x9CB', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9CC', '\x3', '\x2', '\x2', 
		'\x2', '\x9D4', '\x9CD', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9CE', 
		'\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9CF', '\x3', '\x2', '\x2', '\x2', 
		'\x9D4', '\x9D0', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9D2', '\x3', 
		'\x2', '\x2', '\x2', '\x9D5', '\x195', '\x3', '\x2', '\x2', '\x2', '\x9D6', 
		'\x9DE', '\a', '\x196', '\x2', '\x2', '\x9D7', '\x9DE', '\a', '\x19C', 
		'\x2', '\x2', '\x9D8', '\x9DE', '\a', '\x19D', '\x2', '\x2', '\x9D9', 
		'\x9DE', '\a', '\x19E', '\x2', '\x2', '\x9DA', '\x9DE', '\x5', '\x198', 
		'\xCD', '\x2', '\x9DB', '\x9DE', '\x5', '\x19A', '\xCE', '\x2', '\x9DC', 
		'\x9DE', '\x5', '\x19C', '\xCF', '\x2', '\x9DD', '\x9D6', '\x3', '\x2', 
		'\x2', '\x2', '\x9DD', '\x9D7', '\x3', '\x2', '\x2', '\x2', '\x9DD', '\x9D8', 
		'\x3', '\x2', '\x2', '\x2', '\x9DD', '\x9D9', '\x3', '\x2', '\x2', '\x2', 
		'\x9DD', '\x9DA', '\x3', '\x2', '\x2', '\x2', '\x9DD', '\x9DB', '\x3', 
		'\x2', '\x2', '\x2', '\x9DD', '\x9DC', '\x3', '\x2', '\x2', '\x2', '\x9DE', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x9DF', '\x9E0', '\t', '\x10', '\x2', 
		'\x2', '\x9E0', '\x199', '\x3', '\x2', '\x2', '\x2', '\x9E1', '\x9E2', 
		'\a', '\x141', '\x2', '\x2', '\x9E2', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'\x9E3', '\x9E4', '\t', '\x11', '\x2', '\x2', '\x9E4', '\x19D', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x19F', '\x1AB', '\x1AF', '\x1BA', '\x1BE', 
		'\x1CD', '\x1D4', '\x1D9', '\x1DB', '\x1E0', '\x1E6', '\x1F0', '\x1F7', 
		'\x1FD', '\x201', '\x206', '\x20C', '\x213', '\x219', '\x21C', '\x21F', 
		'\x222', '\x229', '\x230', '\x264', '\x273', '\x279', '\x27F', '\x28C', 
		'\x28E', '\x298', '\x2A7', '\x2AD', '\x2CB', '\x2D0', '\x2D4', '\x2D8', 
		'\x2DB', '\x2DF', '\x2E5', '\x2E7', '\x2EF', '\x2F3', '\x2F6', '\x2FD', 
		'\x304', '\x308', '\x30D', '\x311', '\x314', '\x319', '\x31F', '\x32C', 
		'\x337', '\x339', '\x348', '\x34A', '\x356', '\x358', '\x364', '\x378', 
		'\x37A', '\x386', '\x388', '\x393', '\x39E', '\x3A9', '\x3B5', '\x3B7', 
		'\x3C3', '\x3C5', '\x3CF', '\x3D7', '\x3E3', '\x3EA', '\x3EE', '\x3F2', 
		'\x3F6', '\x3FA', '\x3FF', '\x402', '\x405', '\x40B', '\x413', '\x418', 
		'\x41B', '\x421', '\x42C', '\x443', '\x447', '\x44F', '\x455', '\x469', 
		'\x46D', '\x47A', '\x47E', '\x481', '\x488', '\x490', '\x49A', '\x4A5', 
		'\x4B1', '\x4BB', '\x4C0', '\x4C7', '\x4CA', '\x4CF', '\x4D4', '\x4EB', 
		'\x4F0', '\x4F4', '\x4F9', '\x501', '\x505', '\x50B', '\x50F', '\x513', 
		'\x518', '\x51A', '\x52D', '\x535', '\x539', '\x53E', '\x542', '\x547', 
		'\x54A', '\x561', '\x567', '\x572', '\x576', '\x579', '\x583', '\x589', 
		'\x58C', '\x593', '\x59D', '\x5A1', '\x5A4', '\x5A7', '\x5AB', '\x5B0', 
		'\x5B2', '\x5B6', '\x5BA', '\x5C3', '\x5D0', '\x5D8', '\x5DE', '\x5E4', 
		'\x5E8', '\x5EB', '\x5F4', '\x5FD', '\x605', '\x610', '\x616', '\x621', 
		'\x624', '\x629', '\x638', '\x63E', '\x647', '\x651', '\x657', '\x65F', 
		'\x663', '\x667', '\x66C', '\x671', '\x678', '\x67A', '\x67F', '\x683', 
		'\x691', '\x697', '\x6A9', '\x6AB', '\x6B5', '\x6BA', '\x6C1', '\x6C7', 
		'\x6CC', '\x6D2', '\x6D9', '\x6DD', '\x6DF', '\x6E1', '\x6E8', '\x6EB', 
		'\x6EE', '\x6F1', '\x6F6', '\x6FA', '\x6FD', '\x701', '\x705', '\x70A', 
		'\x70D', '\x70F', '\x713', '\x71A', '\x720', '\x724', '\x72A', '\x72F', 
		'\x731', '\x737', '\x73B', '\x741', '\x748', '\x74C', '\x74E', '\x750', 
		'\x757', '\x761', '\x765', '\x767', '\x769', '\x76D', '\x770', '\x776', 
		'\x780', '\x784', '\x78A', '\x792', '\x796', '\x799', '\x79D', '\x7A2', 
		'\x7A5', '\x7A8', '\x7AC', '\x7B1', '\x7BB', '\x7C2', '\x7C7', '\x7CB', 
		'\x7D0', '\x7D6', '\x7DA', '\x7E0', '\x7E6', '\x7EA', '\x7EF', '\x7F5', 
		'\x7F9', '\x7FC', '\x800', '\x803', '\x805', '\x808', '\x812', '\x817', 
		'\x819', '\x81C', '\x81F', '\x822', '\x82B', '\x835', '\x83A', '\x83D', 
		'\x841', '\x844', '\x847', '\x84B', '\x854', '\x863', '\x869', '\x86D', 
		'\x871', '\x875', '\x879', '\x87D', '\x881', '\x885', '\x888', '\x88C', 
		'\x897', '\x89B', '\x8A2', '\x8A6', '\x8AB', '\x8B0', '\x8B7', '\x8BB', 
		'\x8C5', '\x8D5', '\x8DA', '\x8DE', '\x8E1', '\x8E5', '\x8EB', '\x8EE', 
		'\x8F2', '\x8FC', '\x8FF', '\x907', '\x90C', '\x911', '\x919', '\x920', 
		'\x924', '\x92B', '\x931', '\x935', '\x93B', '\x944', '\x948', '\x94B', 
		'\x95B', '\x962', '\x96B', '\x971', '\x975', '\x978', '\x97C', '\x980', 
		'\x985', '\x98C', '\x992', '\x996', '\x99F', '\x9D4', '\x9DD',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
